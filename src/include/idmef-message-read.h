
/*****
*
* Copyright (C) 2001, 2002, 2003, 2004, 2005 PreludeIDS Technologies. All Rights Reserved.
* Author: Yoann Vandoorselaere <yoannv@gmail.com>
* Author: Nicolas Delon 
*
* This file is part of the Requiem library.
*
* This program is free software; you can redistribute it and/or modify
* it under the terms of the GNU General Public License as published by
* the Free Software Foundation; either version 2, or (at your option)
* any later version.
*
* This program is distributed in the hope that it will be useful,
* but WITHOUT ANY WARRANTY; without even the implied warranty of
* MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
* GNU General Public License for more details.
*
* You should have received a copy of the GNU General Public License
* along with this program; see the file COPYING.  If not, write to
* the Free Software Foundation, 675 Mass Ave, Cambridge, MA 02139, USA.
*
*****/

/* Auto-generated by the GenerateIDMEFMessageReadH package */

#ifndef _LIBREQUIEM_IDMEF_MESSAGE_READ_H
#define _LIBREQUIEM_IDMEF_MESSAGE_READ_H

#include "requiem-inttypes.h"
#include "requiem-msgbuf.h"

#ifdef __cplusplus
 extern "C" {
#endif


int idmef_additional_data_read(idmef_additional_data_t *additional_data, requiem_msg_t *msg);

int idmef_reference_read(idmef_reference_t *reference, requiem_msg_t *msg);

int idmef_classification_read(idmef_classification_t *classification, requiem_msg_t *msg);

int idmef_user_id_read(idmef_user_id_t *user_id, requiem_msg_t *msg);

int idmef_user_read(idmef_user_t *user, requiem_msg_t *msg);

int idmef_address_read(idmef_address_t *address, requiem_msg_t *msg);

int idmef_process_read(idmef_process_t *process, requiem_msg_t *msg);

int idmef_web_service_read(idmef_web_service_t *web_service, requiem_msg_t *msg);

int idmef_snmp_service_read(idmef_snmp_service_t *snmp_service, requiem_msg_t *msg);

int idmef_service_read(idmef_service_t *service, requiem_msg_t *msg);

int idmef_node_read(idmef_node_t *node, requiem_msg_t *msg);

int idmef_source_read(idmef_source_t *source, requiem_msg_t *msg);

int idmef_file_access_read(idmef_file_access_t *file_access, requiem_msg_t *msg);

int idmef_inode_read(idmef_inode_t *inode, requiem_msg_t *msg);

int idmef_checksum_read(idmef_checksum_t *checksum, requiem_msg_t *msg);

int idmef_file_read(idmef_file_t *file, requiem_msg_t *msg);

int idmef_linkage_read(idmef_linkage_t *linkage, requiem_msg_t *msg);

int idmef_target_read(idmef_target_t *target, requiem_msg_t *msg);

int idmef_analyzer_read(idmef_analyzer_t *analyzer, requiem_msg_t *msg);

int idmef_alertident_read(idmef_alertident_t *alertident, requiem_msg_t *msg);

int idmef_impact_read(idmef_impact_t *impact, requiem_msg_t *msg);

int idmef_action_read(idmef_action_t *action, requiem_msg_t *msg);

int idmef_confidence_read(idmef_confidence_t *confidence, requiem_msg_t *msg);

int idmef_assessment_read(idmef_assessment_t *assessment, requiem_msg_t *msg);

int idmef_tool_alert_read(idmef_tool_alert_t *tool_alert, requiem_msg_t *msg);

int idmef_correlation_alert_read(idmef_correlation_alert_t *correlation_alert, requiem_msg_t *msg);

int idmef_overflow_alert_read(idmef_overflow_alert_t *overflow_alert, requiem_msg_t *msg);

int idmef_alert_read(idmef_alert_t *alert, requiem_msg_t *msg);

int idmef_heartbeat_read(idmef_heartbeat_t *heartbeat, requiem_msg_t *msg);

int idmef_message_read(idmef_message_t *message, requiem_msg_t *msg);


#ifdef __cplusplus
 }
#endif

#endif /* _LIBREQUIEM_IDMEF_MESSAGE_READ_H */

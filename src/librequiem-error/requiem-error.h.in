/*****
*
* Copyright (C) 2004, 2005 PreludeIDS Technologies. All Rights Reserved.
* Author: Yoann Vandoorselaere <yoannv@gmail.com>
*
* This file is part of the Requiem library.
*
* This program is free software; you can redistribute it and/or modify
* it under the terms of the GNU General Public License as published by
* the Free Software Foundation; either version 2, or (at your option)
* any later version.
*
* This program is distributed in the hope that it will be useful,
* but WITHOUT ANY WARRANTY; without even the implied warranty of
* MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
* GNU General Public License for more details.
*
* You should have received a copy of the GNU General Public License
* along with this program; see the file COPYING.  If not, write to
* the Free Software Foundation, 675 Mass Ave, Cambridge, MA 02139, USA.
*
*****/

#ifndef _LIBREQUIEM_REQUIEM_ERROR_H
#define _LIBREQUIEM_REQUIEM_ERROR_H

#ifdef HAVE_CONFIG_H
# include "config.h"
#endif

#include <stdio.h>
#include <unistd.h>
#include <stdarg.h>
#include <errno.h>


#include "requiem-thread.h"
#include "requiem-string.h"

#ifdef __cplusplus
 extern "C" {
#endif

#ifndef __attribute__
/* This feature is available in gcc versions 2.5 and later.  */
# if __GNUC__ < 2 || (__GNUC__ == 2 && __GNUC_MINOR__ < 5) || __STRICT_ANSI__
#  define __attribute__(Spec) /* empty */
# endif
/* The __-protected variants of `format' and `printf' attributes
   are accepted by gcc versions 2.6.4 (effectively 2.7) and later.  */
# if __GNUC__ < 2 || (__GNUC__ == 2 && __GNUC_MINOR__ < 7)
#  define __format__ format
#  define __printf__ printf
# endif
#endif


/*
 * This is inspired from the GPG error interface.
 *
 * Bit 1 of requiem_error_t remain set (negative value).
 * Bit 2 to 9 are set to the source of the error.
 * Bit 10 specify whether there is a verbose error available.
 * Bit 11 to 15 are unspecified.
 * Bit 16 to 32 are set to the code of the error.
 */


#define REQUIEM_ERROR_SYSTEM_ERROR    (1 << 15)

typedef enum {
@include err-sources.in
} requiem_error_source_t;

typedef enum {
@include err-codes.in
@include errnos.in
} requiem_error_code_t;


#ifndef REQUIEM_ERROR_SOURCE_DEFAULT
 #define REQUIEM_ERROR_SOURCE_DEFAULT  REQUIEM_ERROR_SOURCE_UNKNOWN
#endif

typedef signed int requiem_error_t;

requiem_bool_t requiem_error_is_verbose(requiem_error_t error);

requiem_error_code_t requiem_error_get_code(requiem_error_t error);

requiem_error_source_t requiem_error_get_source(requiem_error_t error);

requiem_error_code_t requiem_error_code_from_errno(int err);

requiem_error_t requiem_error_make(requiem_error_source_t source, requiem_error_code_t code);

requiem_error_t requiem_error_make_from_errno(requiem_error_source_t source, int err);

void requiem_perror(requiem_error_t error, const char *fmt, ...) __attribute__ ((__format__ (__printf__, 2, 3)));

const char *requiem_strerror(requiem_error_t err);

const char *requiem_strsource(requiem_error_t err);

int requiem_error_code_to_errno(requiem_error_code_t code);

requiem_error_t requiem_error_verbose_make_v(requiem_error_source_t source,
                                             requiem_error_code_t code, const char *fmt, va_list ap)
                                             __attribute__ ((__format__ (__printf__, 3, 0)));

requiem_error_t requiem_error_verbose_make(requiem_error_source_t source,
                                           requiem_error_code_t code, const char *fmt, ...)
                                           __attribute__ ((__format__ (__printf__, 3, 4)));


static inline requiem_error_t requiem_error(requiem_error_code_t code)
{
        return requiem_error_make(REQUIEM_ERROR_SOURCE_DEFAULT, code);
}


static inline requiem_error_t requiem_error_verbose(requiem_error_code_t code, const char *fmt, ...)
                                                    __attribute__ ((__format__ (__printf__, 2, 3)));

static inline requiem_error_t requiem_error_verbose(requiem_error_code_t code, const char *fmt, ...)
{
        int ret;
        va_list ap;

        va_start(ap, fmt);
        ret = requiem_error_verbose_make_v(REQUIEM_ERROR_SOURCE_DEFAULT, code, fmt, ap);
        va_end(ap);

        return ret;
}



static inline requiem_error_t requiem_error_from_errno(int err)
{
        return requiem_error_make(REQUIEM_ERROR_SOURCE_DEFAULT, requiem_error_code_from_errno(err));
}


#ifdef __cplusplus
 }
#endif


#endif

<TYPEDEF>
<NAME>requiem_ident_t</NAME>
typedef struct requiem_ident requiem_ident_t;
</TYPEDEF>
<FUNCTION>
<NAME>requiem_ident_generate</NAME>
<RETURNS>int </RETURNS>
requiem_ident_t *ident, requiem_string_t *out
</FUNCTION>
<FUNCTION>
<NAME>requiem_ident_inc</NAME>
<RETURNS>uint64_t </RETURNS>
requiem_ident_t *ident
</FUNCTION>
<FUNCTION>
<NAME>requiem_ident_destroy</NAME>
<RETURNS>void </RETURNS>
requiem_ident_t *ident
</FUNCTION>
<FUNCTION>
<NAME>requiem_ident_new</NAME>
<RETURNS>int </RETURNS>
requiem_ident_t **ret
</FUNCTION>
<FUNCTION>
<NAME>idmef_additional_data_read</NAME>
<RETURNS>int </RETURNS>
idmef_additional_data_t *additional_data, requiem_msg_t *msg
</FUNCTION>
<FUNCTION>
<NAME>idmef_reference_read</NAME>
<RETURNS>int </RETURNS>
idmef_reference_t *reference, requiem_msg_t *msg
</FUNCTION>
<FUNCTION>
<NAME>idmef_classification_read</NAME>
<RETURNS>int </RETURNS>
idmef_classification_t *classification, requiem_msg_t *msg
</FUNCTION>
<FUNCTION>
<NAME>idmef_user_id_read</NAME>
<RETURNS>int </RETURNS>
idmef_user_id_t *user_id, requiem_msg_t *msg
</FUNCTION>
<FUNCTION>
<NAME>idmef_user_read</NAME>
<RETURNS>int </RETURNS>
idmef_user_t *user, requiem_msg_t *msg
</FUNCTION>
<FUNCTION>
<NAME>idmef_address_read</NAME>
<RETURNS>int </RETURNS>
idmef_address_t *address, requiem_msg_t *msg
</FUNCTION>
<FUNCTION>
<NAME>idmef_process_read</NAME>
<RETURNS>int </RETURNS>
idmef_process_t *process, requiem_msg_t *msg
</FUNCTION>
<FUNCTION>
<NAME>idmef_web_service_read</NAME>
<RETURNS>int </RETURNS>
idmef_web_service_t *web_service, requiem_msg_t *msg
</FUNCTION>
<FUNCTION>
<NAME>idmef_snmp_service_read</NAME>
<RETURNS>int </RETURNS>
idmef_snmp_service_t *snmp_service, requiem_msg_t *msg
</FUNCTION>
<FUNCTION>
<NAME>idmef_service_read</NAME>
<RETURNS>int </RETURNS>
idmef_service_t *service, requiem_msg_t *msg
</FUNCTION>
<FUNCTION>
<NAME>idmef_node_read</NAME>
<RETURNS>int </RETURNS>
idmef_node_t *node, requiem_msg_t *msg
</FUNCTION>
<FUNCTION>
<NAME>idmef_source_read</NAME>
<RETURNS>int </RETURNS>
idmef_source_t *source, requiem_msg_t *msg
</FUNCTION>
<FUNCTION>
<NAME>idmef_file_access_read</NAME>
<RETURNS>int </RETURNS>
idmef_file_access_t *file_access, requiem_msg_t *msg
</FUNCTION>
<FUNCTION>
<NAME>idmef_inode_read</NAME>
<RETURNS>int </RETURNS>
idmef_inode_t *inode, requiem_msg_t *msg
</FUNCTION>
<FUNCTION>
<NAME>idmef_checksum_read</NAME>
<RETURNS>int </RETURNS>
idmef_checksum_t *checksum, requiem_msg_t *msg
</FUNCTION>
<FUNCTION>
<NAME>idmef_file_read</NAME>
<RETURNS>int </RETURNS>
idmef_file_t *file, requiem_msg_t *msg
</FUNCTION>
<FUNCTION>
<NAME>idmef_linkage_read</NAME>
<RETURNS>int </RETURNS>
idmef_linkage_t *linkage, requiem_msg_t *msg
</FUNCTION>
<FUNCTION>
<NAME>idmef_target_read</NAME>
<RETURNS>int </RETURNS>
idmef_target_t *target, requiem_msg_t *msg
</FUNCTION>
<FUNCTION>
<NAME>idmef_analyzer_read</NAME>
<RETURNS>int </RETURNS>
idmef_analyzer_t *analyzer, requiem_msg_t *msg
</FUNCTION>
<FUNCTION>
<NAME>idmef_alertident_read</NAME>
<RETURNS>int </RETURNS>
idmef_alertident_t *alertident, requiem_msg_t *msg
</FUNCTION>
<FUNCTION>
<NAME>idmef_impact_read</NAME>
<RETURNS>int </RETURNS>
idmef_impact_t *impact, requiem_msg_t *msg
</FUNCTION>
<FUNCTION>
<NAME>idmef_action_read</NAME>
<RETURNS>int </RETURNS>
idmef_action_t *action, requiem_msg_t *msg
</FUNCTION>
<FUNCTION>
<NAME>idmef_confidence_read</NAME>
<RETURNS>int </RETURNS>
idmef_confidence_t *confidence, requiem_msg_t *msg
</FUNCTION>
<FUNCTION>
<NAME>idmef_assessment_read</NAME>
<RETURNS>int </RETURNS>
idmef_assessment_t *assessment, requiem_msg_t *msg
</FUNCTION>
<FUNCTION>
<NAME>idmef_tool_alert_read</NAME>
<RETURNS>int </RETURNS>
idmef_tool_alert_t *tool_alert, requiem_msg_t *msg
</FUNCTION>
<FUNCTION>
<NAME>idmef_correlation_alert_read</NAME>
<RETURNS>int </RETURNS>
idmef_correlation_alert_t *correlation_alert, requiem_msg_t *msg
</FUNCTION>
<FUNCTION>
<NAME>idmef_overflow_alert_read</NAME>
<RETURNS>int </RETURNS>
idmef_overflow_alert_t *overflow_alert, requiem_msg_t *msg
</FUNCTION>
<FUNCTION>
<NAME>idmef_alert_read</NAME>
<RETURNS>int </RETURNS>
idmef_alert_t *alert, requiem_msg_t *msg
</FUNCTION>
<FUNCTION>
<NAME>idmef_heartbeat_read</NAME>
<RETURNS>int </RETURNS>
idmef_heartbeat_t *heartbeat, requiem_msg_t *msg
</FUNCTION>
<FUNCTION>
<NAME>idmef_message_read</NAME>
<RETURNS>int </RETURNS>
idmef_message_t *message, requiem_msg_t *msg
</FUNCTION>
<TYPEDEF>
<NAME>requiem_msgbuf_t</NAME>
typedef struct requiem_msgbuf requiem_msgbuf_t;
</TYPEDEF>
<ENUM>
<NAME>requiem_msgbuf_flags_t</NAME>
typedef enum {
        REQUIEM_MSGBUF_FLAGS_ASYNC = 0x01
} requiem_msgbuf_flags_t;
</ENUM>
<FUNCTION>
<NAME>requiem_msgbuf_new</NAME>
<RETURNS>int </RETURNS>
requiem_msgbuf_t **msgbuf
</FUNCTION>
<FUNCTION>
<NAME>requiem_msgbuf_destroy</NAME>
<RETURNS>void </RETURNS>
requiem_msgbuf_t *msgbuf
</FUNCTION>
<FUNCTION>
<NAME>requiem_msgbuf_mark_end</NAME>
<RETURNS>void </RETURNS>
requiem_msgbuf_t *msgbuf
</FUNCTION>
<FUNCTION>
<NAME>requiem_msgbuf_set</NAME>
<RETURNS>int </RETURNS>
requiem_msgbuf_t *msgbuf, uint8_t tag, uint32_t len, const void *data
</FUNCTION>
<FUNCTION>
<NAME>requiem_msgbuf_get_msg</NAME>
<RETURNS>requiem_msg_t *</RETURNS>
requiem_msgbuf_t *msgbuf
</FUNCTION>
<FUNCTION>
<NAME>requiem_msgbuf_set_callback</NAME>
<RETURNS>void </RETURNS>
requiem_msgbuf_t *msgbuf, int (*send_msg)(requiem_msgbuf_t *msgbuf, requiem_msg_t *msg)
</FUNCTION>
<FUNCTION>
<NAME>requiem_msgbuf_set_data</NAME>
<RETURNS>void </RETURNS>
requiem_msgbuf_t *msgbuf, void *data
</FUNCTION>
<FUNCTION>
<NAME>requiem_msgbuf_get_data</NAME>
<RETURNS>void *</RETURNS>
requiem_msgbuf_t *msgbuf
</FUNCTION>
<FUNCTION>
<NAME>requiem_msgbuf_set_flags</NAME>
<RETURNS>void </RETURNS>
requiem_msgbuf_t *msgbuf, requiem_msgbuf_flags_t flags
</FUNCTION>
<FUNCTION>
<NAME>requiem_msgbuf_get_flags</NAME>
<RETURNS>requiem_msgbuf_flags_t </RETURNS>
requiem_msgbuf_t *msgbuf
</FUNCTION>
<ENUM>
<NAME>idmef_data_type_t</NAME>
typedef enum {
	IDMEF_DATA_TYPE_UNKNOWN      = 0,
	IDMEF_DATA_TYPE_CHAR         = 1,
	IDMEF_DATA_TYPE_BYTE         = 2,
	IDMEF_DATA_TYPE_UINT32       = 3,
	IDMEF_DATA_TYPE_UINT64       = 4,
	IDMEF_DATA_TYPE_FLOAT        = 5,
	IDMEF_DATA_TYPE_CHAR_STRING  = 6,
	IDMEF_DATA_TYPE_BYTE_STRING  = 7
} idmef_data_type_t;
</ENUM>
<STRUCT>
<NAME>data</NAME>
typedef struct {
        int refcount;

        int flags;
        idmef_data_type_t type;
        size_t len;

        union {
		char char_data;
		uint8_t byte_data;
		uint32_t uint32_data;
		uint64_t uint64_data;
		float float_data;
		void *rw_data;
		const void *ro_data;
        } data;
        
</STRUCT>
<FUNCTION>
<NAME>idmef_data_new</NAME>
<RETURNS>int </RETURNS>
idmef_data_t **data
</FUNCTION>
<FUNCTION>
<NAME>idmef_data_ref</NAME>
<RETURNS>idmef_data_t *</RETURNS>
idmef_data_t *data
</FUNCTION>
<FUNCTION>
<NAME>idmef_data_new_char</NAME>
<RETURNS>int </RETURNS>
idmef_data_t **data, char c
</FUNCTION>
<FUNCTION>
<NAME>idmef_data_new_byte</NAME>
<RETURNS>int </RETURNS>
idmef_data_t **data, uint8_t i
</FUNCTION>
<FUNCTION>
<NAME>idmef_data_new_uint32</NAME>
<RETURNS>int </RETURNS>
idmef_data_t **data, uint32_t i
</FUNCTION>
<FUNCTION>
<NAME>idmef_data_new_uint64</NAME>
<RETURNS>int </RETURNS>
idmef_data_t **data, uint64_t i
</FUNCTION>
<FUNCTION>
<NAME>idmef_data_new_float</NAME>
<RETURNS>int </RETURNS>
idmef_data_t **data, float f
</FUNCTION>
<FUNCTION>
<NAME>idmef_data_set_char</NAME>
<RETURNS>void </RETURNS>
idmef_data_t *data, char c
</FUNCTION>
<FUNCTION>
<NAME>idmef_data_set_byte</NAME>
<RETURNS>void </RETURNS>
idmef_data_t *data, uint8_t i
</FUNCTION>
<FUNCTION>
<NAME>idmef_data_set_uint32</NAME>
<RETURNS>void </RETURNS>
idmef_data_t *data, uint32_t i
</FUNCTION>
<FUNCTION>
<NAME>idmef_data_set_uint64</NAME>
<RETURNS>void </RETURNS>
idmef_data_t *data, uint64_t i
</FUNCTION>
<FUNCTION>
<NAME>idmef_data_set_float</NAME>
<RETURNS>void </RETURNS>
idmef_data_t *data, float f
</FUNCTION>
<FUNCTION>
<NAME>idmef_data_set_ptr_dup_fast</NAME>
<RETURNS>int </RETURNS>
idmef_data_t *data, idmef_data_type_t type, const void *ptr, size_t len
</FUNCTION>
<FUNCTION>
<NAME>idmef_data_set_ptr_ref_fast</NAME>
<RETURNS>int </RETURNS>
idmef_data_t *data, idmef_data_type_t type, const void *ptr, size_t len
</FUNCTION>
<FUNCTION>
<NAME>idmef_data_set_ptr_nodup_fast</NAME>
<RETURNS>int </RETURNS>
idmef_data_t *data, idmef_data_type_t type, void *ptr, size_t len
</FUNCTION>
<FUNCTION>
<NAME>idmef_data_new_ptr_dup_fast</NAME>
<RETURNS>int </RETURNS>
idmef_data_t **data, idmef_data_type_t type, const void *ptr, size_t len
</FUNCTION>
<FUNCTION>
<NAME>idmef_data_new_ptr_ref_fast</NAME>
<RETURNS>int </RETURNS>
idmef_data_t **data, idmef_data_type_t type, const void *ptr, size_t len
</FUNCTION>
<FUNCTION>
<NAME>idmef_data_new_ptr_nodup_fast</NAME>
<RETURNS>int </RETURNS>
idmef_data_t **data, idmef_data_type_t type, void *ptr, size_t len
</FUNCTION>
<FUNCTION>
<NAME>idmef_data_set_char_string_dup_fast</NAME>
<RETURNS>int </RETURNS>
idmef_data_t *data, const char *str, size_t len
</FUNCTION>
<FUNCTION>
<NAME>idmef_data_new_char_string_dup_fast</NAME>
<RETURNS>int </RETURNS>
idmef_data_t **data, const char *str, size_t len
</FUNCTION>
<FUNCTION>
<NAME>idmef_data_new_char_string_ref_fast</NAME>
<RETURNS>int </RETURNS>
idmef_data_t **data, const char *ptr, size_t len
</FUNCTION>
<FUNCTION>
<NAME>idmef_data_new_char_string_nodup_fast</NAME>
<RETURNS>int </RETURNS>
idmef_data_t **data, char *ptr, size_t len
</FUNCTION>
<FUNCTION>
<NAME>idmef_data_set_char_string_ref_fast</NAME>
<RETURNS>int </RETURNS>
idmef_data_t *data, const char *ptr, size_t len
</FUNCTION>
<FUNCTION>
<NAME>idmef_data_set_char_string_nodup_fast</NAME>
<RETURNS>int </RETURNS>
idmef_data_t *data, char *ptr, size_t len
</FUNCTION>
<FUNCTION>
<NAME>idmef_data_new_char_string_ref</NAME>
<RETURNS>int </RETURNS>
idmef_data_t **data, const char *ptr
</FUNCTION>
<FUNCTION>
<NAME>idmef_data_new_char_string_dup</NAME>
<RETURNS>int </RETURNS>
idmef_data_t **data, const char *ptr
</FUNCTION>
<FUNCTION>
<NAME>idmef_data_new_char_string_nodup</NAME>
<RETURNS>int </RETURNS>
idmef_data_t **data, char *ptr
</FUNCTION>
<FUNCTION>
<NAME>idmef_data_set_char_string_ref</NAME>
<RETURNS>int </RETURNS>
idmef_data_t *data, const char *ptr
</FUNCTION>
<FUNCTION>
<NAME>idmef_data_set_char_string_dup</NAME>
<RETURNS>int </RETURNS>
idmef_data_t *data, const char *ptr
</FUNCTION>
<FUNCTION>
<NAME>idmef_data_set_char_string_nodup</NAME>
<RETURNS>int </RETURNS>
idmef_data_t *data, char *ptr
</FUNCTION>
<MACRO>
<NAME>idmef_data_set_char_string_constant</NAME>
#define idmef_data_set_char_string_constant(string, str)		\
	idmef_data_set_char_string_ref_fast((string), (str), sizeof((str)) - 1)
</MACRO>
<FUNCTION>
<NAME>idmef_data_new_byte_string_ref</NAME>
<RETURNS>int </RETURNS>
idmef_data_t **data, const unsigned char *ptr, size_t len
</FUNCTION>
<FUNCTION>
<NAME>idmef_data_new_byte_string_dup</NAME>
<RETURNS>int </RETURNS>
idmef_data_t **data, const unsigned char *ptr, size_t len
</FUNCTION>
<FUNCTION>
<NAME>idmef_data_new_byte_string_nodup</NAME>
<RETURNS>int </RETURNS>
idmef_data_t **data, unsigned char *ptr, size_t len
</FUNCTION>
<FUNCTION>
<NAME>idmef_data_set_byte_string_ref</NAME>
<RETURNS>int </RETURNS>
idmef_data_t *data, const unsigned char *ptr, size_t len
</FUNCTION>
<FUNCTION>
<NAME>idmef_data_set_byte_string_dup</NAME>
<RETURNS>int </RETURNS>
idmef_data_t *data, const unsigned char *ptr, size_t len
</FUNCTION>
<FUNCTION>
<NAME>idmef_data_set_byte_string_nodup</NAME>
<RETURNS>int </RETURNS>
idmef_data_t *data, unsigned char *ptr, size_t len
</FUNCTION>
<FUNCTION>
<NAME>idmef_data_destroy</NAME>
<RETURNS>void </RETURNS>
idmef_data_t *data
</FUNCTION>
<FUNCTION>
<NAME>idmef_data_copy_ref</NAME>
<RETURNS>int </RETURNS>
const idmef_data_t *src, idmef_data_t *dst
</FUNCTION>
<FUNCTION>
<NAME>idmef_data_copy_dup</NAME>
<RETURNS>int </RETURNS>
const idmef_data_t *src, idmef_data_t *dst
</FUNCTION>
<FUNCTION>
<NAME>idmef_data_clone</NAME>
<RETURNS>int </RETURNS>
const idmef_data_t *src, idmef_data_t **dst
</FUNCTION>
<FUNCTION>
<NAME>idmef_data_get_type</NAME>
<RETURNS>idmef_data_type_t </RETURNS>
const idmef_data_t *data
</FUNCTION>
<FUNCTION>
<NAME>idmef_data_get_len</NAME>
<RETURNS>size_t </RETURNS>
const idmef_data_t *data
</FUNCTION>
<FUNCTION>
<NAME>idmef_data_get_data</NAME>
<RETURNS>const void *</RETURNS>
const idmef_data_t *data
</FUNCTION>
<FUNCTION>
<NAME>idmef_data_get_char</NAME>
<RETURNS>char </RETURNS>
const idmef_data_t *data
</FUNCTION>
<FUNCTION>
<NAME>idmef_data_get_byte</NAME>
<RETURNS>uint8_t </RETURNS>
const idmef_data_t *data
</FUNCTION>
<FUNCTION>
<NAME>idmef_data_get_uint32</NAME>
<RETURNS>uint32_t </RETURNS>
const idmef_data_t *data
</FUNCTION>
<FUNCTION>
<NAME>idmef_data_get_uint64</NAME>
<RETURNS>uint64_t </RETURNS>
const idmef_data_t *data
</FUNCTION>
<FUNCTION>
<NAME>idmef_data_get_float</NAME>
<RETURNS>float </RETURNS>
const idmef_data_t *data
</FUNCTION>
<FUNCTION>
<NAME>idmef_data_get_char_string</NAME>
<RETURNS>const char *</RETURNS>
const idmef_data_t *data
</FUNCTION>
<FUNCTION>
<NAME>idmef_data_get_byte_string</NAME>
<RETURNS>const unsigned char *</RETURNS>
const idmef_data_t *data
</FUNCTION>
<FUNCTION>
<NAME>idmef_data_is_empty</NAME>
<RETURNS>requiem_bool_t </RETURNS>
const idmef_data_t *data
</FUNCTION>
<FUNCTION>
<NAME>idmef_data_to_string</NAME>
<RETURNS>int </RETURNS>
const idmef_data_t *data, requiem_string_t *out
</FUNCTION>
<FUNCTION>
<NAME>idmef_data_destroy_internal</NAME>
<RETURNS>void </RETURNS>
idmef_data_t *data
</FUNCTION>
<FUNCTION>
<NAME>idmef_data_compare</NAME>
<RETURNS>int </RETURNS>
const idmef_data_t *data1, const idmef_data_t *data2
</FUNCTION>
<ENUM>
<NAME>requiem_client_exit_status_t</NAME>
typedef enum {
        REQUIEM_CLIENT_EXIT_STATUS_SUCCESS = 0,
        REQUIEM_CLIENT_EXIT_STATUS_FAILURE = -1
} requiem_client_exit_status_t;
</ENUM>
<ENUM>
<NAME>requiem_client_flags_t</NAME>
typedef enum {
        REQUIEM_CLIENT_FLAGS_ASYNC_SEND  = 0x01,
        REQUIEM_CLIENT_FLAGS_ASYNC_TIMER = 0x02,
        REQUIEM_CLIENT_FLAGS_HEARTBEAT   = 0x04,
        REQUIEM_CLIENT_FLAGS_CONNECT     = 0x08,
        REQUIEM_CLIENT_FLAGS_AUTOCONFIG  = 0x10
} requiem_client_flags_t;
</ENUM>
<TYPEDEF>
<NAME>requiem_client_t</NAME>
typedef struct requiem_client requiem_client_t;
</TYPEDEF>
<FUNCTION>
<NAME>requiem_client_get_unique_ident</NAME>
<RETURNS>requiem_ident_t *</RETURNS>
requiem_client_t *client
</FUNCTION>
<FUNCTION>
<NAME>requiem_client_set_connection_pool</NAME>
<RETURNS>void </RETURNS>
requiem_client_t *client, requiem_connection_pool_t *pool
</FUNCTION>
<FUNCTION>
<NAME>requiem_client_get_connection_pool</NAME>
<RETURNS>requiem_connection_pool_t *</RETURNS>
requiem_client_t *client
</FUNCTION>
<FUNCTION>
<NAME>requiem_client_start</NAME>
<RETURNS>int </RETURNS>
requiem_client_t *client
</FUNCTION>
<FUNCTION>
<NAME>requiem_client_init</NAME>
<RETURNS>int </RETURNS>
requiem_client_t *client
</FUNCTION>
<FUNCTION>
<NAME>requiem_client_new</NAME>
<RETURNS>int </RETURNS>
requiem_client_t **client, const char *profile
</FUNCTION>
<FUNCTION>
<NAME>requiem_client_ref</NAME>
<RETURNS>requiem_client_t *</RETURNS>
requiem_client_t *client
</FUNCTION>
<FUNCTION>
<NAME>requiem_client_get_analyzer</NAME>
<RETURNS>idmef_analyzer_t *</RETURNS>
requiem_client_t *client
</FUNCTION>
<FUNCTION>
<NAME>requiem_client_get_flags</NAME>
<RETURNS>requiem_client_flags_t </RETURNS>
requiem_client_t *client
</FUNCTION>
<FUNCTION>
<NAME>requiem_client_set_required_permission</NAME>
<RETURNS>void </RETURNS>
requiem_client_t *client, requiem_connection_permission_t permission
</FUNCTION>
<FUNCTION>
<NAME>requiem_client_get_required_permission</NAME>
<RETURNS>requiem_connection_permission_t </RETURNS>
requiem_client_t *client
</FUNCTION>
<FUNCTION>
<NAME>requiem_client_send_msg</NAME>
<RETURNS>void </RETURNS>
requiem_client_t *client, requiem_msg_t *msg
</FUNCTION>
<FUNCTION>
<NAME>requiem_client_recv_msg</NAME>
<RETURNS>int </RETURNS>
requiem_client_t *client, int timeout, requiem_msg_t **msg
</FUNCTION>
<FUNCTION>
<NAME>requiem_client_set_heartbeat_cb</NAME>
<RETURNS>void </RETURNS>
requiem_client_t *client, void (*cb)(requiem_client_t *client, idmef_message_t *hb)
</FUNCTION>
<FUNCTION>
<NAME>requiem_client_send_idmef</NAME>
<RETURNS>void </RETURNS>
requiem_client_t *client, idmef_message_t *msg
</FUNCTION>
<FUNCTION>
<NAME>requiem_client_recv_idmef</NAME>
<RETURNS>int </RETURNS>
requiem_client_t *client, int timeout, idmef_message_t **idmef
</FUNCTION>
<FUNCTION>
<NAME>requiem_client_destroy</NAME>
<RETURNS>void </RETURNS>
requiem_client_t *client, requiem_client_exit_status_t status
</FUNCTION>
<FUNCTION>
<NAME>requiem_client_set_flags</NAME>
<RETURNS>int </RETURNS>
requiem_client_t *client, requiem_client_flags_t flags
</FUNCTION>
<FUNCTION>
<NAME>requiem_client_set_config_filename</NAME>
<RETURNS>int </RETURNS>
requiem_client_t *client, const char *filename
</FUNCTION>
<FUNCTION>
<NAME>requiem_client_get_config_filename</NAME>
<RETURNS>const char *</RETURNS>
requiem_client_t *client
</FUNCTION>
<FUNCTION>
<NAME>requiem_client_get_profile</NAME>
<RETURNS>requiem_client_profile_t *</RETURNS>
requiem_client_t *client
</FUNCTION>
<FUNCTION>
<NAME>requiem_client_new_msgbuf</NAME>
<RETURNS>int </RETURNS>
requiem_client_t *client, requiem_msgbuf_t **msgbuf
</FUNCTION>
<FUNCTION>
<NAME>requiem_client_handle_msg_default</NAME>
<RETURNS>int </RETURNS>
requiem_client_t *client, requiem_msg_t *msg, requiem_msgbuf_t *msgbuf
</FUNCTION>
<FUNCTION>
<NAME>requiem_client_get_setup_error</NAME>
<DEPRECATED/>
<RETURNS>const char *</RETURNS>
requiem_client_t *client
</FUNCTION>
<FUNCTION>
<NAME>requiem_client_is_setup_needed</NAME>
<DEPRECATED/>
<RETURNS>requiem_bool_t </RETURNS>
int error
</FUNCTION>
<FUNCTION>
<NAME>requiem_client_print_setup_error</NAME>
<RETURNS>void </RETURNS>
requiem_client_t *client
</FUNCTION>
<FUNCTION>
<NAME>idmef_additional_data_print</NAME>
<RETURNS>void </RETURNS>
idmef_additional_data_t *ptr, requiem_io_t *fd
</FUNCTION>
<FUNCTION>
<NAME>idmef_reference_print</NAME>
<RETURNS>void </RETURNS>
idmef_reference_t *ptr, requiem_io_t *fd
</FUNCTION>
<FUNCTION>
<NAME>idmef_classification_print</NAME>
<RETURNS>void </RETURNS>
idmef_classification_t *ptr, requiem_io_t *fd
</FUNCTION>
<FUNCTION>
<NAME>idmef_user_id_print</NAME>
<RETURNS>void </RETURNS>
idmef_user_id_t *ptr, requiem_io_t *fd
</FUNCTION>
<FUNCTION>
<NAME>idmef_user_print</NAME>
<RETURNS>void </RETURNS>
idmef_user_t *ptr, requiem_io_t *fd
</FUNCTION>
<FUNCTION>
<NAME>idmef_address_print</NAME>
<RETURNS>void </RETURNS>
idmef_address_t *ptr, requiem_io_t *fd
</FUNCTION>
<FUNCTION>
<NAME>idmef_process_print</NAME>
<RETURNS>void </RETURNS>
idmef_process_t *ptr, requiem_io_t *fd
</FUNCTION>
<FUNCTION>
<NAME>idmef_web_service_print</NAME>
<RETURNS>void </RETURNS>
idmef_web_service_t *ptr, requiem_io_t *fd
</FUNCTION>
<FUNCTION>
<NAME>idmef_snmp_service_print</NAME>
<RETURNS>void </RETURNS>
idmef_snmp_service_t *ptr, requiem_io_t *fd
</FUNCTION>
<FUNCTION>
<NAME>idmef_service_print</NAME>
<RETURNS>void </RETURNS>
idmef_service_t *ptr, requiem_io_t *fd
</FUNCTION>
<FUNCTION>
<NAME>idmef_node_print</NAME>
<RETURNS>void </RETURNS>
idmef_node_t *ptr, requiem_io_t *fd
</FUNCTION>
<FUNCTION>
<NAME>idmef_source_print</NAME>
<RETURNS>void </RETURNS>
idmef_source_t *ptr, requiem_io_t *fd
</FUNCTION>
<FUNCTION>
<NAME>idmef_file_access_print</NAME>
<RETURNS>void </RETURNS>
idmef_file_access_t *ptr, requiem_io_t *fd
</FUNCTION>
<FUNCTION>
<NAME>idmef_inode_print</NAME>
<RETURNS>void </RETURNS>
idmef_inode_t *ptr, requiem_io_t *fd
</FUNCTION>
<FUNCTION>
<NAME>idmef_checksum_print</NAME>
<RETURNS>void </RETURNS>
idmef_checksum_t *ptr, requiem_io_t *fd
</FUNCTION>
<FUNCTION>
<NAME>idmef_file_print</NAME>
<RETURNS>void </RETURNS>
idmef_file_t *ptr, requiem_io_t *fd
</FUNCTION>
<FUNCTION>
<NAME>idmef_linkage_print</NAME>
<RETURNS>void </RETURNS>
idmef_linkage_t *ptr, requiem_io_t *fd
</FUNCTION>
<FUNCTION>
<NAME>idmef_target_print</NAME>
<RETURNS>void </RETURNS>
idmef_target_t *ptr, requiem_io_t *fd
</FUNCTION>
<FUNCTION>
<NAME>idmef_analyzer_print</NAME>
<RETURNS>void </RETURNS>
idmef_analyzer_t *ptr, requiem_io_t *fd
</FUNCTION>
<FUNCTION>
<NAME>idmef_alertident_print</NAME>
<RETURNS>void </RETURNS>
idmef_alertident_t *ptr, requiem_io_t *fd
</FUNCTION>
<FUNCTION>
<NAME>idmef_impact_print</NAME>
<RETURNS>void </RETURNS>
idmef_impact_t *ptr, requiem_io_t *fd
</FUNCTION>
<FUNCTION>
<NAME>idmef_action_print</NAME>
<RETURNS>void </RETURNS>
idmef_action_t *ptr, requiem_io_t *fd
</FUNCTION>
<FUNCTION>
<NAME>idmef_confidence_print</NAME>
<RETURNS>void </RETURNS>
idmef_confidence_t *ptr, requiem_io_t *fd
</FUNCTION>
<FUNCTION>
<NAME>idmef_assessment_print</NAME>
<RETURNS>void </RETURNS>
idmef_assessment_t *ptr, requiem_io_t *fd
</FUNCTION>
<FUNCTION>
<NAME>idmef_tool_alert_print</NAME>
<RETURNS>void </RETURNS>
idmef_tool_alert_t *ptr, requiem_io_t *fd
</FUNCTION>
<FUNCTION>
<NAME>idmef_correlation_alert_print</NAME>
<RETURNS>void </RETURNS>
idmef_correlation_alert_t *ptr, requiem_io_t *fd
</FUNCTION>
<FUNCTION>
<NAME>idmef_overflow_alert_print</NAME>
<RETURNS>void </RETURNS>
idmef_overflow_alert_t *ptr, requiem_io_t *fd
</FUNCTION>
<FUNCTION>
<NAME>idmef_alert_print</NAME>
<RETURNS>void </RETURNS>
idmef_alert_t *ptr, requiem_io_t *fd
</FUNCTION>
<FUNCTION>
<NAME>idmef_heartbeat_print</NAME>
<RETURNS>void </RETURNS>
idmef_heartbeat_t *ptr, requiem_io_t *fd
</FUNCTION>
<FUNCTION>
<NAME>idmef_message_print</NAME>
<RETURNS>void </RETURNS>
idmef_message_t *ptr, requiem_io_t *fd
</FUNCTION>
<ENUM>
<NAME>requiem_connection_permission_t</NAME>
typedef enum {
        REQUIEM_CONNECTION_PERMISSION_IDMEF_READ      = 0x01, /* client might read received IDMEF message */
        REQUIEM_CONNECTION_PERMISSION_ADMIN_READ      = 0x02, /* client might read received ADMIN message */
        REQUIEM_CONNECTION_PERMISSION_IDMEF_WRITE     = 0x04, /* client might send IDMEF message          */
        REQUIEM_CONNECTION_PERMISSION_ADMIN_WRITE     = 0x08  /* client might issue OPTION request        */
} requiem_connection_permission_t;
</ENUM>
<ENUM>
<NAME>requiem_connection_state_t</NAME>
typedef enum {
        REQUIEM_CONNECTION_STATE_ESTABLISHED     = 0x01
} requiem_connection_state_t;
</ENUM>
<TYPEDEF>
<NAME>requiem_connection_t</NAME>
typedef struct requiem_connection requiem_connection_t;
</TYPEDEF>
<FUNCTION>
<NAME>requiem_connection_destroy</NAME>
<RETURNS>void </RETURNS>
requiem_connection_t *conn
</FUNCTION>
<FUNCTION>
<NAME>requiem_connection_ref</NAME>
<RETURNS>requiem_connection_t *</RETURNS>
requiem_connection_t *conn
</FUNCTION>
<FUNCTION>
<NAME>requiem_connection_send</NAME>
<RETURNS>int </RETURNS>
requiem_connection_t *cnx, requiem_msg_t *msg
</FUNCTION>
<FUNCTION>
<NAME>requiem_connection_recv</NAME>
<RETURNS>int </RETURNS>
requiem_connection_t *cnx, requiem_msg_t **outmsg
</FUNCTION>
<FUNCTION>
<NAME>requiem_connection_recv_idmef</NAME>
<RETURNS>int </RETURNS>
requiem_connection_t *con, idmef_message_t **idmef
</FUNCTION>
<FUNCTION>
<NAME>requiem_connection_connect</NAME>
<RETURNS>int </RETURNS>
requiem_connection_t *cnx,requiem_client_profile_t *profile,requiem_connection_permission_t permission
</FUNCTION>
<FUNCTION>
<NAME>requiem_connection_forward</NAME>
<RETURNS>ssize_t </RETURNS>
requiem_connection_t *cnx, requiem_io_t *src, size_t count
</FUNCTION>
<FUNCTION>
<NAME>requiem_connection_get_local_addr</NAME>
<RETURNS>const char *</RETURNS>
requiem_connection_t *cnx
</FUNCTION>
<FUNCTION>
<NAME>requiem_connection_get_local_port</NAME>
<RETURNS>unsigned int </RETURNS>
requiem_connection_t *cnx
</FUNCTION>
<FUNCTION>
<NAME>requiem_connection_get_peer_addr</NAME>
<RETURNS>const char *</RETURNS>
requiem_connection_t *cnx
</FUNCTION>
<FUNCTION>
<NAME>requiem_connection_get_peer_port</NAME>
<RETURNS>unsigned int </RETURNS>
requiem_connection_t *cnx
</FUNCTION>
<FUNCTION>
<NAME>requiem_connection_is_alive</NAME>
<RETURNS>requiem_bool_t </RETURNS>
requiem_connection_t *cnx
</FUNCTION>
<FUNCTION>
<NAME>requiem_connection_get_fd</NAME>
<RETURNS>requiem_io_t *</RETURNS>
requiem_connection_t *cnx
</FUNCTION>
<FUNCTION>
<NAME>requiem_connection_close</NAME>
<RETURNS>int </RETURNS>
requiem_connection_t *cnx
</FUNCTION>
<FUNCTION>
<NAME>requiem_connection_set_fd_ref</NAME>
<RETURNS>void </RETURNS>
requiem_connection_t *cnx, requiem_io_t *fd
</FUNCTION>
<FUNCTION>
<NAME>requiem_connection_set_fd_nodup</NAME>
<RETURNS>void </RETURNS>
requiem_connection_t *cnx, requiem_io_t *fd
</FUNCTION>
<FUNCTION>
<NAME>requiem_connection_set_state</NAME>
<RETURNS>void </RETURNS>
requiem_connection_t *cnx, requiem_connection_state_t state
</FUNCTION>
<FUNCTION>
<NAME>requiem_connection_get_state</NAME>
<RETURNS>requiem_connection_state_t </RETURNS>
requiem_connection_t *cnx
</FUNCTION>
<FUNCTION>
<NAME>requiem_connection_set_data</NAME>
<RETURNS>void </RETURNS>
requiem_connection_t *cnx, void *data
</FUNCTION>
<FUNCTION>
<NAME>requiem_connection_get_data</NAME>
<RETURNS>void *</RETURNS>
requiem_connection_t *cnx
</FUNCTION>
<FUNCTION>
<NAME>requiem_connection_get_default_socket_filename</NAME>
<RETURNS>const char *</RETURNS>
void
</FUNCTION>
<FUNCTION>
<NAME>requiem_connection_get_permission</NAME>
<RETURNS>requiem_connection_permission_t </RETURNS>
requiem_connection_t *conn
</FUNCTION>
<FUNCTION>
<NAME>requiem_connection_get_peer_analyzerid</NAME>
<RETURNS>uint64_t </RETURNS>
requiem_connection_t *cnx
</FUNCTION>
<FUNCTION>
<NAME>requiem_connection_set_peer_analyzerid</NAME>
<RETURNS>void </RETURNS>
requiem_connection_t *cnx, uint64_t analyzerid
</FUNCTION>
<FUNCTION>
<NAME>requiem_connection_new</NAME>
<RETURNS>int </RETURNS>
requiem_connection_t **ret, const char *addr
</FUNCTION>
<FUNCTION>
<NAME>requiem_connection_new_msgbuf</NAME>
<RETURNS>int </RETURNS>
requiem_connection_t *connection, requiem_msgbuf_t **msgbuf
</FUNCTION>
<FUNCTION>
<NAME>requiem_connection_permission_to_string</NAME>
<RETURNS>int </RETURNS>
requiem_connection_permission_t perm, requiem_string_t *out
</FUNCTION>
<FUNCTION>
<NAME>requiem_connection_permission_new_from_string</NAME>
<RETURNS>int </RETURNS>
requiem_connection_permission_t *out, const char *buf
</FUNCTION>
<FUNCTION>
<NAME>requiem_connection_ref</NAME>
<RETURNS>requiem_connection_t *</RETURNS>
requiem_connection_t *conn
</FUNCTION>
<TYPEDEF>
<NAME>idmef_criterion_value_t</NAME>
typedef struct idmef_criterion_value idmef_criterion_value_t;
</TYPEDEF>
<ENUM>
<NAME>idmef_criterion_value_type_t</NAME>
typedef enum {
        IDMEF_CRITERION_VALUE_TYPE_ERROR            = -1,
        IDMEF_CRITERION_VALUE_TYPE_VALUE            =  0,
        IDMEF_CRITERION_VALUE_TYPE_REGEX            =  1,
        IDMEF_CRITERION_VALUE_TYPE_BROKEN_DOWN_TIME =  2
} idmef_criterion_value_type_t;
</ENUM>
<FUNCTION>
<NAME>idmef_criterion_value_new</NAME>
<RETURNS>int </RETURNS>
idmef_criterion_value_t **cv
</FUNCTION>
<FUNCTION>
<NAME>idmef_criterion_value_new_regex</NAME>
<RETURNS>int </RETURNS>
idmef_criterion_value_t **cv, const char *regex, idmef_criterion_operator_t op
</FUNCTION>
<FUNCTION>
<NAME>idmef_criterion_value_new_value</NAME>
<RETURNS>int </RETURNS>
idmef_criterion_value_t **cv, idmef_value_t *value,idmef_criterion_operator_t op
</FUNCTION>
<FUNCTION>
<NAME>idmef_criterion_value_new_from_string</NAME>
<RETURNS>int </RETURNS>
idmef_criterion_value_t **cv, idmef_path_t *path,const char *value, idmef_criterion_operator_t op
</FUNCTION>
<FUNCTION>
<NAME>idmef_criterion_value_new_broken_down_time</NAME>
<RETURNS>int </RETURNS>
idmef_criterion_value_t **cv, const char *time, idmef_criterion_operator_t op
</FUNCTION>
<FUNCTION>
<NAME>idmef_criterion_value_clone</NAME>
<RETURNS>int </RETURNS>
const idmef_criterion_value_t *src, idmef_criterion_value_t **dst
</FUNCTION>
<FUNCTION>
<NAME>idmef_criterion_value_destroy</NAME>
<RETURNS>void </RETURNS>
idmef_criterion_value_t *value
</FUNCTION>
<FUNCTION>
<NAME>idmef_criterion_value_print</NAME>
<RETURNS>int </RETURNS>
idmef_criterion_value_t *value, requiem_io_t *fd
</FUNCTION>
<FUNCTION>
<NAME>idmef_criterion_value_to_string</NAME>
<RETURNS>int </RETURNS>
idmef_criterion_value_t *value, requiem_string_t *out
</FUNCTION>
<FUNCTION>
<NAME>idmef_criterion_value_match</NAME>
<RETURNS>int </RETURNS>
idmef_criterion_value_t *cv, idmef_value_t *value, idmef_criterion_operator_t op
</FUNCTION>
<FUNCTION>
<NAME>idmef_criterion_value_get_value</NAME>
<RETURNS>const idmef_value_t *</RETURNS>
idmef_criterion_value_t *cv
</FUNCTION>
<FUNCTION>
<NAME>idmef_criterion_value_get_regex</NAME>
<RETURNS>const char *</RETURNS>
idmef_criterion_value_t *cv
</FUNCTION>
<FUNCTION>
<NAME>idmef_criterion_value_get_broken_down_time</NAME>
<RETURNS>const struct tm *</RETURNS>
idmef_criterion_value_t *cv
</FUNCTION>
<FUNCTION>
<NAME>idmef_criterion_value_get_type</NAME>
<RETURNS>idmef_criterion_value_type_t </RETURNS>
idmef_criterion_value_t *cv
</FUNCTION>
<TYPEDEF>
<NAME>requiem_io_t</NAME>
typedef struct requiem_io requiem_io_t;
</TYPEDEF>
<FUNCTION>
<NAME>requiem_io_new</NAME>
<RETURNS>int </RETURNS>
requiem_io_t **ret
</FUNCTION>
<FUNCTION>
<NAME>requiem_io_destroy</NAME>
<RETURNS>void </RETURNS>
requiem_io_t *pio
</FUNCTION>
<FUNCTION>
<NAME>requiem_io_set_file_io</NAME>
<RETURNS>void </RETURNS>
requiem_io_t *pio, FILE *fd
</FUNCTION>
<FUNCTION>
<NAME>requiem_io_set_tls_io</NAME>
<RETURNS>void </RETURNS>
requiem_io_t *pio, void *tls
</FUNCTION>
<FUNCTION>
<NAME>requiem_io_set_sys_io</NAME>
<RETURNS>void </RETURNS>
requiem_io_t *pio, int fd
</FUNCTION>
<FUNCTION>
<NAME>requiem_io_set_buffer_io</NAME>
<RETURNS>int </RETURNS>
requiem_io_t *pio
</FUNCTION>
<FUNCTION>
<NAME>requiem_io_set_fdptr</NAME>
<RETURNS>void </RETURNS>
requiem_io_t *pio, void *ptr
</FUNCTION>
<FUNCTION>
<NAME>requiem_io_set_write_callback</NAME>
<RETURNS>void </RETURNS>
requiem_io_t *pio, ssize_t (*write)(requiem_io_t *io, const void *buf, size_t count)
</FUNCTION>
<FUNCTION>
<NAME>requiem_io_set_read_callback</NAME>
<RETURNS>void </RETURNS>
requiem_io_t *pio, ssize_t (*read)(requiem_io_t *io, void *buf, size_t count)
</FUNCTION>
<FUNCTION>
<NAME>requiem_io_set_pending_callback</NAME>
<RETURNS>void </RETURNS>
requiem_io_t *pio, ssize_t (*pending)(requiem_io_t *io)
</FUNCTION>
<FUNCTION>
<NAME>requiem_io_close</NAME>
<RETURNS>int </RETURNS>
requiem_io_t *pio
</FUNCTION>
<FUNCTION>
<NAME>requiem_io_read</NAME>
<RETURNS>ssize_t </RETURNS>
requiem_io_t *pio, void *buf, size_t count
</FUNCTION>
<FUNCTION>
<NAME>requiem_io_read_wait</NAME>
<RETURNS>ssize_t </RETURNS>
requiem_io_t *pio, void *buf, size_t count
</FUNCTION>
<FUNCTION>
<NAME>requiem_io_read_delimited</NAME>
<RETURNS>ssize_t </RETURNS>
requiem_io_t *pio, unsigned char **buf
</FUNCTION>
<FUNCTION>
<NAME>requiem_io_write</NAME>
<RETURNS>ssize_t </RETURNS>
requiem_io_t *pio, const void *buf, size_t count
</FUNCTION>
<FUNCTION>
<NAME>requiem_io_write_delimited</NAME>
<RETURNS>ssize_t </RETURNS>
requiem_io_t *pio, const void *buf, uint16_t count
</FUNCTION>
<FUNCTION>
<NAME>requiem_io_forward</NAME>
<RETURNS>ssize_t </RETURNS>
requiem_io_t *dst, requiem_io_t *src, size_t count
</FUNCTION>
<FUNCTION>
<NAME>requiem_io_get_fd</NAME>
<RETURNS>int </RETURNS>
requiem_io_t *pio
</FUNCTION>
<FUNCTION>
<NAME>requiem_io_get_fdptr</NAME>
<RETURNS>void *</RETURNS>
requiem_io_t *pio
</FUNCTION>
<FUNCTION>
<NAME>requiem_io_pending</NAME>
<RETURNS>ssize_t </RETURNS>
requiem_io_t *pio
</FUNCTION>
<FUNCTION>
<NAME>requiem_io_is_error_fatal</NAME>
<RETURNS>requiem_bool_t </RETURNS>
requiem_io_t *pio, int error
</FUNCTION>
<FUNCTION>
<NAME>requiem_thread_init</NAME>
<RETURNS>int </RETURNS>
void *nil
</FUNCTION>
<FUNCTION>
<NAME>idmef_message_set_value</NAME>
<RETURNS>int </RETURNS>
idmef_message_t *message, const char *path, idmef_value_t *value
</FUNCTION>
<FUNCTION>
<NAME>idmef_message_get_value</NAME>
<RETURNS>int </RETURNS>
idmef_message_t *message, const char *path, idmef_value_t **value
</FUNCTION>
<FUNCTION>
<NAME>idmef_message_set_string</NAME>
<RETURNS>int </RETURNS>
idmef_message_t *message, const char *path, const char *value
</FUNCTION>
<FUNCTION>
<NAME>idmef_message_get_string</NAME>
<RETURNS>int </RETURNS>
idmef_message_t *message, const char *path, char **result
</FUNCTION>
<FUNCTION>
<NAME>idmef_message_set_number</NAME>
<RETURNS>int </RETURNS>
idmef_message_t *message, const char *path, double number
</FUNCTION>
<FUNCTION>
<NAME>idmef_message_get_number</NAME>
<RETURNS>int </RETURNS>
idmef_message_t *message, const char *path, double *result
</FUNCTION>
<FUNCTION>
<NAME>idmef_message_set_data</NAME>
<RETURNS>int </RETURNS>
idmef_message_t *message, const char *path, const unsigned char *data, size_t size
</FUNCTION>
<FUNCTION>
<NAME>idmef_message_get_data</NAME>
<RETURNS>int </RETURNS>
idmef_message_t *message, const char *path, unsigned char **data, size_t *size
</FUNCTION>
<TYPEDEF>
<NAME>requiem_string_t</NAME>
typedef struct requiem_string requiem_string_t;
</TYPEDEF>
<FUNCTION>
<NAME>requiem_string_new</NAME>
<RETURNS>int </RETURNS>
requiem_string_t **string
</FUNCTION>
<FUNCTION>
<NAME>requiem_string_new_nodup</NAME>
<RETURNS>int </RETURNS>
requiem_string_t **string, char *str
</FUNCTION>
<FUNCTION>
<NAME>requiem_string_new_ref</NAME>
<RETURNS>int </RETURNS>
requiem_string_t **string, const char *str
</FUNCTION>
<FUNCTION>
<NAME>requiem_string_new_dup</NAME>
<RETURNS>int </RETURNS>
requiem_string_t **string, const char *str
</FUNCTION>
<FUNCTION>
<NAME>requiem_string_new_dup_fast</NAME>
<RETURNS>int </RETURNS>
requiem_string_t **string, const char *str, size_t len
</FUNCTION>
<FUNCTION>
<NAME>requiem_string_destroy</NAME>
<RETURNS>void </RETURNS>
requiem_string_t *string
</FUNCTION>
<FUNCTION>
<NAME>requiem_string_destroy_internal</NAME>
<RETURNS>void </RETURNS>
requiem_string_t *string
</FUNCTION>
<FUNCTION>
<NAME>requiem_string_new_nodup_fast</NAME>
<RETURNS>int </RETURNS>
requiem_string_t **string, char *str, size_t len
</FUNCTION>
<FUNCTION>
<NAME>requiem_string_new_ref_fast</NAME>
<RETURNS>int </RETURNS>
requiem_string_t **string, const char *str, size_t len
</FUNCTION>
<FUNCTION>
<NAME>requiem_string_set_dup_fast</NAME>
<RETURNS>int </RETURNS>
requiem_string_t *string, const char *buf, size_t len
</FUNCTION>
<FUNCTION>
<NAME>requiem_string_set_dup</NAME>
<RETURNS>int </RETURNS>
requiem_string_t *string, const char *buf
</FUNCTION>
<FUNCTION>
<NAME>requiem_string_set_nodup_fast</NAME>
<RETURNS>int </RETURNS>
requiem_string_t *string, char *buf, size_t len
</FUNCTION>
<FUNCTION>
<NAME>requiem_string_set_nodup</NAME>
<RETURNS>int </RETURNS>
requiem_string_t *string, char *buf
</FUNCTION>
<FUNCTION>
<NAME>requiem_string_set_ref_fast</NAME>
<RETURNS>int </RETURNS>
requiem_string_t *string, const char *buf, size_t len
</FUNCTION>
<FUNCTION>
<NAME>requiem_string_set_ref</NAME>
<RETURNS>int </RETURNS>
requiem_string_t *string, const char *buf
</FUNCTION>
<FUNCTION>
<NAME>requiem_string_copy_ref</NAME>
<RETURNS>int </RETURNS>
const requiem_string_t *src, requiem_string_t *dst
</FUNCTION>
<FUNCTION>
<NAME>requiem_string_copy_dup</NAME>
<RETURNS>int </RETURNS>
const requiem_string_t *src, requiem_string_t *dst
</FUNCTION>
<FUNCTION>
<NAME>requiem_string_ref</NAME>
<RETURNS>requiem_string_t *</RETURNS>
requiem_string_t *string
</FUNCTION>
<FUNCTION>
<NAME>requiem_string_clone</NAME>
<RETURNS>int </RETURNS>
const requiem_string_t *src, requiem_string_t **dst
</FUNCTION>
<FUNCTION>
<NAME>requiem_string_get_len</NAME>
<RETURNS>size_t </RETURNS>
const requiem_string_t *string
</FUNCTION>
<FUNCTION>
<NAME>requiem_string_get_string_or_default</NAME>
<RETURNS>const char *</RETURNS>
const requiem_string_t *string, const char *def
</FUNCTION>
<FUNCTION>
<NAME>requiem_string_get_string</NAME>
<RETURNS>const char *</RETURNS>
const requiem_string_t *string
</FUNCTION>
<FUNCTION>
<NAME>requiem_string_get_string_released</NAME>
<RETURNS>int </RETURNS>
requiem_string_t *string, char **outptr
</FUNCTION>
<FUNCTION>
<NAME>requiem_string_is_empty</NAME>
<RETURNS>requiem_bool_t </RETURNS>
const requiem_string_t *string
</FUNCTION>
<FUNCTION>
<NAME>requiem_string_clear</NAME>
<RETURNS>void </RETURNS>
requiem_string_t *string
</FUNCTION>
<FUNCTION>
<NAME>requiem_string_cat</NAME>
<RETURNS>int </RETURNS>
requiem_string_t *dst, const char *str
</FUNCTION>
<FUNCTION>
<NAME>requiem_string_ncat</NAME>
<RETURNS>int </RETURNS>
requiem_string_t *dst, const char *str, size_t len
</FUNCTION>
<FUNCTION>
<NAME>requiem_string_sprintf</NAME>
<RETURNS>int </RETURNS>
requiem_string_t *string, const char *fmt, ...
</FUNCTION>
<FUNCTION>
<NAME>requiem_string_vprintf</NAME>
<RETURNS>int </RETURNS>
requiem_string_t *string, const char *fmt, va_list ap
</FUNCTION>
<FUNCTION>
<NAME>requiem_string_compare</NAME>
<RETURNS>int </RETURNS>
const requiem_string_t *str1, const requiem_string_t *str2
</FUNCTION>
<MACRO>
<NAME>requiem_string_set_constant</NAME>
#define requiem_string_set_constant(string, str)                         \
        requiem_string_set_ref_fast((string), (str), strlen((str)))
</MACRO>
<MACRO>
<NAME>requiem_string_new_constant</NAME>
#define requiem_string_new_constant(string, str)                         \
        requiem_string_new_ref_fast((string), (str), strlen((str)))
</MACRO>
<TYPEDEF>
<NAME>requiem_uid_t</NAME>
typedef uid_t requiem_uid_t;
</TYPEDEF>
<TYPEDEF>
<NAME>requiem_uid_t</NAME>
typedef int requiem_uid_t;
</TYPEDEF>
<TYPEDEF>
<NAME>requiem_gid_t</NAME>
typedef gid_t requiem_gid_t;
</TYPEDEF>
<TYPEDEF>
<NAME>requiem_gid_t</NAME>
typedef int requiem_gid_t;
</TYPEDEF>
<TYPEDEF>
<NAME>requiem_client_profile_t</NAME>
typedef struct requiem_client_profile requiem_client_profile_t;
</TYPEDEF>
<FUNCTION>
<NAME>requiem_client_profile_new</NAME>
<RETURNS>int </RETURNS>
requiem_client_profile_t **ret, const char *name
</FUNCTION>
<FUNCTION>
<NAME>requiem_client_profile_ref</NAME>
<RETURNS>requiem_client_profile_t *</RETURNS>
requiem_client_profile_t *cp
</FUNCTION>
<FUNCTION>
<NAME>requiem_client_profile_destroy</NAME>
<RETURNS>void </RETURNS>
requiem_client_profile_t *cp
</FUNCTION>
<FUNCTION>
<NAME>requiem_client_profile_get_config_filename</NAME>
<RETURNS>void </RETURNS>
const requiem_client_profile_t *cp, char *buf, size_t size
</FUNCTION>
<FUNCTION>
<NAME>requiem_client_profile_get_default_config_dirname</NAME>
<RETURNS>void </RETURNS>
const requiem_client_profile_t *cp, char *buf, size_t size
</FUNCTION>
<FUNCTION>
<NAME>requiem_client_profile_get_analyzerid_filename</NAME>
<RETURNS>void </RETURNS>
const requiem_client_profile_t *cp, char *buf, size_t size
</FUNCTION>
<FUNCTION>
<NAME>requiem_client_profile_get_tls_key_filename</NAME>
<RETURNS>void </RETURNS>
const requiem_client_profile_t *cp, char *buf, size_t size
</FUNCTION>
<FUNCTION>
<NAME>requiem_client_profile_get_tls_server_ca_cert_filename</NAME>
<RETURNS>void </RETURNS>
const requiem_client_profile_t *cp, char *buf, size_t size
</FUNCTION>
<FUNCTION>
<NAME>requiem_client_profile_get_tls_server_keycert_filename</NAME>
<RETURNS>void </RETURNS>
const requiem_client_profile_t *cp, char *buf, size_t size
</FUNCTION>
<FUNCTION>
<NAME>requiem_client_profile_get_tls_server_crl_filename</NAME>
<RETURNS>void </RETURNS>
const requiem_client_profile_t *cp, char *buf, size_t size
</FUNCTION>
<FUNCTION>
<NAME>requiem_client_profile_get_tls_client_keycert_filename</NAME>
<RETURNS>void </RETURNS>
const requiem_client_profile_t *cp, char *buf, size_t size
</FUNCTION>
<FUNCTION>
<NAME>requiem_client_profile_get_tls_client_trusted_cert_filename</NAME>
<RETURNS>void </RETURNS>
const requiem_client_profile_t *cp, char *buf, size_t size
</FUNCTION>
<FUNCTION>
<NAME>requiem_client_profile_get_backup_dirname</NAME>
<RETURNS>void </RETURNS>
const requiem_client_profile_t *cp, char *buf, size_t size
</FUNCTION>
<FUNCTION>
<NAME>requiem_client_profile_get_profile_dirname</NAME>
<RETURNS>void </RETURNS>
const requiem_client_profile_t *cp, char *buf, size_t size
</FUNCTION>
<FUNCTION>
<NAME>requiem_client_profile_set_uid</NAME>
<RETURNS>void </RETURNS>
requiem_client_profile_t *cp, requiem_uid_t uid
</FUNCTION>
<FUNCTION>
<NAME>requiem_client_profile_get_uid</NAME>
<RETURNS>requiem_uid_t </RETURNS>
const requiem_client_profile_t *cp
</FUNCTION>
<FUNCTION>
<NAME>requiem_client_profile_set_gid</NAME>
<RETURNS>void </RETURNS>
requiem_client_profile_t *cp, requiem_uid_t gid
</FUNCTION>
<FUNCTION>
<NAME>requiem_client_profile_get_gid</NAME>
<RETURNS>requiem_gid_t </RETURNS>
const requiem_client_profile_t *cp
</FUNCTION>
<FUNCTION>
<NAME>requiem_client_profile_set_name</NAME>
<RETURNS>int </RETURNS>
requiem_client_profile_t *cp, const char *name
</FUNCTION>
<FUNCTION>
<NAME>requiem_client_profile_get_name</NAME>
<RETURNS>const char *</RETURNS>
const requiem_client_profile_t *cp
</FUNCTION>
<FUNCTION>
<NAME>requiem_client_profile_get_analyzerid</NAME>
<RETURNS>uint64_t </RETURNS>
const requiem_client_profile_t *cp
</FUNCTION>
<FUNCTION>
<NAME>requiem_client_profile_set_analyzerid</NAME>
<RETURNS>void </RETURNS>
requiem_client_profile_t *cp, uint64_t analyzerid
</FUNCTION>
<FUNCTION>
<NAME>requiem_client_profile_get_credentials</NAME>
<RETURNS>int </RETURNS>
requiem_client_profile_t *cp, void **credentials
</FUNCTION>
<FUNCTION>
<NAME>requiem_client_profile_set_prefix</NAME>
<RETURNS>int </RETURNS>
requiem_client_profile_t *cp, const char *prefix
</FUNCTION>
<FUNCTION>
<NAME>requiem_client_profile_get_prefix</NAME>
<RETURNS>void </RETURNS>
const requiem_client_profile_t *cp, char *buf, size_t size
</FUNCTION>
<ENUM>
<NAME>requiem_option_type_t</NAME>
typedef enum {
        REQUIEM_OPTION_TYPE_CLI  = 0x01,
        REQUIEM_OPTION_TYPE_CFG  = 0x02,
        REQUIEM_OPTION_TYPE_WIDE = 0x04,
        REQUIEM_OPTION_TYPE_CONTEXT = 0x08,
        REQUIEM_OPTION_TYPE_ROOT    = 0x10,
        REQUIEM_OPTION_TYPE_DESTROY = 0x20
} requiem_option_type_t;
</ENUM>
<ENUM>
<NAME>requiem_option_input_type_t</NAME>
typedef enum {
        REQUIEM_OPTION_INPUT_TYPE_STRING   = 1,
        REQUIEM_OPTION_INPUT_TYPE_INTEGER  = 2,
        REQUIEM_OPTION_INPUT_TYPE_BOOLEAN  = 3
} requiem_option_input_type_t;
</ENUM>
<TYPEDEF>
<NAME>requiem_option_t</NAME>
typedef struct requiem_option requiem_option_t;
</TYPEDEF>
<TYPEDEF>
<NAME>requiem_option_context_t</NAME>
typedef struct requiem_option_context requiem_option_context_t;
</TYPEDEF>
<USER_FUNCTION>
<NAME>requiem_option_destroy_callback_t</NAME>
<RETURNS>int </RETURNS>
requiem_option_t *opt, requiem_string_t *out, void *context
</USER_FUNCTION>
<USER_FUNCTION>
<NAME>requiem_option_commit_callback_t</NAME>
<RETURNS>int </RETURNS>
requiem_option_t *opt, requiem_string_t *out, void *context
</USER_FUNCTION>
<USER_FUNCTION>
<NAME>requiem_option_get_callback_t</NAME>
<RETURNS>int </RETURNS>
requiem_option_t *opt, requiem_string_t *out, void *context
</USER_FUNCTION>
<USER_FUNCTION>
<NAME>requiem_option_set_callback_t</NAME>
<RETURNS>int </RETURNS>
requiem_option_t *opt, const char *optarg, requiem_string_t *err, void *context
</USER_FUNCTION>
<ENUM>
<NAME>requiem_option_argument_t</NAME>
typedef enum {
        REQUIEM_OPTION_ARGUMENT_REQUIRED = 1,
        REQUIEM_OPTION_ARGUMENT_OPTIONAL = 2,
        REQUIEM_OPTION_ARGUMENT_NONE     = 3
} requiem_option_argument_t;
</ENUM>
<ENUM>
<NAME>requiem_option_priority_t</NAME>
typedef enum {
        REQUIEM_OPTION_PRIORITY_IMMEDIATE = -2,
        REQUIEM_OPTION_PRIORITY_FIRST     = -1,
        REQUIEM_OPTION_PRIORITY_NONE      =  0,
        REQUIEM_OPTION_PRIORITY_LAST      =  2
} requiem_option_priority_t;
</ENUM>
<ENUM>
<NAME>requiem_option_warning_t</NAME>
typedef enum {
        REQUIEM_OPTION_WARNING_OPTION    = 0x1,
        REQUIEM_OPTION_WARNING_ARG       = 0x2
} requiem_option_warning_t;
</ENUM>
<FUNCTION>
<NAME>requiem_option_set_priority</NAME>
<RETURNS>void </RETURNS>
requiem_option_t *option, requiem_option_priority_t priority
</FUNCTION>
<FUNCTION>
<NAME>requiem_option_print</NAME>
<RETURNS>void </RETURNS>
requiem_option_t *opt, requiem_option_type_t type, int descoff, FILE *fd
</FUNCTION>
<FUNCTION>
<NAME>requiem_option_wide_send_msg</NAME>
<RETURNS>int </RETURNS>
requiem_msgbuf_t *msgbuf, void *context
</FUNCTION>
<FUNCTION>
<NAME>requiem_option_destroy</NAME>
<RETURNS>void </RETURNS>
requiem_option_t *option
</FUNCTION>
<FUNCTION>
<NAME>requiem_option_read</NAME>
<RETURNS>int </RETURNS>
requiem_option_t *option, const char **filename,int *argc, char **argv, requiem_string_t **err, void *context
</FUNCTION>
<FUNCTION>
<NAME>requiem_option_add</NAME>
<RETURNS>int </RETURNS>
requiem_option_t *parent, requiem_option_t **retopt, requiem_option_type_t type,char shortopt, const char *longopt, const char *desc, requiem_option_argument_t has_arg,int (*set)(requiem_option_t *opt, const char *optarg, requiem_string_t *err, void *context),int (*get)(requiem_option_t *opt, requiem_string_t *out, void *context)
</FUNCTION>
<FUNCTION>
<NAME>requiem_option_set_type</NAME>
<RETURNS>void </RETURNS>
requiem_option_t *opt, requiem_option_type_t type
</FUNCTION>
<FUNCTION>
<NAME>requiem_option_get_type</NAME>
<RETURNS>requiem_option_type_t </RETURNS>
requiem_option_t *opt
</FUNCTION>
<FUNCTION>
<NAME>requiem_option_set_warnings</NAME>
<RETURNS>void </RETURNS>
requiem_option_warning_t new_warnings, requiem_option_warning_t *old_warnings
</FUNCTION>
<FUNCTION>
<NAME>requiem_option_get_shortname</NAME>
<RETURNS>char </RETURNS>
requiem_option_t *opt
</FUNCTION>
<FUNCTION>
<NAME>requiem_option_get_longname</NAME>
<RETURNS>const char *</RETURNS>
requiem_option_t *opt
</FUNCTION>
<FUNCTION>
<NAME>requiem_option_set_data</NAME>
<RETURNS>void </RETURNS>
requiem_option_t *opt, void *data
</FUNCTION>
<FUNCTION>
<NAME>requiem_option_get_data</NAME>
<RETURNS>void *</RETURNS>
requiem_option_t *opt
</FUNCTION>
<FUNCTION>
<NAME>requiem_option_invoke_commit</NAME>
<RETURNS>int </RETURNS>
requiem_option_t *opt, const char *ctname, requiem_string_t *value, void *context
</FUNCTION>
<FUNCTION>
<NAME>requiem_option_invoke_set</NAME>
<RETURNS>int </RETURNS>
requiem_option_t *opt, const char *ctname, requiem_string_t *value, void **context
</FUNCTION>
<FUNCTION>
<NAME>requiem_option_invoke_get</NAME>
<RETURNS>int </RETURNS>
requiem_option_t *opt, const char *ctname, requiem_string_t *value, void *context
</FUNCTION>
<FUNCTION>
<NAME>requiem_option_invoke_destroy</NAME>
<RETURNS>int </RETURNS>
requiem_option_t *opt, const char *ctname, requiem_string_t *value, void *context
</FUNCTION>
<FUNCTION>
<NAME>requiem_option_new_root</NAME>
<RETURNS>int </RETURNS>
requiem_option_t **retopt
</FUNCTION>
<FUNCTION>
<NAME>requiem_option_new</NAME>
<RETURNS>int </RETURNS>
requiem_option_t *parent, requiem_option_t **retopt
</FUNCTION>
<FUNCTION>
<NAME>requiem_option_set_longopt</NAME>
<RETURNS>void </RETURNS>
requiem_option_t *opt, const char *longopt
</FUNCTION>
<FUNCTION>
<NAME>requiem_option_get_longopt</NAME>
<RETURNS>const char *</RETURNS>
requiem_option_t *opt
</FUNCTION>
<FUNCTION>
<NAME>requiem_option_set_description</NAME>
<RETURNS>void </RETURNS>
requiem_option_t *opt, const char *description
</FUNCTION>
<FUNCTION>
<NAME>requiem_option_get_description</NAME>
<RETURNS>const char *</RETURNS>
requiem_option_t *opt
</FUNCTION>
<FUNCTION>
<NAME>requiem_option_set_has_arg</NAME>
<RETURNS>void </RETURNS>
requiem_option_t *opt, requiem_option_argument_t has_arg
</FUNCTION>
<FUNCTION>
<NAME>requiem_option_get_has_arg</NAME>
<RETURNS>requiem_option_argument_t </RETURNS>
requiem_option_t *opt
</FUNCTION>
<FUNCTION>
<NAME>requiem_option_set_value</NAME>
<RETURNS>void </RETURNS>
requiem_option_t *opt, const char *value
</FUNCTION>
<FUNCTION>
<NAME>requiem_option_get_value</NAME>
<RETURNS>const char *</RETURNS>
requiem_option_t *opt
</FUNCTION>
<FUNCTION>
<NAME>requiem_option_set_help</NAME>
<RETURNS>void </RETURNS>
requiem_option_t *opt, const char *help
</FUNCTION>
<FUNCTION>
<NAME>requiem_option_get_help</NAME>
<RETURNS>const char *</RETURNS>
requiem_option_t *opt
</FUNCTION>
<FUNCTION>
<NAME>requiem_option_set_input_validation_regex</NAME>
<RETURNS>void </RETURNS>
requiem_option_t *opt, const char *regex
</FUNCTION>
<FUNCTION>
<NAME>requiem_option_get_input_validation_regex</NAME>
<RETURNS>const char *</RETURNS>
requiem_option_t *opt
</FUNCTION>
<FUNCTION>
<NAME>requiem_option_set_input_type</NAME>
<RETURNS>void </RETURNS>
requiem_option_t *opt, requiem_option_input_type_t input_type
</FUNCTION>
<FUNCTION>
<NAME>requiem_option_get_input_type</NAME>
<RETURNS>requiem_option_input_type_t </RETURNS>
requiem_option_t *opt
</FUNCTION>
<FUNCTION>
<NAME>requiem_option_get_optlist</NAME>
<RETURNS>requiem_list_t *</RETURNS>
requiem_option_t *opt
</FUNCTION>
<FUNCTION>
<NAME>requiem_option_get_next</NAME>
<RETURNS>requiem_option_t *</RETURNS>
requiem_option_t *start, requiem_option_t *cur
</FUNCTION>
<FUNCTION>
<NAME>requiem_option_has_optlist</NAME>
<RETURNS>requiem_bool_t </RETURNS>
requiem_option_t *opt
</FUNCTION>
<FUNCTION>
<NAME>requiem_option_get_parent</NAME>
<RETURNS>requiem_option_t *</RETURNS>
requiem_option_t *opt
</FUNCTION>
<FUNCTION>
<NAME>requiem_option_set_destroy_callback</NAME>
<RETURNS>void </RETURNS>
requiem_option_t *opt,requiem_option_destroy_callback_t destroy
</FUNCTION>
<FUNCTION>
<NAME>requiem_option_get_destroy_callback</NAME>
<RETURNS>requiem_option_destroy_callback_t </RETURNS>
requiem_option_t *opt
</FUNCTION>
<FUNCTION>
<NAME>requiem_option_set_set_callback</NAME>
<RETURNS>void </RETURNS>
requiem_option_t *opt,requiem_option_set_callback_t set
</FUNCTION>
<FUNCTION>
<NAME>requiem_option_get_set_callback</NAME>
<RETURNS>requiem_option_set_callback_t </RETURNS>
requiem_option_t *opt
</FUNCTION>
<FUNCTION>
<NAME>requiem_option_set_get_callback</NAME>
<RETURNS>void </RETURNS>
requiem_option_t *opt,int (*get)(requiem_option_t *opt, requiem_string_t *out, void *context)
</FUNCTION>
<FUNCTION>
<NAME>requiem_option_get_get_callback</NAME>
<RETURNS>requiem_option_get_callback_t </RETURNS>
requiem_option_t *opt
</FUNCTION>
<FUNCTION>
<NAME>requiem_option_set_commit_callback</NAME>
<RETURNS>void </RETURNS>
requiem_option_t *opt, requiem_option_commit_callback_t commit
</FUNCTION>
<FUNCTION>
<NAME>requiem_option_get_commit_callback</NAME>
<RETURNS>requiem_option_commit_callback_t </RETURNS>
requiem_option_t *opt
</FUNCTION>
<FUNCTION>
<NAME>requiem_option_set_default_context</NAME>
<RETURNS>void </RETURNS>
requiem_option_t *opt, void *context
</FUNCTION>
<FUNCTION>
<NAME>requiem_option_new_context</NAME>
<RETURNS>int </RETURNS>
requiem_option_t *opt, requiem_option_context_t **ctx, const char *name, void *data
</FUNCTION>
<FUNCTION>
<NAME>requiem_option_context_destroy</NAME>
<RETURNS>void </RETURNS>
requiem_option_context_t *oc
</FUNCTION>
<FUNCTION>
<NAME>requiem_option_context_get_data</NAME>
<RETURNS>void *</RETURNS>
requiem_option_context_t *oc
</FUNCTION>
<FUNCTION>
<NAME>requiem_option_context_set_data</NAME>
<RETURNS>void </RETURNS>
requiem_option_context_t *oc, void *data
</FUNCTION>
<FUNCTION>
<NAME>requiem_option_search</NAME>
<RETURNS>requiem_option_t *</RETURNS>
requiem_option_t *parent, const char *name,requiem_option_type_t type, requiem_bool_t walk_children
</FUNCTION>
<FUNCTION>
<NAME>requiem_option_search_context</NAME>
<RETURNS>requiem_option_context_t *</RETURNS>
requiem_option_t *opt, const char *name
</FUNCTION>
<FUNCTION>
<NAME>idmef_additional_data_write</NAME>
<RETURNS>int </RETURNS>
idmef_additional_data_t *additional_data, requiem_msgbuf_t *msg
</FUNCTION>
<FUNCTION>
<NAME>idmef_reference_write</NAME>
<RETURNS>int </RETURNS>
idmef_reference_t *reference, requiem_msgbuf_t *msg
</FUNCTION>
<FUNCTION>
<NAME>idmef_classification_write</NAME>
<RETURNS>int </RETURNS>
idmef_classification_t *classification, requiem_msgbuf_t *msg
</FUNCTION>
<FUNCTION>
<NAME>idmef_user_id_write</NAME>
<RETURNS>int </RETURNS>
idmef_user_id_t *user_id, requiem_msgbuf_t *msg
</FUNCTION>
<FUNCTION>
<NAME>idmef_user_write</NAME>
<RETURNS>int </RETURNS>
idmef_user_t *user, requiem_msgbuf_t *msg
</FUNCTION>
<FUNCTION>
<NAME>idmef_address_write</NAME>
<RETURNS>int </RETURNS>
idmef_address_t *address, requiem_msgbuf_t *msg
</FUNCTION>
<FUNCTION>
<NAME>idmef_process_write</NAME>
<RETURNS>int </RETURNS>
idmef_process_t *process, requiem_msgbuf_t *msg
</FUNCTION>
<FUNCTION>
<NAME>idmef_web_service_write</NAME>
<RETURNS>int </RETURNS>
idmef_web_service_t *web_service, requiem_msgbuf_t *msg
</FUNCTION>
<FUNCTION>
<NAME>idmef_snmp_service_write</NAME>
<RETURNS>int </RETURNS>
idmef_snmp_service_t *snmp_service, requiem_msgbuf_t *msg
</FUNCTION>
<FUNCTION>
<NAME>idmef_service_write</NAME>
<RETURNS>int </RETURNS>
idmef_service_t *service, requiem_msgbuf_t *msg
</FUNCTION>
<FUNCTION>
<NAME>idmef_node_write</NAME>
<RETURNS>int </RETURNS>
idmef_node_t *node, requiem_msgbuf_t *msg
</FUNCTION>
<FUNCTION>
<NAME>idmef_source_write</NAME>
<RETURNS>int </RETURNS>
idmef_source_t *source, requiem_msgbuf_t *msg
</FUNCTION>
<FUNCTION>
<NAME>idmef_file_access_write</NAME>
<RETURNS>int </RETURNS>
idmef_file_access_t *file_access, requiem_msgbuf_t *msg
</FUNCTION>
<FUNCTION>
<NAME>idmef_inode_write</NAME>
<RETURNS>int </RETURNS>
idmef_inode_t *inode, requiem_msgbuf_t *msg
</FUNCTION>
<FUNCTION>
<NAME>idmef_checksum_write</NAME>
<RETURNS>int </RETURNS>
idmef_checksum_t *checksum, requiem_msgbuf_t *msg
</FUNCTION>
<FUNCTION>
<NAME>idmef_file_write</NAME>
<RETURNS>int </RETURNS>
idmef_file_t *file, requiem_msgbuf_t *msg
</FUNCTION>
<FUNCTION>
<NAME>idmef_linkage_write</NAME>
<RETURNS>int </RETURNS>
idmef_linkage_t *linkage, requiem_msgbuf_t *msg
</FUNCTION>
<FUNCTION>
<NAME>idmef_target_write</NAME>
<RETURNS>int </RETURNS>
idmef_target_t *target, requiem_msgbuf_t *msg
</FUNCTION>
<FUNCTION>
<NAME>idmef_analyzer_write</NAME>
<RETURNS>int </RETURNS>
idmef_analyzer_t *analyzer, requiem_msgbuf_t *msg
</FUNCTION>
<FUNCTION>
<NAME>idmef_alertident_write</NAME>
<RETURNS>int </RETURNS>
idmef_alertident_t *alertident, requiem_msgbuf_t *msg
</FUNCTION>
<FUNCTION>
<NAME>idmef_impact_write</NAME>
<RETURNS>int </RETURNS>
idmef_impact_t *impact, requiem_msgbuf_t *msg
</FUNCTION>
<FUNCTION>
<NAME>idmef_action_write</NAME>
<RETURNS>int </RETURNS>
idmef_action_t *action, requiem_msgbuf_t *msg
</FUNCTION>
<FUNCTION>
<NAME>idmef_confidence_write</NAME>
<RETURNS>int </RETURNS>
idmef_confidence_t *confidence, requiem_msgbuf_t *msg
</FUNCTION>
<FUNCTION>
<NAME>idmef_assessment_write</NAME>
<RETURNS>int </RETURNS>
idmef_assessment_t *assessment, requiem_msgbuf_t *msg
</FUNCTION>
<FUNCTION>
<NAME>idmef_tool_alert_write</NAME>
<RETURNS>int </RETURNS>
idmef_tool_alert_t *tool_alert, requiem_msgbuf_t *msg
</FUNCTION>
<FUNCTION>
<NAME>idmef_correlation_alert_write</NAME>
<RETURNS>int </RETURNS>
idmef_correlation_alert_t *correlation_alert, requiem_msgbuf_t *msg
</FUNCTION>
<FUNCTION>
<NAME>idmef_overflow_alert_write</NAME>
<RETURNS>int </RETURNS>
idmef_overflow_alert_t *overflow_alert, requiem_msgbuf_t *msg
</FUNCTION>
<FUNCTION>
<NAME>idmef_alert_write</NAME>
<RETURNS>int </RETURNS>
idmef_alert_t *alert, requiem_msgbuf_t *msg
</FUNCTION>
<FUNCTION>
<NAME>idmef_heartbeat_write</NAME>
<RETURNS>int </RETURNS>
idmef_heartbeat_t *heartbeat, requiem_msgbuf_t *msg
</FUNCTION>
<FUNCTION>
<NAME>idmef_message_write</NAME>
<RETURNS>int </RETURNS>
idmef_message_t *message, requiem_msgbuf_t *msg
</FUNCTION>
<ENUM>
<NAME>requiem_log_t</NAME>
typedef enum {
        REQUIEM_LOG_CRIT  = -1,
        REQUIEM_LOG_ERR   =  0,
        REQUIEM_LOG_WARN  =  1,
        REQUIEM_LOG_INFO  =  2,
        REQUIEM_LOG_DEBUG  = 3
} requiem_log_t;
</ENUM>
<ENUM>
<NAME>requiem_log_flags_t</NAME>
typedef enum {
        REQUIEM_LOG_FLAGS_QUIET  = 0x01, /* Drop REQUIEM_LOG_PRIORITY_INFO */
        REQUIEM_LOG_FLAGS_SYSLOG = 0x02
} requiem_log_flags_t;
</ENUM>
<MACRO>
<NAME>requiem_log</NAME>
#define requiem_log(level, ...) \
        _requiem_log(level, __FILE__, __REQUIEM_FUNC__, __LINE__, __VA_ARGS__)
</MACRO>
<MACRO>
<NAME>requiem_log_debug</NAME>
#define requiem_log_debug(level, ...) \
        _requiem_log(REQUIEM_LOG_DEBUG + level, __FILE__, __REQUIEM_FUNC__, __LINE__, __VA_ARGS__)
</MACRO>
<FUNCTION>
<NAME>requiem_log</NAME>
<RETURNS>void </RETURNS>
requiem_log_t level, const char *fmt, ...
</FUNCTION>
<FUNCTION>
<NAME>requiem_log_debug</NAME>
<RETURNS>void </RETURNS>
requiem_log_t level, const char *fmt, ...
</FUNCTION>
<MACRO>
<NAME>requiem_log_v</NAME>
#define requiem_log_v(level, fmt, ap) \
        _requiem_log_v(level, __FILE__, __REQUIEM_FUNC__, __LINE__, fmt, ap)
</MACRO>
<MACRO>
<NAME>requiem_log_debug_v</NAME>
#define requiem_log_debug_v(level, fmt, ap) \
        _requiem_log_v(REQUIEM_LOG_DEBUG + level, __FILE__, __REQUIEM_FUNC__, __LINE__, fmt, ap)
</MACRO>
<FUNCTION>
<NAME>requiem_log_set_level</NAME>
<RETURNS>void </RETURNS>
requiem_log_t level
</FUNCTION>
<FUNCTION>
<NAME>requiem_log_set_debug_level</NAME>
<RETURNS>void </RETURNS>
int level
</FUNCTION>
<FUNCTION>
<NAME>requiem_log_get_flags</NAME>
<RETURNS>requiem_log_flags_t </RETURNS>
void
</FUNCTION>
<FUNCTION>
<NAME>requiem_log_set_flags</NAME>
<RETURNS>void </RETURNS>
requiem_log_flags_t flags
</FUNCTION>
<FUNCTION>
<NAME>requiem_log_get_prefix</NAME>
<RETURNS>char *</RETURNS>
void
</FUNCTION>
<FUNCTION>
<NAME>requiem_log_set_prefix</NAME>
<RETURNS>void </RETURNS>
char *prefix
</FUNCTION>
<FUNCTION>
<NAME>requiem_log_set_callback</NAME>
<RETURNS>void </RETURNS>
void log_cb(requiem_log_t level, const char *str)
</FUNCTION>
<FUNCTION>
<NAME>requiem_log_set_logfile</NAME>
<RETURNS>int </RETURNS>
const char *filename
</FUNCTION>
<TYPEDEF>
<NAME>requiem_failover_t</NAME>
typedef struct requiem_failover requiem_failover_t;
</TYPEDEF>
<FUNCTION>
<NAME>requiem_failover_destroy</NAME>
<RETURNS>void </RETURNS>
requiem_failover_t *failover
</FUNCTION>
<FUNCTION>
<NAME>requiem_failover_new</NAME>
<RETURNS>int </RETURNS>
requiem_failover_t **ret, const char *dirname
</FUNCTION>
<FUNCTION>
<NAME>requiem_failover_set_quota</NAME>
<RETURNS>void </RETURNS>
requiem_failover_t *failover, size_t limit
</FUNCTION>
<FUNCTION>
<NAME>requiem_failover_save_msg</NAME>
<RETURNS>int </RETURNS>
requiem_failover_t *failover, requiem_msg_t *msg
</FUNCTION>
<FUNCTION>
<NAME>requiem_failover_get_saved_msg</NAME>
<RETURNS>ssize_t </RETURNS>
requiem_failover_t *failover, requiem_msg_t **out
</FUNCTION>
<FUNCTION>
<NAME>requiem_failover_get_deleted_msg_count</NAME>
<RETURNS>unsigned long </RETURNS>
requiem_failover_t *failover
</FUNCTION>
<FUNCTION>
<NAME>requiem_failover_get_available_msg_count</NAME>
<RETURNS>unsigned long </RETURNS>
requiem_failover_t *failover
</FUNCTION>
<FUNCTION>
<NAME>requiem_failover_enable_transaction</NAME>
<RETURNS>void </RETURNS>
requiem_failover_t *failover
</FUNCTION>
<FUNCTION>
<NAME>requiem_failover_disable_transaction</NAME>
<RETURNS>void </RETURNS>
requiem_failover_t *failover
</FUNCTION>
<FUNCTION>
<NAME>requiem_failover_commit</NAME>
<RETURNS>int </RETURNS>
requiem_failover_t *failover, requiem_msg_t *msg
</FUNCTION>
<FUNCTION>
<NAME>requiem_failover_rollback</NAME>
<RETURNS>int </RETURNS>
requiem_failover_t *failover, requiem_msg_t *msg
</FUNCTION>
<FUNCTION>
<NAME>idmef_additional_data_new_real</NAME>
<RETURNS>int </RETURNS>
idmef_additional_data_t **ret, float data
</FUNCTION>
<FUNCTION>
<NAME>idmef_additional_data_new_byte</NAME>
<RETURNS>int </RETURNS>
idmef_additional_data_t **ret, uint8_t byte
</FUNCTION>
<FUNCTION>
<NAME>idmef_additional_data_new_integer</NAME>
<RETURNS>int </RETURNS>
idmef_additional_data_t **ret, uint32_t data
</FUNCTION>
<FUNCTION>
<NAME>idmef_additional_data_new_boolean</NAME>
<RETURNS>int </RETURNS>
idmef_additional_data_t **ret, requiem_bool_t data
</FUNCTION>
<FUNCTION>
<NAME>idmef_additional_data_new_character</NAME>
<RETURNS>int </RETURNS>
idmef_additional_data_t **ret, char data
</FUNCTION>
<FUNCTION>
<NAME>idmef_additional_data_set_real</NAME>
<RETURNS>void </RETURNS>
idmef_additional_data_t *ptr, float data
</FUNCTION>
<FUNCTION>
<NAME>idmef_additional_data_set_byte</NAME>
<RETURNS>void </RETURNS>
idmef_additional_data_t *ptr, uint8_t byte
</FUNCTION>
<FUNCTION>
<NAME>idmef_additional_data_set_integer</NAME>
<RETURNS>void </RETURNS>
idmef_additional_data_t *ptr, uint32_t data
</FUNCTION>
<FUNCTION>
<NAME>idmef_additional_data_set_boolean</NAME>
<RETURNS>void </RETURNS>
idmef_additional_data_t *ptr, requiem_bool_t data
</FUNCTION>
<FUNCTION>
<NAME>idmef_additional_data_set_character</NAME>
<RETURNS>void </RETURNS>
idmef_additional_data_t *ptr, char data
</FUNCTION>
<FUNCTION>
<NAME>idmef_additional_data_new_byte_string_ref</NAME>
<RETURNS>int </RETURNS>
idmef_additional_data_t **ad, const unsigned char *data, size_t len
</FUNCTION>
<FUNCTION>
<NAME>idmef_additional_data_set_byte_string_ref</NAME>
<RETURNS>int </RETURNS>
idmef_additional_data_t *ad, const unsigned char *data, size_t len
</FUNCTION>
<FUNCTION>
<NAME>idmef_additional_data_new_byte_string_dup</NAME>
<RETURNS>int </RETURNS>
idmef_additional_data_t **ad, const unsigned char *data, size_t len
</FUNCTION>
<FUNCTION>
<NAME>idmef_additional_data_set_byte_string_dup</NAME>
<RETURNS>int </RETURNS>
idmef_additional_data_t *ad, const unsigned char *data, size_t len
</FUNCTION>
<FUNCTION>
<NAME>idmef_additional_data_new_byte_string_nodup</NAME>
<RETURNS>int </RETURNS>
idmef_additional_data_t **ad, unsigned char *data, size_t len
</FUNCTION>
<FUNCTION>
<NAME>idmef_additional_data_set_byte_string_nodup</NAME>
<RETURNS>int </RETURNS>
idmef_additional_data_t *ad, unsigned char *data, size_t len
</FUNCTION>
<FUNCTION>
<NAME>idmef_additional_data_copy_ref</NAME>
<RETURNS>int </RETURNS>
idmef_additional_data_t *src, idmef_additional_data_t *dst
</FUNCTION>
<FUNCTION>
<NAME>idmef_additional_data_copy_dup</NAME>
<RETURNS>int </RETURNS>
idmef_additional_data_t *src, idmef_additional_data_t *dst
</FUNCTION>
<FUNCTION>
<NAME>idmef_additional_data_get_real</NAME>
<RETURNS>float </RETURNS>
idmef_additional_data_t *data
</FUNCTION>
<FUNCTION>
<NAME>idmef_additional_data_get_integer</NAME>
<RETURNS>uint32_t </RETURNS>
idmef_additional_data_t *data
</FUNCTION>
<FUNCTION>
<NAME>idmef_additional_data_get_boolean</NAME>
<RETURNS>requiem_bool_t </RETURNS>
idmef_additional_data_t *data
</FUNCTION>
<FUNCTION>
<NAME>idmef_additional_data_get_character</NAME>
<RETURNS>char </RETURNS>
idmef_additional_data_t *data
</FUNCTION>
<FUNCTION>
<NAME>idmef_additional_data_get_byte</NAME>
<RETURNS>uint8_t </RETURNS>
idmef_additional_data_t *data
</FUNCTION>
<FUNCTION>
<NAME>idmef_additional_data_get_len</NAME>
<RETURNS>size_t </RETURNS>
idmef_additional_data_t *data
</FUNCTION>
<FUNCTION>
<NAME>idmef_additional_data_is_empty</NAME>
<RETURNS>requiem_bool_t </RETURNS>
idmef_additional_data_t *data
</FUNCTION>
<FUNCTION>
<NAME>idmef_additional_data_data_to_string</NAME>
<RETURNS>int </RETURNS>
idmef_additional_data_t *ad, requiem_string_t *out
</FUNCTION>
<ENUM>
<NAME>idmef_criterion_operator_t</NAME>
typedef enum {
        IDMEF_CRITERION_OPERATOR_NOT               = 0x8000,
        IDMEF_CRITERION_OPERATOR_NOCASE            = 0x4000,

        IDMEF_CRITERION_OPERATOR_EQUAL             = 0x0001,
        IDMEF_CRITERION_OPERATOR_EQUAL_NOCASE      = IDMEF_CRITERION_OPERATOR_EQUAL|IDMEF_CRITERION_OPERATOR_NOCASE,
        IDMEF_CRITERION_OPERATOR_NOT_EQUAL         = IDMEF_CRITERION_OPERATOR_NOT|IDMEF_CRITERION_OPERATOR_EQUAL,
        IDMEF_CRITERION_OPERATOR_NOT_EQUAL_NOCASE  = IDMEF_CRITERION_OPERATOR_NOT_EQUAL|IDMEF_CRITERION_OPERATOR_EQUAL_NOCASE,

        IDMEF_CRITERION_OPERATOR_LESSER            = 0x0002,
        IDMEF_CRITERION_OPERATOR_LESSER_OR_EQUAL   = IDMEF_CRITERION_OPERATOR_LESSER|IDMEF_CRITERION_OPERATOR_EQUAL,

        IDMEF_CRITERION_OPERATOR_GREATER           = 0x0004,
        IDMEF_CRITERION_OPERATOR_GREATER_OR_EQUAL  = IDMEF_CRITERION_OPERATOR_GREATER|IDMEF_CRITERION_OPERATOR_EQUAL,

        IDMEF_CRITERION_OPERATOR_SUBSTR            = 0x0008,
        IDMEF_CRITERION_OPERATOR_SUBSTR_NOCASE     = IDMEF_CRITERION_OPERATOR_SUBSTR|IDMEF_CRITERION_OPERATOR_NOCASE,
        IDMEF_CRITERION_OPERATOR_NOT_SUBSTR        = IDMEF_CRITERION_OPERATOR_NOT|IDMEF_CRITERION_OPERATOR_SUBSTR,
        IDMEF_CRITERION_OPERATOR_NOT_SUBSTR_NOCASE = IDMEF_CRITERION_OPERATOR_NOT|IDMEF_CRITERION_OPERATOR_SUBSTR_NOCASE,

        IDMEF_CRITERION_OPERATOR_REGEX             = 0x0010,
        IDMEF_CRITERION_OPERATOR_REGEX_NOCASE      = IDMEF_CRITERION_OPERATOR_REGEX|IDMEF_CRITERION_OPERATOR_NOCASE,
        IDMEF_CRITERION_OPERATOR_NOT_REGEX         = IDMEF_CRITERION_OPERATOR_NOT|IDMEF_CRITERION_OPERATOR_REGEX,
        IDMEF_CRITERION_OPERATOR_NOT_REGEX_NOCASE  = IDMEF_CRITERION_OPERATOR_NOT|IDMEF_CRITERION_OPERATOR_REGEX_NOCASE,

        IDMEF_CRITERION_OPERATOR_NULL              = 0x0020,
        IDMEF_CRITERION_OPERATOR_NOT_NULL          = IDMEF_CRITERION_OPERATOR_NULL|IDMEF_CRITERION_OPERATOR_NOT
} idmef_criterion_operator_t;
</ENUM>
<TYPEDEF>
<NAME>idmef_criteria_t</NAME>
typedef struct idmef_criteria idmef_criteria_t;
</TYPEDEF>
<TYPEDEF>
<NAME>idmef_criterion_t</NAME>
typedef struct idmef_criterion idmef_criterion_t;
</TYPEDEF>
<FUNCTION>
<NAME>idmef_criterion_operator_to_string</NAME>
<RETURNS>const char *</RETURNS>
idmef_criterion_operator_t op
</FUNCTION>
<FUNCTION>
<NAME>idmef_criterion_new</NAME>
<RETURNS>int </RETURNS>
idmef_criterion_t **criterion, idmef_path_t *path,idmef_criterion_value_t *value, idmef_criterion_operator_t op
</FUNCTION>
<FUNCTION>
<NAME>idmef_criterion_destroy</NAME>
<RETURNS>void </RETURNS>
idmef_criterion_t *criterion
</FUNCTION>
<FUNCTION>
<NAME>idmef_criteria_ref</NAME>
<RETURNS>idmef_criteria_t *</RETURNS>
idmef_criteria_t *criteria
</FUNCTION>
<FUNCTION>
<NAME>idmef_criterion_clone</NAME>
<RETURNS>int </RETURNS>
const idmef_criterion_t *criterion, idmef_criterion_t **dst
</FUNCTION>
<FUNCTION>
<NAME>idmef_criterion_print</NAME>
<RETURNS>int </RETURNS>
const idmef_criterion_t *criterion, requiem_io_t *fd
</FUNCTION>
<FUNCTION>
<NAME>idmef_criterion_to_string</NAME>
<RETURNS>int </RETURNS>
const idmef_criterion_t *criterion, requiem_string_t *out
</FUNCTION>
<FUNCTION>
<NAME>idmef_criterion_get_path</NAME>
<RETURNS>idmef_path_t *</RETURNS>
const idmef_criterion_t *criterion
</FUNCTION>
<FUNCTION>
<NAME>idmef_criterion_get_value</NAME>
<RETURNS>idmef_criterion_value_t *</RETURNS>
const idmef_criterion_t *criterion
</FUNCTION>
<FUNCTION>
<NAME>idmef_criterion_get_operator</NAME>
<RETURNS>idmef_criterion_operator_t </RETURNS>
const idmef_criterion_t *criterion
</FUNCTION>
<FUNCTION>
<NAME>idmef_criterion_match</NAME>
<RETURNS>int </RETURNS>
const idmef_criterion_t *criterion, idmef_message_t *message
</FUNCTION>
<FUNCTION>
<NAME>idmef_criteria_new</NAME>
<RETURNS>int </RETURNS>
idmef_criteria_t **criteria
</FUNCTION>
<FUNCTION>
<NAME>idmef_criteria_destroy</NAME>
<RETURNS>void </RETURNS>
idmef_criteria_t *criteria
</FUNCTION>
<FUNCTION>
<NAME>idmef_criteria_clone</NAME>
<RETURNS>int </RETURNS>
idmef_criteria_t *src, idmef_criteria_t **dst
</FUNCTION>
<FUNCTION>
<NAME>idmef_criteria_print</NAME>
<RETURNS>int </RETURNS>
const idmef_criteria_t *criteria, requiem_io_t *fd
</FUNCTION>
<FUNCTION>
<NAME>idmef_criteria_to_string</NAME>
<RETURNS>int </RETURNS>
const idmef_criteria_t *criteria, requiem_string_t *out
</FUNCTION>
<FUNCTION>
<NAME>idmef_criteria_is_criterion</NAME>
<RETURNS>requiem_bool_t </RETURNS>
const idmef_criteria_t *criteria
</FUNCTION>
<FUNCTION>
<NAME>idmef_criteria_get_criterion</NAME>
<RETURNS>idmef_criterion_t *</RETURNS>
const idmef_criteria_t *criteria
</FUNCTION>
<FUNCTION>
<NAME>idmef_criteria_set_criterion</NAME>
<RETURNS>void </RETURNS>
idmef_criteria_t *criteria, idmef_criterion_t *criterion
</FUNCTION>
<FUNCTION>
<NAME>idmef_criteria_or_criteria</NAME>
<RETURNS>void </RETURNS>
idmef_criteria_t *criteria, idmef_criteria_t *criteria2
</FUNCTION>
<FUNCTION>
<NAME>idmef_criteria_and_criteria</NAME>
<RETURNS>int </RETURNS>
idmef_criteria_t *criteria, idmef_criteria_t *criteria2
</FUNCTION>
<FUNCTION>
<NAME>idmef_criteria_match</NAME>
<RETURNS>int </RETURNS>
const idmef_criteria_t *criteria, idmef_message_t *message
</FUNCTION>
<FUNCTION>
<NAME>idmef_criteria_get_or</NAME>
<RETURNS>idmef_criteria_t *</RETURNS>
const idmef_criteria_t *criteria
</FUNCTION>
<FUNCTION>
<NAME>idmef_criteria_get_and</NAME>
<RETURNS>idmef_criteria_t *</RETURNS>
const idmef_criteria_t *criteria
</FUNCTION>
<FUNCTION>
<NAME>idmef_criteria_new_from_string</NAME>
<RETURNS>int </RETURNS>
idmef_criteria_t **criteria, const char *str
</FUNCTION>
<FUNCTION>
<NAME>idmef_criteria_set_negation</NAME>
<RETURNS>void </RETURNS>
idmef_criteria_t *criteria, requiem_bool_t negate
</FUNCTION>
<FUNCTION>
<NAME>idmef_criteria_get_negation</NAME>
<RETURNS>requiem_bool_t </RETURNS>
const idmef_criteria_t *criteria
</FUNCTION>
<ENUM>
<NAME>requiem_async_flags_t</NAME>
typedef enum {
        REQUIEM_ASYNC_FLAGS_TIMER   = 0x01
} requiem_async_flags_t;
</ENUM>
<USER_FUNCTION>
<NAME>requiem_async_callback_t</NAME>
<RETURNS>void </RETURNS>
void *object, void *data
</USER_FUNCTION>
<MACRO>
<NAME>REQUIEM_ASYNC_OBJECT</NAME>
#define REQUIEM_ASYNC_OBJECT                   \
        REQUIEM_LINKED_OBJECT;                 \
        void *_async_data;                     \
        requiem_async_callback_t _async_func
</MACRO>
<STRUCT>
<NAME>requiem_async_object_t</NAME>
typedef struct {
        REQUIEM_ASYNC_OBJECT;
} requiem_async_object_t;
</STRUCT>
<FUNCTION>
<NAME>requiem_async_init</NAME>
<RETURNS>int </RETURNS>
void
</FUNCTION>
<FUNCTION>
<NAME>requiem_async_get_flags</NAME>
<RETURNS>requiem_async_flags_t </RETURNS>
void
</FUNCTION>
<FUNCTION>
<NAME>requiem_async_set_flags</NAME>
<RETURNS>void </RETURNS>
requiem_async_flags_t flags
</FUNCTION>
<FUNCTION>
<NAME>requiem_async_add</NAME>
<RETURNS>void </RETURNS>
requiem_async_object_t *obj
</FUNCTION>
<FUNCTION>
<NAME>requiem_async_del</NAME>
<RETURNS>void </RETURNS>
requiem_async_object_t *obj
</FUNCTION>
<FUNCTION>
<NAME>requiem_async_exit</NAME>
<RETURNS>void </RETURNS>
void
</FUNCTION>
<MACRO>
<NAME>IDMEF_LIST_APPEND</NAME>
#define IDMEF_LIST_APPEND  INT_MAX
</MACRO>
<MACRO>
<NAME>IDMEF_LIST_PREPEND</NAME>
#define IDMEF_LIST_PREPEND (INT_MAX - 1)
</MACRO>
<ENUM>
<NAME>idmef_additional_data_type_t</NAME>
typedef enum {
        IDMEF_ADDITIONAL_DATA_TYPE_ERROR = -1,
        IDMEF_ADDITIONAL_DATA_TYPE_STRING = 0,
        IDMEF_ADDITIONAL_DATA_TYPE_BYTE = 1,
        IDMEF_ADDITIONAL_DATA_TYPE_CHARACTER = 2,
        IDMEF_ADDITIONAL_DATA_TYPE_DATE_TIME = 3,
        IDMEF_ADDITIONAL_DATA_TYPE_INTEGER = 4,
        IDMEF_ADDITIONAL_DATA_TYPE_NTPSTAMP = 5,
        IDMEF_ADDITIONAL_DATA_TYPE_PORTLIST = 6,
        IDMEF_ADDITIONAL_DATA_TYPE_REAL = 7,
        IDMEF_ADDITIONAL_DATA_TYPE_BOOLEAN = 8,
        IDMEF_ADDITIONAL_DATA_TYPE_BYTE_STRING = 9,
        IDMEF_ADDITIONAL_DATA_TYPE_XML = 10
} idmef_additional_data_type_t;
</ENUM>
<FUNCTION>
<NAME>idmef_additional_data_type_to_numeric</NAME>
<RETURNS>idmef_additional_data_type_t </RETURNS>
const char *name
</FUNCTION>
<FUNCTION>
<NAME>idmef_additional_data_type_to_string</NAME>
<RETURNS>const char *</RETURNS>
idmef_additional_data_type_t val
</FUNCTION>
<TYPEDEF>
<NAME>idmef_additional_data_t</NAME>
typedef struct idmef_additional_data idmef_additional_data_t;
</TYPEDEF>
<FUNCTION>
<NAME>idmef_additional_data_new</NAME>
<RETURNS>int </RETURNS>
idmef_additional_data_t **ret
</FUNCTION>
<FUNCTION>
<NAME>idmef_additional_data_copy</NAME>
<RETURNS>int </RETURNS>
const idmef_additional_data_t *src, idmef_additional_data_t *dst
</FUNCTION>
<FUNCTION>
<NAME>idmef_additional_data_clone</NAME>
<RETURNS>int </RETURNS>
idmef_additional_data_t *src, idmef_additional_data_t **dst
</FUNCTION>
<FUNCTION>
<NAME>idmef_additional_data_compare</NAME>
<RETURNS>int </RETURNS>
const idmef_additional_data_t *obj1, const idmef_additional_data_t *obj2
</FUNCTION>
<FUNCTION>
<NAME>idmef_additional_data_ref</NAME>
<RETURNS>idmef_additional_data_t *</RETURNS>
idmef_additional_data_t *additional_data
</FUNCTION>
<FUNCTION>
<NAME>idmef_additional_data_destroy</NAME>
<RETURNS>void </RETURNS>
idmef_additional_data_t *ptr
</FUNCTION>
<FUNCTION>
<NAME>idmef_additional_data_get_type</NAME>
<RETURNS>idmef_additional_data_type_t </RETURNS>
idmef_additional_data_t *ptr
</FUNCTION>
<FUNCTION>
<NAME>idmef_additional_data_set_type</NAME>
<RETURNS>void </RETURNS>
idmef_additional_data_t *ptr, idmef_additional_data_type_t type
</FUNCTION>
<FUNCTION>
<NAME>idmef_additional_data_new_type</NAME>
<RETURNS>int </RETURNS>
idmef_additional_data_t *ptr, idmef_additional_data_type_t **ret
</FUNCTION>
<FUNCTION>
<NAME>idmef_additional_data_get_meaning</NAME>
<RETURNS>requiem_string_t *</RETURNS>
idmef_additional_data_t *ptr
</FUNCTION>
<FUNCTION>
<NAME>idmef_additional_data_set_meaning</NAME>
<RETURNS>void </RETURNS>
idmef_additional_data_t *ptr, requiem_string_t *meaning
</FUNCTION>
<FUNCTION>
<NAME>idmef_additional_data_new_meaning</NAME>
<RETURNS>int </RETURNS>
idmef_additional_data_t *ptr, requiem_string_t **ret
</FUNCTION>
<FUNCTION>
<NAME>idmef_additional_data_get_data</NAME>
<RETURNS>idmef_data_t *</RETURNS>
idmef_additional_data_t *ptr
</FUNCTION>
<FUNCTION>
<NAME>idmef_additional_data_set_data</NAME>
<RETURNS>void </RETURNS>
idmef_additional_data_t *ptr, idmef_data_t *data
</FUNCTION>
<FUNCTION>
<NAME>idmef_additional_data_new_data</NAME>
<RETURNS>int </RETURNS>
idmef_additional_data_t *ptr, idmef_data_t **ret
</FUNCTION>
<ENUM>
<NAME>idmef_reference_origin_t</NAME>
typedef enum {
        IDMEF_REFERENCE_ORIGIN_ERROR = -1,
        IDMEF_REFERENCE_ORIGIN_UNKNOWN = 0,
        IDMEF_REFERENCE_ORIGIN_VENDOR_SPECIFIC = 1,
        IDMEF_REFERENCE_ORIGIN_USER_SPECIFIC = 2,
        IDMEF_REFERENCE_ORIGIN_BUGTRAQID = 3,
        IDMEF_REFERENCE_ORIGIN_CVE = 4,
        IDMEF_REFERENCE_ORIGIN_OSVDB = 5
} idmef_reference_origin_t;
</ENUM>
<FUNCTION>
<NAME>idmef_reference_origin_to_numeric</NAME>
<RETURNS>idmef_reference_origin_t </RETURNS>
const char *name
</FUNCTION>
<FUNCTION>
<NAME>idmef_reference_origin_to_string</NAME>
<RETURNS>const char *</RETURNS>
idmef_reference_origin_t val
</FUNCTION>
<TYPEDEF>
<NAME>idmef_reference_t</NAME>
typedef struct idmef_reference idmef_reference_t;
</TYPEDEF>
<FUNCTION>
<NAME>idmef_reference_new</NAME>
<RETURNS>int </RETURNS>
idmef_reference_t **ret
</FUNCTION>
<FUNCTION>
<NAME>idmef_reference_copy</NAME>
<RETURNS>int </RETURNS>
const idmef_reference_t *src, idmef_reference_t *dst
</FUNCTION>
<FUNCTION>
<NAME>idmef_reference_clone</NAME>
<RETURNS>int </RETURNS>
idmef_reference_t *src, idmef_reference_t **dst
</FUNCTION>
<FUNCTION>
<NAME>idmef_reference_compare</NAME>
<RETURNS>int </RETURNS>
const idmef_reference_t *obj1, const idmef_reference_t *obj2
</FUNCTION>
<FUNCTION>
<NAME>idmef_reference_ref</NAME>
<RETURNS>idmef_reference_t *</RETURNS>
idmef_reference_t *reference
</FUNCTION>
<FUNCTION>
<NAME>idmef_reference_destroy</NAME>
<RETURNS>void </RETURNS>
idmef_reference_t *ptr
</FUNCTION>
<FUNCTION>
<NAME>idmef_reference_get_origin</NAME>
<RETURNS>idmef_reference_origin_t </RETURNS>
idmef_reference_t *ptr
</FUNCTION>
<FUNCTION>
<NAME>idmef_reference_set_origin</NAME>
<RETURNS>void </RETURNS>
idmef_reference_t *ptr, idmef_reference_origin_t origin
</FUNCTION>
<FUNCTION>
<NAME>idmef_reference_new_origin</NAME>
<RETURNS>int </RETURNS>
idmef_reference_t *ptr, idmef_reference_origin_t **ret
</FUNCTION>
<FUNCTION>
<NAME>idmef_reference_get_name</NAME>
<RETURNS>requiem_string_t *</RETURNS>
idmef_reference_t *ptr
</FUNCTION>
<FUNCTION>
<NAME>idmef_reference_set_name</NAME>
<RETURNS>void </RETURNS>
idmef_reference_t *ptr, requiem_string_t *name
</FUNCTION>
<FUNCTION>
<NAME>idmef_reference_new_name</NAME>
<RETURNS>int </RETURNS>
idmef_reference_t *ptr, requiem_string_t **ret
</FUNCTION>
<FUNCTION>
<NAME>idmef_reference_get_url</NAME>
<RETURNS>requiem_string_t *</RETURNS>
idmef_reference_t *ptr
</FUNCTION>
<FUNCTION>
<NAME>idmef_reference_set_url</NAME>
<RETURNS>void </RETURNS>
idmef_reference_t *ptr, requiem_string_t *url
</FUNCTION>
<FUNCTION>
<NAME>idmef_reference_new_url</NAME>
<RETURNS>int </RETURNS>
idmef_reference_t *ptr, requiem_string_t **ret
</FUNCTION>
<FUNCTION>
<NAME>idmef_reference_get_meaning</NAME>
<RETURNS>requiem_string_t *</RETURNS>
idmef_reference_t *ptr
</FUNCTION>
<FUNCTION>
<NAME>idmef_reference_set_meaning</NAME>
<RETURNS>void </RETURNS>
idmef_reference_t *ptr, requiem_string_t *meaning
</FUNCTION>
<FUNCTION>
<NAME>idmef_reference_new_meaning</NAME>
<RETURNS>int </RETURNS>
idmef_reference_t *ptr, requiem_string_t **ret
</FUNCTION>
<TYPEDEF>
<NAME>idmef_classification_t</NAME>
typedef struct idmef_classification idmef_classification_t;
</TYPEDEF>
<FUNCTION>
<NAME>idmef_classification_new</NAME>
<RETURNS>int </RETURNS>
idmef_classification_t **ret
</FUNCTION>
<FUNCTION>
<NAME>idmef_classification_copy</NAME>
<RETURNS>int </RETURNS>
const idmef_classification_t *src, idmef_classification_t *dst
</FUNCTION>
<FUNCTION>
<NAME>idmef_classification_clone</NAME>
<RETURNS>int </RETURNS>
idmef_classification_t *src, idmef_classification_t **dst
</FUNCTION>
<FUNCTION>
<NAME>idmef_classification_compare</NAME>
<RETURNS>int </RETURNS>
const idmef_classification_t *obj1, const idmef_classification_t *obj2
</FUNCTION>
<FUNCTION>
<NAME>idmef_classification_ref</NAME>
<RETURNS>idmef_classification_t *</RETURNS>
idmef_classification_t *classification
</FUNCTION>
<FUNCTION>
<NAME>idmef_classification_destroy</NAME>
<RETURNS>void </RETURNS>
idmef_classification_t *ptr
</FUNCTION>
<FUNCTION>
<NAME>idmef_classification_get_ident</NAME>
<RETURNS>requiem_string_t *</RETURNS>
idmef_classification_t *ptr
</FUNCTION>
<FUNCTION>
<NAME>idmef_classification_set_ident</NAME>
<RETURNS>void </RETURNS>
idmef_classification_t *ptr, requiem_string_t *ident
</FUNCTION>
<FUNCTION>
<NAME>idmef_classification_new_ident</NAME>
<RETURNS>int </RETURNS>
idmef_classification_t *ptr, requiem_string_t **ret
</FUNCTION>
<FUNCTION>
<NAME>idmef_classification_get_text</NAME>
<RETURNS>requiem_string_t *</RETURNS>
idmef_classification_t *ptr
</FUNCTION>
<FUNCTION>
<NAME>idmef_classification_set_text</NAME>
<RETURNS>void </RETURNS>
idmef_classification_t *ptr, requiem_string_t *text
</FUNCTION>
<FUNCTION>
<NAME>idmef_classification_new_text</NAME>
<RETURNS>int </RETURNS>
idmef_classification_t *ptr, requiem_string_t **ret
</FUNCTION>
<FUNCTION>
<NAME>idmef_classification_get_next_reference</NAME>
<RETURNS>idmef_reference_t *</RETURNS>
idmef_classification_t *classification, idmef_reference_t *reference_cur
</FUNCTION>
<FUNCTION>
<NAME>idmef_classification_set_reference</NAME>
<RETURNS>void </RETURNS>
idmef_classification_t *ptr, idmef_reference_t *object, int pos
</FUNCTION>
<FUNCTION>
<NAME>idmef_classification_new_reference</NAME>
<RETURNS>int </RETURNS>
idmef_classification_t *ptr, idmef_reference_t **ret, int pos
</FUNCTION>
<ENUM>
<NAME>idmef_user_id_type_t</NAME>
typedef enum {
        IDMEF_USER_ID_TYPE_ORIGINAL_ERROR = -1,
        IDMEF_USER_ID_TYPE_ORIGINAL_USER = 0,
        IDMEF_USER_ID_TYPE_CURRENT_USER = 1,
        IDMEF_USER_ID_TYPE_TARGET_USER = 2,
        IDMEF_USER_ID_TYPE_USER_PRIVS = 3,
        IDMEF_USER_ID_TYPE_CURRENT_GROUP = 4,
        IDMEF_USER_ID_TYPE_GROUP_PRIVS = 5,
        IDMEF_USER_ID_TYPE_OTHER_PRIVS = 6
} idmef_user_id_type_t;
</ENUM>
<FUNCTION>
<NAME>idmef_user_id_type_to_numeric</NAME>
<RETURNS>idmef_user_id_type_t </RETURNS>
const char *name
</FUNCTION>
<FUNCTION>
<NAME>idmef_user_id_type_to_string</NAME>
<RETURNS>const char *</RETURNS>
idmef_user_id_type_t val
</FUNCTION>
<TYPEDEF>
<NAME>idmef_user_id_t</NAME>
typedef struct idmef_user_id idmef_user_id_t;
</TYPEDEF>
<FUNCTION>
<NAME>idmef_user_id_new</NAME>
<RETURNS>int </RETURNS>
idmef_user_id_t **ret
</FUNCTION>
<FUNCTION>
<NAME>idmef_user_id_copy</NAME>
<RETURNS>int </RETURNS>
const idmef_user_id_t *src, idmef_user_id_t *dst
</FUNCTION>
<FUNCTION>
<NAME>idmef_user_id_clone</NAME>
<RETURNS>int </RETURNS>
idmef_user_id_t *src, idmef_user_id_t **dst
</FUNCTION>
<FUNCTION>
<NAME>idmef_user_id_compare</NAME>
<RETURNS>int </RETURNS>
const idmef_user_id_t *obj1, const idmef_user_id_t *obj2
</FUNCTION>
<FUNCTION>
<NAME>idmef_user_id_ref</NAME>
<RETURNS>idmef_user_id_t *</RETURNS>
idmef_user_id_t *user_id
</FUNCTION>
<FUNCTION>
<NAME>idmef_user_id_destroy</NAME>
<RETURNS>void </RETURNS>
idmef_user_id_t *ptr
</FUNCTION>
<FUNCTION>
<NAME>idmef_user_id_get_ident</NAME>
<RETURNS>requiem_string_t *</RETURNS>
idmef_user_id_t *ptr
</FUNCTION>
<FUNCTION>
<NAME>idmef_user_id_set_ident</NAME>
<RETURNS>void </RETURNS>
idmef_user_id_t *ptr, requiem_string_t *ident
</FUNCTION>
<FUNCTION>
<NAME>idmef_user_id_new_ident</NAME>
<RETURNS>int </RETURNS>
idmef_user_id_t *ptr, requiem_string_t **ret
</FUNCTION>
<FUNCTION>
<NAME>idmef_user_id_get_type</NAME>
<RETURNS>idmef_user_id_type_t </RETURNS>
idmef_user_id_t *ptr
</FUNCTION>
<FUNCTION>
<NAME>idmef_user_id_set_type</NAME>
<RETURNS>void </RETURNS>
idmef_user_id_t *ptr, idmef_user_id_type_t type
</FUNCTION>
<FUNCTION>
<NAME>idmef_user_id_new_type</NAME>
<RETURNS>int </RETURNS>
idmef_user_id_t *ptr, idmef_user_id_type_t **ret
</FUNCTION>
<FUNCTION>
<NAME>idmef_user_id_get_tty</NAME>
<RETURNS>requiem_string_t *</RETURNS>
idmef_user_id_t *ptr
</FUNCTION>
<FUNCTION>
<NAME>idmef_user_id_set_tty</NAME>
<RETURNS>void </RETURNS>
idmef_user_id_t *ptr, requiem_string_t *tty
</FUNCTION>
<FUNCTION>
<NAME>idmef_user_id_new_tty</NAME>
<RETURNS>int </RETURNS>
idmef_user_id_t *ptr, requiem_string_t **ret
</FUNCTION>
<FUNCTION>
<NAME>idmef_user_id_get_name</NAME>
<RETURNS>requiem_string_t *</RETURNS>
idmef_user_id_t *ptr
</FUNCTION>
<FUNCTION>
<NAME>idmef_user_id_set_name</NAME>
<RETURNS>void </RETURNS>
idmef_user_id_t *ptr, requiem_string_t *name
</FUNCTION>
<FUNCTION>
<NAME>idmef_user_id_new_name</NAME>
<RETURNS>int </RETURNS>
idmef_user_id_t *ptr, requiem_string_t **ret
</FUNCTION>
<FUNCTION>
<NAME>idmef_user_id_unset_number</NAME>
<RETURNS>void </RETURNS>
idmef_user_id_t *ptr
</FUNCTION>
<FUNCTION>
<NAME>idmef_user_id_get_number</NAME>
<RETURNS>uint32_t *</RETURNS>
idmef_user_id_t *ptr
</FUNCTION>
<FUNCTION>
<NAME>idmef_user_id_set_number</NAME>
<RETURNS>void </RETURNS>
idmef_user_id_t *ptr, uint32_t number
</FUNCTION>
<FUNCTION>
<NAME>idmef_user_id_new_number</NAME>
<RETURNS>int </RETURNS>
idmef_user_id_t *ptr, uint32_t **ret
</FUNCTION>
<ENUM>
<NAME>idmef_user_category_t</NAME>
typedef enum {
        IDMEF_USER_CATEGORY_ERROR = -1,
        IDMEF_USER_CATEGORY_UNKNOWN = 0,
        IDMEF_USER_CATEGORY_APPLICATION = 1,
        IDMEF_USER_CATEGORY_OS_DEVICE = 2
} idmef_user_category_t;
</ENUM>
<FUNCTION>
<NAME>idmef_user_category_to_numeric</NAME>
<RETURNS>idmef_user_category_t </RETURNS>
const char *name
</FUNCTION>
<FUNCTION>
<NAME>idmef_user_category_to_string</NAME>
<RETURNS>const char *</RETURNS>
idmef_user_category_t val
</FUNCTION>
<TYPEDEF>
<NAME>idmef_user_t</NAME>
typedef struct idmef_user idmef_user_t;
</TYPEDEF>
<FUNCTION>
<NAME>idmef_user_new</NAME>
<RETURNS>int </RETURNS>
idmef_user_t **ret
</FUNCTION>
<FUNCTION>
<NAME>idmef_user_copy</NAME>
<RETURNS>int </RETURNS>
const idmef_user_t *src, idmef_user_t *dst
</FUNCTION>
<FUNCTION>
<NAME>idmef_user_clone</NAME>
<RETURNS>int </RETURNS>
idmef_user_t *src, idmef_user_t **dst
</FUNCTION>
<FUNCTION>
<NAME>idmef_user_compare</NAME>
<RETURNS>int </RETURNS>
const idmef_user_t *obj1, const idmef_user_t *obj2
</FUNCTION>
<FUNCTION>
<NAME>idmef_user_ref</NAME>
<RETURNS>idmef_user_t *</RETURNS>
idmef_user_t *user
</FUNCTION>
<FUNCTION>
<NAME>idmef_user_destroy</NAME>
<RETURNS>void </RETURNS>
idmef_user_t *ptr
</FUNCTION>
<FUNCTION>
<NAME>idmef_user_get_ident</NAME>
<RETURNS>requiem_string_t *</RETURNS>
idmef_user_t *ptr
</FUNCTION>
<FUNCTION>
<NAME>idmef_user_set_ident</NAME>
<RETURNS>void </RETURNS>
idmef_user_t *ptr, requiem_string_t *ident
</FUNCTION>
<FUNCTION>
<NAME>idmef_user_new_ident</NAME>
<RETURNS>int </RETURNS>
idmef_user_t *ptr, requiem_string_t **ret
</FUNCTION>
<FUNCTION>
<NAME>idmef_user_get_category</NAME>
<RETURNS>idmef_user_category_t </RETURNS>
idmef_user_t *ptr
</FUNCTION>
<FUNCTION>
<NAME>idmef_user_set_category</NAME>
<RETURNS>void </RETURNS>
idmef_user_t *ptr, idmef_user_category_t category
</FUNCTION>
<FUNCTION>
<NAME>idmef_user_new_category</NAME>
<RETURNS>int </RETURNS>
idmef_user_t *ptr, idmef_user_category_t **ret
</FUNCTION>
<FUNCTION>
<NAME>idmef_user_get_next_user_id</NAME>
<RETURNS>idmef_user_id_t *</RETURNS>
idmef_user_t *user, idmef_user_id_t *user_id_cur
</FUNCTION>
<FUNCTION>
<NAME>idmef_user_set_user_id</NAME>
<RETURNS>void </RETURNS>
idmef_user_t *ptr, idmef_user_id_t *object, int pos
</FUNCTION>
<FUNCTION>
<NAME>idmef_user_new_user_id</NAME>
<RETURNS>int </RETURNS>
idmef_user_t *ptr, idmef_user_id_t **ret, int pos
</FUNCTION>
<ENUM>
<NAME>idmef_address_category_t</NAME>
typedef enum {
        IDMEF_ADDRESS_CATEGORY_ERROR = -1,
        IDMEF_ADDRESS_CATEGORY_UNKNOWN = 0,
        IDMEF_ADDRESS_CATEGORY_ATM = 1,
        IDMEF_ADDRESS_CATEGORY_E_MAIL = 2,
        IDMEF_ADDRESS_CATEGORY_LOTUS_NOTES = 3,
        IDMEF_ADDRESS_CATEGORY_MAC = 4,
        IDMEF_ADDRESS_CATEGORY_SNA = 5,
        IDMEF_ADDRESS_CATEGORY_VM = 6,
        IDMEF_ADDRESS_CATEGORY_IPV4_ADDR = 7,
        IDMEF_ADDRESS_CATEGORY_IPV4_ADDR_HEX = 8,
        IDMEF_ADDRESS_CATEGORY_IPV4_NET = 9,
        IDMEF_ADDRESS_CATEGORY_IPV4_NET_MASK = 10,
        IDMEF_ADDRESS_CATEGORY_IPV6_ADDR = 11,
        IDMEF_ADDRESS_CATEGORY_IPV6_ADDR_HEX = 12,
        IDMEF_ADDRESS_CATEGORY_IPV6_NET = 13,
        IDMEF_ADDRESS_CATEGORY_IPV6_NET_MASK = 14
} idmef_address_category_t;
</ENUM>
<FUNCTION>
<NAME>idmef_address_category_to_numeric</NAME>
<RETURNS>idmef_address_category_t </RETURNS>
const char *name
</FUNCTION>
<FUNCTION>
<NAME>idmef_address_category_to_string</NAME>
<RETURNS>const char *</RETURNS>
idmef_address_category_t val
</FUNCTION>
<TYPEDEF>
<NAME>idmef_address_t</NAME>
typedef struct idmef_address idmef_address_t;
</TYPEDEF>
<FUNCTION>
<NAME>idmef_address_new</NAME>
<RETURNS>int </RETURNS>
idmef_address_t **ret
</FUNCTION>
<FUNCTION>
<NAME>idmef_address_copy</NAME>
<RETURNS>int </RETURNS>
const idmef_address_t *src, idmef_address_t *dst
</FUNCTION>
<FUNCTION>
<NAME>idmef_address_clone</NAME>
<RETURNS>int </RETURNS>
idmef_address_t *src, idmef_address_t **dst
</FUNCTION>
<FUNCTION>
<NAME>idmef_address_compare</NAME>
<RETURNS>int </RETURNS>
const idmef_address_t *obj1, const idmef_address_t *obj2
</FUNCTION>
<FUNCTION>
<NAME>idmef_address_ref</NAME>
<RETURNS>idmef_address_t *</RETURNS>
idmef_address_t *address
</FUNCTION>
<FUNCTION>
<NAME>idmef_address_destroy</NAME>
<RETURNS>void </RETURNS>
idmef_address_t *ptr
</FUNCTION>
<FUNCTION>
<NAME>idmef_address_get_ident</NAME>
<RETURNS>requiem_string_t *</RETURNS>
idmef_address_t *ptr
</FUNCTION>
<FUNCTION>
<NAME>idmef_address_set_ident</NAME>
<RETURNS>void </RETURNS>
idmef_address_t *ptr, requiem_string_t *ident
</FUNCTION>
<FUNCTION>
<NAME>idmef_address_new_ident</NAME>
<RETURNS>int </RETURNS>
idmef_address_t *ptr, requiem_string_t **ret
</FUNCTION>
<FUNCTION>
<NAME>idmef_address_get_category</NAME>
<RETURNS>idmef_address_category_t </RETURNS>
idmef_address_t *ptr
</FUNCTION>
<FUNCTION>
<NAME>idmef_address_set_category</NAME>
<RETURNS>void </RETURNS>
idmef_address_t *ptr, idmef_address_category_t category
</FUNCTION>
<FUNCTION>
<NAME>idmef_address_new_category</NAME>
<RETURNS>int </RETURNS>
idmef_address_t *ptr, idmef_address_category_t **ret
</FUNCTION>
<FUNCTION>
<NAME>idmef_address_get_vlan_name</NAME>
<RETURNS>requiem_string_t *</RETURNS>
idmef_address_t *ptr
</FUNCTION>
<FUNCTION>
<NAME>idmef_address_set_vlan_name</NAME>
<RETURNS>void </RETURNS>
idmef_address_t *ptr, requiem_string_t *vlan_name
</FUNCTION>
<FUNCTION>
<NAME>idmef_address_new_vlan_name</NAME>
<RETURNS>int </RETURNS>
idmef_address_t *ptr, requiem_string_t **ret
</FUNCTION>
<FUNCTION>
<NAME>idmef_address_unset_vlan_num</NAME>
<RETURNS>void </RETURNS>
idmef_address_t *ptr
</FUNCTION>
<FUNCTION>
<NAME>idmef_address_get_vlan_num</NAME>
<RETURNS>int32_t *</RETURNS>
idmef_address_t *ptr
</FUNCTION>
<FUNCTION>
<NAME>idmef_address_set_vlan_num</NAME>
<RETURNS>void </RETURNS>
idmef_address_t *ptr, int32_t vlan_num
</FUNCTION>
<FUNCTION>
<NAME>idmef_address_new_vlan_num</NAME>
<RETURNS>int </RETURNS>
idmef_address_t *ptr, int32_t **ret
</FUNCTION>
<FUNCTION>
<NAME>idmef_address_get_address</NAME>
<RETURNS>requiem_string_t *</RETURNS>
idmef_address_t *ptr
</FUNCTION>
<FUNCTION>
<NAME>idmef_address_set_address</NAME>
<RETURNS>void </RETURNS>
idmef_address_t *ptr, requiem_string_t *address
</FUNCTION>
<FUNCTION>
<NAME>idmef_address_new_address</NAME>
<RETURNS>int </RETURNS>
idmef_address_t *ptr, requiem_string_t **ret
</FUNCTION>
<FUNCTION>
<NAME>idmef_address_get_netmask</NAME>
<RETURNS>requiem_string_t *</RETURNS>
idmef_address_t *ptr
</FUNCTION>
<FUNCTION>
<NAME>idmef_address_set_netmask</NAME>
<RETURNS>void </RETURNS>
idmef_address_t *ptr, requiem_string_t *netmask
</FUNCTION>
<FUNCTION>
<NAME>idmef_address_new_netmask</NAME>
<RETURNS>int </RETURNS>
idmef_address_t *ptr, requiem_string_t **ret
</FUNCTION>
<TYPEDEF>
<NAME>idmef_process_t</NAME>
typedef struct idmef_process idmef_process_t;
</TYPEDEF>
<FUNCTION>
<NAME>idmef_process_new</NAME>
<RETURNS>int </RETURNS>
idmef_process_t **ret
</FUNCTION>
<FUNCTION>
<NAME>idmef_process_copy</NAME>
<RETURNS>int </RETURNS>
const idmef_process_t *src, idmef_process_t *dst
</FUNCTION>
<FUNCTION>
<NAME>idmef_process_clone</NAME>
<RETURNS>int </RETURNS>
idmef_process_t *src, idmef_process_t **dst
</FUNCTION>
<FUNCTION>
<NAME>idmef_process_compare</NAME>
<RETURNS>int </RETURNS>
const idmef_process_t *obj1, const idmef_process_t *obj2
</FUNCTION>
<FUNCTION>
<NAME>idmef_process_ref</NAME>
<RETURNS>idmef_process_t *</RETURNS>
idmef_process_t *process
</FUNCTION>
<FUNCTION>
<NAME>idmef_process_destroy</NAME>
<RETURNS>void </RETURNS>
idmef_process_t *ptr
</FUNCTION>
<FUNCTION>
<NAME>idmef_process_get_ident</NAME>
<RETURNS>requiem_string_t *</RETURNS>
idmef_process_t *ptr
</FUNCTION>
<FUNCTION>
<NAME>idmef_process_set_ident</NAME>
<RETURNS>void </RETURNS>
idmef_process_t *ptr, requiem_string_t *ident
</FUNCTION>
<FUNCTION>
<NAME>idmef_process_new_ident</NAME>
<RETURNS>int </RETURNS>
idmef_process_t *ptr, requiem_string_t **ret
</FUNCTION>
<FUNCTION>
<NAME>idmef_process_get_name</NAME>
<RETURNS>requiem_string_t *</RETURNS>
idmef_process_t *ptr
</FUNCTION>
<FUNCTION>
<NAME>idmef_process_set_name</NAME>
<RETURNS>void </RETURNS>
idmef_process_t *ptr, requiem_string_t *name
</FUNCTION>
<FUNCTION>
<NAME>idmef_process_new_name</NAME>
<RETURNS>int </RETURNS>
idmef_process_t *ptr, requiem_string_t **ret
</FUNCTION>
<FUNCTION>
<NAME>idmef_process_unset_pid</NAME>
<RETURNS>void </RETURNS>
idmef_process_t *ptr
</FUNCTION>
<FUNCTION>
<NAME>idmef_process_get_pid</NAME>
<RETURNS>uint32_t *</RETURNS>
idmef_process_t *ptr
</FUNCTION>
<FUNCTION>
<NAME>idmef_process_set_pid</NAME>
<RETURNS>void </RETURNS>
idmef_process_t *ptr, uint32_t pid
</FUNCTION>
<FUNCTION>
<NAME>idmef_process_new_pid</NAME>
<RETURNS>int </RETURNS>
idmef_process_t *ptr, uint32_t **ret
</FUNCTION>
<FUNCTION>
<NAME>idmef_process_get_path</NAME>
<RETURNS>requiem_string_t *</RETURNS>
idmef_process_t *ptr
</FUNCTION>
<FUNCTION>
<NAME>idmef_process_set_path</NAME>
<RETURNS>void </RETURNS>
idmef_process_t *ptr, requiem_string_t *path
</FUNCTION>
<FUNCTION>
<NAME>idmef_process_new_path</NAME>
<RETURNS>int </RETURNS>
idmef_process_t *ptr, requiem_string_t **ret
</FUNCTION>
<FUNCTION>
<NAME>idmef_process_get_next_arg</NAME>
<RETURNS>requiem_string_t *</RETURNS>
idmef_process_t *process, requiem_string_t *requiem_string_cur
</FUNCTION>
<FUNCTION>
<NAME>idmef_process_set_arg</NAME>
<RETURNS>void </RETURNS>
idmef_process_t *ptr, requiem_string_t *object, int pos
</FUNCTION>
<FUNCTION>
<NAME>idmef_process_new_arg</NAME>
<RETURNS>int </RETURNS>
idmef_process_t *ptr, requiem_string_t **ret, int pos
</FUNCTION>
<FUNCTION>
<NAME>idmef_process_get_next_env</NAME>
<RETURNS>requiem_string_t *</RETURNS>
idmef_process_t *process, requiem_string_t *requiem_string_cur
</FUNCTION>
<FUNCTION>
<NAME>idmef_process_set_env</NAME>
<RETURNS>void </RETURNS>
idmef_process_t *ptr, requiem_string_t *object, int pos
</FUNCTION>
<FUNCTION>
<NAME>idmef_process_new_env</NAME>
<RETURNS>int </RETURNS>
idmef_process_t *ptr, requiem_string_t **ret, int pos
</FUNCTION>
<TYPEDEF>
<NAME>idmef_web_service_t</NAME>
typedef struct idmef_web_service idmef_web_service_t;
</TYPEDEF>
<FUNCTION>
<NAME>idmef_web_service_new</NAME>
<RETURNS>int </RETURNS>
idmef_web_service_t **ret
</FUNCTION>
<FUNCTION>
<NAME>idmef_web_service_copy</NAME>
<RETURNS>int </RETURNS>
const idmef_web_service_t *src, idmef_web_service_t *dst
</FUNCTION>
<FUNCTION>
<NAME>idmef_web_service_clone</NAME>
<RETURNS>int </RETURNS>
idmef_web_service_t *src, idmef_web_service_t **dst
</FUNCTION>
<FUNCTION>
<NAME>idmef_web_service_compare</NAME>
<RETURNS>int </RETURNS>
const idmef_web_service_t *obj1, const idmef_web_service_t *obj2
</FUNCTION>
<FUNCTION>
<NAME>idmef_web_service_ref</NAME>
<RETURNS>idmef_web_service_t *</RETURNS>
idmef_web_service_t *web_service
</FUNCTION>
<FUNCTION>
<NAME>idmef_web_service_destroy</NAME>
<RETURNS>void </RETURNS>
idmef_web_service_t *ptr
</FUNCTION>
<FUNCTION>
<NAME>idmef_web_service_get_url</NAME>
<RETURNS>requiem_string_t *</RETURNS>
idmef_web_service_t *ptr
</FUNCTION>
<FUNCTION>
<NAME>idmef_web_service_set_url</NAME>
<RETURNS>void </RETURNS>
idmef_web_service_t *ptr, requiem_string_t *url
</FUNCTION>
<FUNCTION>
<NAME>idmef_web_service_new_url</NAME>
<RETURNS>int </RETURNS>
idmef_web_service_t *ptr, requiem_string_t **ret
</FUNCTION>
<FUNCTION>
<NAME>idmef_web_service_get_cgi</NAME>
<RETURNS>requiem_string_t *</RETURNS>
idmef_web_service_t *ptr
</FUNCTION>
<FUNCTION>
<NAME>idmef_web_service_set_cgi</NAME>
<RETURNS>void </RETURNS>
idmef_web_service_t *ptr, requiem_string_t *cgi
</FUNCTION>
<FUNCTION>
<NAME>idmef_web_service_new_cgi</NAME>
<RETURNS>int </RETURNS>
idmef_web_service_t *ptr, requiem_string_t **ret
</FUNCTION>
<FUNCTION>
<NAME>idmef_web_service_get_http_method</NAME>
<RETURNS>requiem_string_t *</RETURNS>
idmef_web_service_t *ptr
</FUNCTION>
<FUNCTION>
<NAME>idmef_web_service_set_http_method</NAME>
<RETURNS>void </RETURNS>
idmef_web_service_t *ptr, requiem_string_t *http_method
</FUNCTION>
<FUNCTION>
<NAME>idmef_web_service_new_http_method</NAME>
<RETURNS>int </RETURNS>
idmef_web_service_t *ptr, requiem_string_t **ret
</FUNCTION>
<FUNCTION>
<NAME>idmef_web_service_get_next_arg</NAME>
<RETURNS>requiem_string_t *</RETURNS>
idmef_web_service_t *web_service, requiem_string_t *requiem_string_cur
</FUNCTION>
<FUNCTION>
<NAME>idmef_web_service_set_arg</NAME>
<RETURNS>void </RETURNS>
idmef_web_service_t *ptr, requiem_string_t *object, int pos
</FUNCTION>
<FUNCTION>
<NAME>idmef_web_service_new_arg</NAME>
<RETURNS>int </RETURNS>
idmef_web_service_t *ptr, requiem_string_t **ret, int pos
</FUNCTION>
<TYPEDEF>
<NAME>idmef_snmp_service_t</NAME>
typedef struct idmef_snmp_service idmef_snmp_service_t;
</TYPEDEF>
<FUNCTION>
<NAME>idmef_snmp_service_new</NAME>
<RETURNS>int </RETURNS>
idmef_snmp_service_t **ret
</FUNCTION>
<FUNCTION>
<NAME>idmef_snmp_service_copy</NAME>
<RETURNS>int </RETURNS>
const idmef_snmp_service_t *src, idmef_snmp_service_t *dst
</FUNCTION>
<FUNCTION>
<NAME>idmef_snmp_service_clone</NAME>
<RETURNS>int </RETURNS>
idmef_snmp_service_t *src, idmef_snmp_service_t **dst
</FUNCTION>
<FUNCTION>
<NAME>idmef_snmp_service_compare</NAME>
<RETURNS>int </RETURNS>
const idmef_snmp_service_t *obj1, const idmef_snmp_service_t *obj2
</FUNCTION>
<FUNCTION>
<NAME>idmef_snmp_service_ref</NAME>
<RETURNS>idmef_snmp_service_t *</RETURNS>
idmef_snmp_service_t *snmp_service
</FUNCTION>
<FUNCTION>
<NAME>idmef_snmp_service_destroy</NAME>
<RETURNS>void </RETURNS>
idmef_snmp_service_t *ptr
</FUNCTION>
<FUNCTION>
<NAME>idmef_snmp_service_get_oid</NAME>
<RETURNS>requiem_string_t *</RETURNS>
idmef_snmp_service_t *ptr
</FUNCTION>
<FUNCTION>
<NAME>idmef_snmp_service_set_oid</NAME>
<RETURNS>void </RETURNS>
idmef_snmp_service_t *ptr, requiem_string_t *oid
</FUNCTION>
<FUNCTION>
<NAME>idmef_snmp_service_new_oid</NAME>
<RETURNS>int </RETURNS>
idmef_snmp_service_t *ptr, requiem_string_t **ret
</FUNCTION>
<FUNCTION>
<NAME>idmef_snmp_service_unset_message_processing_model</NAME>
<RETURNS>void </RETURNS>
idmef_snmp_service_t *ptr
</FUNCTION>
<FUNCTION>
<NAME>idmef_snmp_service_get_message_processing_model</NAME>
<RETURNS>uint32_t *</RETURNS>
idmef_snmp_service_t *ptr
</FUNCTION>
<FUNCTION>
<NAME>idmef_snmp_service_set_message_processing_model</NAME>
<RETURNS>void </RETURNS>
idmef_snmp_service_t *ptr, uint32_t message_processing_model
</FUNCTION>
<FUNCTION>
<NAME>idmef_snmp_service_new_message_processing_model</NAME>
<RETURNS>int </RETURNS>
idmef_snmp_service_t *ptr, uint32_t **ret
</FUNCTION>
<FUNCTION>
<NAME>idmef_snmp_service_unset_security_model</NAME>
<RETURNS>void </RETURNS>
idmef_snmp_service_t *ptr
</FUNCTION>
<FUNCTION>
<NAME>idmef_snmp_service_get_security_model</NAME>
<RETURNS>uint32_t *</RETURNS>
idmef_snmp_service_t *ptr
</FUNCTION>
<FUNCTION>
<NAME>idmef_snmp_service_set_security_model</NAME>
<RETURNS>void </RETURNS>
idmef_snmp_service_t *ptr, uint32_t security_model
</FUNCTION>
<FUNCTION>
<NAME>idmef_snmp_service_new_security_model</NAME>
<RETURNS>int </RETURNS>
idmef_snmp_service_t *ptr, uint32_t **ret
</FUNCTION>
<FUNCTION>
<NAME>idmef_snmp_service_get_security_name</NAME>
<RETURNS>requiem_string_t *</RETURNS>
idmef_snmp_service_t *ptr
</FUNCTION>
<FUNCTION>
<NAME>idmef_snmp_service_set_security_name</NAME>
<RETURNS>void </RETURNS>
idmef_snmp_service_t *ptr, requiem_string_t *security_name
</FUNCTION>
<FUNCTION>
<NAME>idmef_snmp_service_new_security_name</NAME>
<RETURNS>int </RETURNS>
idmef_snmp_service_t *ptr, requiem_string_t **ret
</FUNCTION>
<FUNCTION>
<NAME>idmef_snmp_service_unset_security_level</NAME>
<RETURNS>void </RETURNS>
idmef_snmp_service_t *ptr
</FUNCTION>
<FUNCTION>
<NAME>idmef_snmp_service_get_security_level</NAME>
<RETURNS>uint32_t *</RETURNS>
idmef_snmp_service_t *ptr
</FUNCTION>
<FUNCTION>
<NAME>idmef_snmp_service_set_security_level</NAME>
<RETURNS>void </RETURNS>
idmef_snmp_service_t *ptr, uint32_t security_level
</FUNCTION>
<FUNCTION>
<NAME>idmef_snmp_service_new_security_level</NAME>
<RETURNS>int </RETURNS>
idmef_snmp_service_t *ptr, uint32_t **ret
</FUNCTION>
<FUNCTION>
<NAME>idmef_snmp_service_get_context_name</NAME>
<RETURNS>requiem_string_t *</RETURNS>
idmef_snmp_service_t *ptr
</FUNCTION>
<FUNCTION>
<NAME>idmef_snmp_service_set_context_name</NAME>
<RETURNS>void </RETURNS>
idmef_snmp_service_t *ptr, requiem_string_t *context_name
</FUNCTION>
<FUNCTION>
<NAME>idmef_snmp_service_new_context_name</NAME>
<RETURNS>int </RETURNS>
idmef_snmp_service_t *ptr, requiem_string_t **ret
</FUNCTION>
<FUNCTION>
<NAME>idmef_snmp_service_get_context_engine_id</NAME>
<RETURNS>requiem_string_t *</RETURNS>
idmef_snmp_service_t *ptr
</FUNCTION>
<FUNCTION>
<NAME>idmef_snmp_service_set_context_engine_id</NAME>
<RETURNS>void </RETURNS>
idmef_snmp_service_t *ptr, requiem_string_t *context_engine_id
</FUNCTION>
<FUNCTION>
<NAME>idmef_snmp_service_new_context_engine_id</NAME>
<RETURNS>int </RETURNS>
idmef_snmp_service_t *ptr, requiem_string_t **ret
</FUNCTION>
<FUNCTION>
<NAME>idmef_snmp_service_get_command</NAME>
<RETURNS>requiem_string_t *</RETURNS>
idmef_snmp_service_t *ptr
</FUNCTION>
<FUNCTION>
<NAME>idmef_snmp_service_set_command</NAME>
<RETURNS>void </RETURNS>
idmef_snmp_service_t *ptr, requiem_string_t *command
</FUNCTION>
<FUNCTION>
<NAME>idmef_snmp_service_new_command</NAME>
<RETURNS>int </RETURNS>
idmef_snmp_service_t *ptr, requiem_string_t **ret
</FUNCTION>
<FUNCTION>
<NAME>idmef_snmp_service_get_community</NAME>
<RETURNS>requiem_string_t *</RETURNS>
idmef_snmp_service_t *ptr
</FUNCTION>
<FUNCTION>
<NAME>idmef_snmp_service_set_community</NAME>
<RETURNS>void </RETURNS>
idmef_snmp_service_t *ptr, requiem_string_t *community
</FUNCTION>
<FUNCTION>
<NAME>idmef_snmp_service_new_community</NAME>
<RETURNS>int </RETURNS>
idmef_snmp_service_t *ptr, requiem_string_t **ret
</FUNCTION>
<ENUM>
<NAME>idmef_service_type_t</NAME>
typedef enum {
        IDMEF_SERVICE_TYPE_ERROR = -1,
        IDMEF_SERVICE_TYPE_DEFAULT = 0,
        IDMEF_SERVICE_TYPE_WEB = 1,
        IDMEF_SERVICE_TYPE_SNMP = 2
} idmef_service_type_t;
</ENUM>
<FUNCTION>
<NAME>idmef_service_type_to_numeric</NAME>
<RETURNS>idmef_service_type_t </RETURNS>
const char *name
</FUNCTION>
<FUNCTION>
<NAME>idmef_service_type_to_string</NAME>
<RETURNS>const char *</RETURNS>
idmef_service_type_t val
</FUNCTION>
<TYPEDEF>
<NAME>idmef_service_t</NAME>
typedef struct idmef_service idmef_service_t;
</TYPEDEF>
<FUNCTION>
<NAME>idmef_service_new</NAME>
<RETURNS>int </RETURNS>
idmef_service_t **ret
</FUNCTION>
<FUNCTION>
<NAME>idmef_service_copy</NAME>
<RETURNS>int </RETURNS>
const idmef_service_t *src, idmef_service_t *dst
</FUNCTION>
<FUNCTION>
<NAME>idmef_service_clone</NAME>
<RETURNS>int </RETURNS>
idmef_service_t *src, idmef_service_t **dst
</FUNCTION>
<FUNCTION>
<NAME>idmef_service_compare</NAME>
<RETURNS>int </RETURNS>
const idmef_service_t *obj1, const idmef_service_t *obj2
</FUNCTION>
<FUNCTION>
<NAME>idmef_service_ref</NAME>
<RETURNS>idmef_service_t *</RETURNS>
idmef_service_t *service
</FUNCTION>
<FUNCTION>
<NAME>idmef_service_destroy</NAME>
<RETURNS>void </RETURNS>
idmef_service_t *ptr
</FUNCTION>
<FUNCTION>
<NAME>idmef_service_get_ident</NAME>
<RETURNS>requiem_string_t *</RETURNS>
idmef_service_t *ptr
</FUNCTION>
<FUNCTION>
<NAME>idmef_service_set_ident</NAME>
<RETURNS>void </RETURNS>
idmef_service_t *ptr, requiem_string_t *ident
</FUNCTION>
<FUNCTION>
<NAME>idmef_service_new_ident</NAME>
<RETURNS>int </RETURNS>
idmef_service_t *ptr, requiem_string_t **ret
</FUNCTION>
<FUNCTION>
<NAME>idmef_service_unset_ip_version</NAME>
<RETURNS>void </RETURNS>
idmef_service_t *ptr
</FUNCTION>
<FUNCTION>
<NAME>idmef_service_get_ip_version</NAME>
<RETURNS>uint8_t *</RETURNS>
idmef_service_t *ptr
</FUNCTION>
<FUNCTION>
<NAME>idmef_service_set_ip_version</NAME>
<RETURNS>void </RETURNS>
idmef_service_t *ptr, uint8_t ip_version
</FUNCTION>
<FUNCTION>
<NAME>idmef_service_new_ip_version</NAME>
<RETURNS>int </RETURNS>
idmef_service_t *ptr, uint8_t **ret
</FUNCTION>
<FUNCTION>
<NAME>idmef_service_unset_iana_protocol_number</NAME>
<RETURNS>void </RETURNS>
idmef_service_t *ptr
</FUNCTION>
<FUNCTION>
<NAME>idmef_service_get_iana_protocol_number</NAME>
<RETURNS>uint8_t *</RETURNS>
idmef_service_t *ptr
</FUNCTION>
<FUNCTION>
<NAME>idmef_service_set_iana_protocol_number</NAME>
<RETURNS>void </RETURNS>
idmef_service_t *ptr, uint8_t iana_protocol_number
</FUNCTION>
<FUNCTION>
<NAME>idmef_service_new_iana_protocol_number</NAME>
<RETURNS>int </RETURNS>
idmef_service_t *ptr, uint8_t **ret
</FUNCTION>
<FUNCTION>
<NAME>idmef_service_get_iana_protocol_name</NAME>
<RETURNS>requiem_string_t *</RETURNS>
idmef_service_t *ptr
</FUNCTION>
<FUNCTION>
<NAME>idmef_service_set_iana_protocol_name</NAME>
<RETURNS>void </RETURNS>
idmef_service_t *ptr, requiem_string_t *iana_protocol_name
</FUNCTION>
<FUNCTION>
<NAME>idmef_service_new_iana_protocol_name</NAME>
<RETURNS>int </RETURNS>
idmef_service_t *ptr, requiem_string_t **ret
</FUNCTION>
<FUNCTION>
<NAME>idmef_service_get_name</NAME>
<RETURNS>requiem_string_t *</RETURNS>
idmef_service_t *ptr
</FUNCTION>
<FUNCTION>
<NAME>idmef_service_set_name</NAME>
<RETURNS>void </RETURNS>
idmef_service_t *ptr, requiem_string_t *name
</FUNCTION>
<FUNCTION>
<NAME>idmef_service_new_name</NAME>
<RETURNS>int </RETURNS>
idmef_service_t *ptr, requiem_string_t **ret
</FUNCTION>
<FUNCTION>
<NAME>idmef_service_unset_port</NAME>
<RETURNS>void </RETURNS>
idmef_service_t *ptr
</FUNCTION>
<FUNCTION>
<NAME>idmef_service_get_port</NAME>
<RETURNS>uint16_t *</RETURNS>
idmef_service_t *ptr
</FUNCTION>
<FUNCTION>
<NAME>idmef_service_set_port</NAME>
<RETURNS>void </RETURNS>
idmef_service_t *ptr, uint16_t port
</FUNCTION>
<FUNCTION>
<NAME>idmef_service_new_port</NAME>
<RETURNS>int </RETURNS>
idmef_service_t *ptr, uint16_t **ret
</FUNCTION>
<FUNCTION>
<NAME>idmef_service_get_portlist</NAME>
<RETURNS>requiem_string_t *</RETURNS>
idmef_service_t *ptr
</FUNCTION>
<FUNCTION>
<NAME>idmef_service_set_portlist</NAME>
<RETURNS>void </RETURNS>
idmef_service_t *ptr, requiem_string_t *portlist
</FUNCTION>
<FUNCTION>
<NAME>idmef_service_new_portlist</NAME>
<RETURNS>int </RETURNS>
idmef_service_t *ptr, requiem_string_t **ret
</FUNCTION>
<FUNCTION>
<NAME>idmef_service_get_protocol</NAME>
<RETURNS>requiem_string_t *</RETURNS>
idmef_service_t *ptr
</FUNCTION>
<FUNCTION>
<NAME>idmef_service_set_protocol</NAME>
<RETURNS>void </RETURNS>
idmef_service_t *ptr, requiem_string_t *protocol
</FUNCTION>
<FUNCTION>
<NAME>idmef_service_new_protocol</NAME>
<RETURNS>int </RETURNS>
idmef_service_t *ptr, requiem_string_t **ret
</FUNCTION>
<FUNCTION>
<NAME>idmef_service_get_type</NAME>
<RETURNS>idmef_service_type_t </RETURNS>
idmef_service_t *ptr
</FUNCTION>
<FUNCTION>
<NAME>idmef_service_get_web_service</NAME>
<RETURNS>idmef_web_service_t *</RETURNS>
idmef_service_t *ptr
</FUNCTION>
<FUNCTION>
<NAME>idmef_service_set_web_service</NAME>
<RETURNS>void </RETURNS>
idmef_service_t *ptr, idmef_web_service_t *web_service
</FUNCTION>
<FUNCTION>
<NAME>idmef_service_new_web_service</NAME>
<RETURNS>int </RETURNS>
idmef_service_t *ptr, idmef_web_service_t **ret
</FUNCTION>
<FUNCTION>
<NAME>idmef_service_get_snmp_service</NAME>
<RETURNS>idmef_snmp_service_t *</RETURNS>
idmef_service_t *ptr
</FUNCTION>
<FUNCTION>
<NAME>idmef_service_set_snmp_service</NAME>
<RETURNS>void </RETURNS>
idmef_service_t *ptr, idmef_snmp_service_t *snmp_service
</FUNCTION>
<FUNCTION>
<NAME>idmef_service_new_snmp_service</NAME>
<RETURNS>int </RETURNS>
idmef_service_t *ptr, idmef_snmp_service_t **ret
</FUNCTION>
<ENUM>
<NAME>idmef_node_category_t</NAME>
typedef enum {
        IDMEF_NODE_CATEGORY_ERROR = -1,
        IDMEF_NODE_CATEGORY_UNKNOWN = 0,
        IDMEF_NODE_CATEGORY_ADS = 1,
        IDMEF_NODE_CATEGORY_AFS = 2,
        IDMEF_NODE_CATEGORY_CODA = 3,
        IDMEF_NODE_CATEGORY_DFS = 4,
        IDMEF_NODE_CATEGORY_DNS = 5,
        IDMEF_NODE_CATEGORY_HOSTS = 6,
        IDMEF_NODE_CATEGORY_KERBEROS = 7,
        IDMEF_NODE_CATEGORY_NDS = 8,
        IDMEF_NODE_CATEGORY_NIS = 9,
        IDMEF_NODE_CATEGORY_NISPLUS = 10,
        IDMEF_NODE_CATEGORY_NT = 11,
        IDMEF_NODE_CATEGORY_WFW = 12
} idmef_node_category_t;
</ENUM>
<FUNCTION>
<NAME>idmef_node_category_to_numeric</NAME>
<RETURNS>idmef_node_category_t </RETURNS>
const char *name
</FUNCTION>
<FUNCTION>
<NAME>idmef_node_category_to_string</NAME>
<RETURNS>const char *</RETURNS>
idmef_node_category_t val
</FUNCTION>
<TYPEDEF>
<NAME>idmef_node_t</NAME>
typedef struct idmef_node idmef_node_t;
</TYPEDEF>
<FUNCTION>
<NAME>idmef_node_new</NAME>
<RETURNS>int </RETURNS>
idmef_node_t **ret
</FUNCTION>
<FUNCTION>
<NAME>idmef_node_copy</NAME>
<RETURNS>int </RETURNS>
const idmef_node_t *src, idmef_node_t *dst
</FUNCTION>
<FUNCTION>
<NAME>idmef_node_clone</NAME>
<RETURNS>int </RETURNS>
idmef_node_t *src, idmef_node_t **dst
</FUNCTION>
<FUNCTION>
<NAME>idmef_node_compare</NAME>
<RETURNS>int </RETURNS>
const idmef_node_t *obj1, const idmef_node_t *obj2
</FUNCTION>
<FUNCTION>
<NAME>idmef_node_ref</NAME>
<RETURNS>idmef_node_t *</RETURNS>
idmef_node_t *node
</FUNCTION>
<FUNCTION>
<NAME>idmef_node_destroy</NAME>
<RETURNS>void </RETURNS>
idmef_node_t *ptr
</FUNCTION>
<FUNCTION>
<NAME>idmef_node_get_ident</NAME>
<RETURNS>requiem_string_t *</RETURNS>
idmef_node_t *ptr
</FUNCTION>
<FUNCTION>
<NAME>idmef_node_set_ident</NAME>
<RETURNS>void </RETURNS>
idmef_node_t *ptr, requiem_string_t *ident
</FUNCTION>
<FUNCTION>
<NAME>idmef_node_new_ident</NAME>
<RETURNS>int </RETURNS>
idmef_node_t *ptr, requiem_string_t **ret
</FUNCTION>
<FUNCTION>
<NAME>idmef_node_get_category</NAME>
<RETURNS>idmef_node_category_t </RETURNS>
idmef_node_t *ptr
</FUNCTION>
<FUNCTION>
<NAME>idmef_node_set_category</NAME>
<RETURNS>void </RETURNS>
idmef_node_t *ptr, idmef_node_category_t category
</FUNCTION>
<FUNCTION>
<NAME>idmef_node_new_category</NAME>
<RETURNS>int </RETURNS>
idmef_node_t *ptr, idmef_node_category_t **ret
</FUNCTION>
<FUNCTION>
<NAME>idmef_node_get_location</NAME>
<RETURNS>requiem_string_t *</RETURNS>
idmef_node_t *ptr
</FUNCTION>
<FUNCTION>
<NAME>idmef_node_set_location</NAME>
<RETURNS>void </RETURNS>
idmef_node_t *ptr, requiem_string_t *location
</FUNCTION>
<FUNCTION>
<NAME>idmef_node_new_location</NAME>
<RETURNS>int </RETURNS>
idmef_node_t *ptr, requiem_string_t **ret
</FUNCTION>
<FUNCTION>
<NAME>idmef_node_get_name</NAME>
<RETURNS>requiem_string_t *</RETURNS>
idmef_node_t *ptr
</FUNCTION>
<FUNCTION>
<NAME>idmef_node_set_name</NAME>
<RETURNS>void </RETURNS>
idmef_node_t *ptr, requiem_string_t *name
</FUNCTION>
<FUNCTION>
<NAME>idmef_node_new_name</NAME>
<RETURNS>int </RETURNS>
idmef_node_t *ptr, requiem_string_t **ret
</FUNCTION>
<FUNCTION>
<NAME>idmef_node_get_next_address</NAME>
<RETURNS>idmef_address_t *</RETURNS>
idmef_node_t *node, idmef_address_t *address_cur
</FUNCTION>
<FUNCTION>
<NAME>idmef_node_set_address</NAME>
<RETURNS>void </RETURNS>
idmef_node_t *ptr, idmef_address_t *object, int pos
</FUNCTION>
<FUNCTION>
<NAME>idmef_node_new_address</NAME>
<RETURNS>int </RETURNS>
idmef_node_t *ptr, idmef_address_t **ret, int pos
</FUNCTION>
<ENUM>
<NAME>idmef_source_spoofed_t</NAME>
typedef enum {
        IDMEF_SOURCE_SPOOFED_ERROR = -1,
        IDMEF_SOURCE_SPOOFED_UNKNOWN = 0,
        IDMEF_SOURCE_SPOOFED_YES = 1,
        IDMEF_SOURCE_SPOOFED_NO = 2
} idmef_source_spoofed_t;
</ENUM>
<FUNCTION>
<NAME>idmef_source_spoofed_to_numeric</NAME>
<RETURNS>idmef_source_spoofed_t </RETURNS>
const char *name
</FUNCTION>
<FUNCTION>
<NAME>idmef_source_spoofed_to_string</NAME>
<RETURNS>const char *</RETURNS>
idmef_source_spoofed_t val
</FUNCTION>
<TYPEDEF>
<NAME>idmef_source_t</NAME>
typedef struct idmef_source idmef_source_t;
</TYPEDEF>
<FUNCTION>
<NAME>idmef_source_new</NAME>
<RETURNS>int </RETURNS>
idmef_source_t **ret
</FUNCTION>
<FUNCTION>
<NAME>idmef_source_copy</NAME>
<RETURNS>int </RETURNS>
const idmef_source_t *src, idmef_source_t *dst
</FUNCTION>
<FUNCTION>
<NAME>idmef_source_clone</NAME>
<RETURNS>int </RETURNS>
idmef_source_t *src, idmef_source_t **dst
</FUNCTION>
<FUNCTION>
<NAME>idmef_source_compare</NAME>
<RETURNS>int </RETURNS>
const idmef_source_t *obj1, const idmef_source_t *obj2
</FUNCTION>
<FUNCTION>
<NAME>idmef_source_ref</NAME>
<RETURNS>idmef_source_t *</RETURNS>
idmef_source_t *source
</FUNCTION>
<FUNCTION>
<NAME>idmef_source_destroy</NAME>
<RETURNS>void </RETURNS>
idmef_source_t *ptr
</FUNCTION>
<FUNCTION>
<NAME>idmef_source_get_ident</NAME>
<RETURNS>requiem_string_t *</RETURNS>
idmef_source_t *ptr
</FUNCTION>
<FUNCTION>
<NAME>idmef_source_set_ident</NAME>
<RETURNS>void </RETURNS>
idmef_source_t *ptr, requiem_string_t *ident
</FUNCTION>
<FUNCTION>
<NAME>idmef_source_new_ident</NAME>
<RETURNS>int </RETURNS>
idmef_source_t *ptr, requiem_string_t **ret
</FUNCTION>
<FUNCTION>
<NAME>idmef_source_get_spoofed</NAME>
<RETURNS>idmef_source_spoofed_t </RETURNS>
idmef_source_t *ptr
</FUNCTION>
<FUNCTION>
<NAME>idmef_source_set_spoofed</NAME>
<RETURNS>void </RETURNS>
idmef_source_t *ptr, idmef_source_spoofed_t spoofed
</FUNCTION>
<FUNCTION>
<NAME>idmef_source_new_spoofed</NAME>
<RETURNS>int </RETURNS>
idmef_source_t *ptr, idmef_source_spoofed_t **ret
</FUNCTION>
<FUNCTION>
<NAME>idmef_source_get_interface</NAME>
<RETURNS>requiem_string_t *</RETURNS>
idmef_source_t *ptr
</FUNCTION>
<FUNCTION>
<NAME>idmef_source_set_interface</NAME>
<RETURNS>void </RETURNS>
idmef_source_t *ptr, requiem_string_t *interface
</FUNCTION>
<FUNCTION>
<NAME>idmef_source_new_interface</NAME>
<RETURNS>int </RETURNS>
idmef_source_t *ptr, requiem_string_t **ret
</FUNCTION>
<FUNCTION>
<NAME>idmef_source_get_node</NAME>
<RETURNS>idmef_node_t *</RETURNS>
idmef_source_t *ptr
</FUNCTION>
<FUNCTION>
<NAME>idmef_source_set_node</NAME>
<RETURNS>void </RETURNS>
idmef_source_t *ptr, idmef_node_t *node
</FUNCTION>
<FUNCTION>
<NAME>idmef_source_new_node</NAME>
<RETURNS>int </RETURNS>
idmef_source_t *ptr, idmef_node_t **ret
</FUNCTION>
<FUNCTION>
<NAME>idmef_source_get_user</NAME>
<RETURNS>idmef_user_t *</RETURNS>
idmef_source_t *ptr
</FUNCTION>
<FUNCTION>
<NAME>idmef_source_set_user</NAME>
<RETURNS>void </RETURNS>
idmef_source_t *ptr, idmef_user_t *user
</FUNCTION>
<FUNCTION>
<NAME>idmef_source_new_user</NAME>
<RETURNS>int </RETURNS>
idmef_source_t *ptr, idmef_user_t **ret
</FUNCTION>
<FUNCTION>
<NAME>idmef_source_get_process</NAME>
<RETURNS>idmef_process_t *</RETURNS>
idmef_source_t *ptr
</FUNCTION>
<FUNCTION>
<NAME>idmef_source_set_process</NAME>
<RETURNS>void </RETURNS>
idmef_source_t *ptr, idmef_process_t *process
</FUNCTION>
<FUNCTION>
<NAME>idmef_source_new_process</NAME>
<RETURNS>int </RETURNS>
idmef_source_t *ptr, idmef_process_t **ret
</FUNCTION>
<FUNCTION>
<NAME>idmef_source_get_service</NAME>
<RETURNS>idmef_service_t *</RETURNS>
idmef_source_t *ptr
</FUNCTION>
<FUNCTION>
<NAME>idmef_source_set_service</NAME>
<RETURNS>void </RETURNS>
idmef_source_t *ptr, idmef_service_t *service
</FUNCTION>
<FUNCTION>
<NAME>idmef_source_new_service</NAME>
<RETURNS>int </RETURNS>
idmef_source_t *ptr, idmef_service_t **ret
</FUNCTION>
<TYPEDEF>
<NAME>idmef_file_access_t</NAME>
typedef struct idmef_file_access idmef_file_access_t;
</TYPEDEF>
<FUNCTION>
<NAME>idmef_file_access_new</NAME>
<RETURNS>int </RETURNS>
idmef_file_access_t **ret
</FUNCTION>
<FUNCTION>
<NAME>idmef_file_access_copy</NAME>
<RETURNS>int </RETURNS>
const idmef_file_access_t *src, idmef_file_access_t *dst
</FUNCTION>
<FUNCTION>
<NAME>idmef_file_access_clone</NAME>
<RETURNS>int </RETURNS>
idmef_file_access_t *src, idmef_file_access_t **dst
</FUNCTION>
<FUNCTION>
<NAME>idmef_file_access_compare</NAME>
<RETURNS>int </RETURNS>
const idmef_file_access_t *obj1, const idmef_file_access_t *obj2
</FUNCTION>
<FUNCTION>
<NAME>idmef_file_access_ref</NAME>
<RETURNS>idmef_file_access_t *</RETURNS>
idmef_file_access_t *file_access
</FUNCTION>
<FUNCTION>
<NAME>idmef_file_access_destroy</NAME>
<RETURNS>void </RETURNS>
idmef_file_access_t *ptr
</FUNCTION>
<FUNCTION>
<NAME>idmef_file_access_get_user_id</NAME>
<RETURNS>idmef_user_id_t *</RETURNS>
idmef_file_access_t *ptr
</FUNCTION>
<FUNCTION>
<NAME>idmef_file_access_set_user_id</NAME>
<RETURNS>void </RETURNS>
idmef_file_access_t *ptr, idmef_user_id_t *user_id
</FUNCTION>
<FUNCTION>
<NAME>idmef_file_access_new_user_id</NAME>
<RETURNS>int </RETURNS>
idmef_file_access_t *ptr, idmef_user_id_t **ret
</FUNCTION>
<FUNCTION>
<NAME>idmef_file_access_get_next_permission</NAME>
<RETURNS>requiem_string_t *</RETURNS>
idmef_file_access_t *file_access, requiem_string_t *requiem_string_cur
</FUNCTION>
<FUNCTION>
<NAME>idmef_file_access_set_permission</NAME>
<RETURNS>void </RETURNS>
idmef_file_access_t *ptr, requiem_string_t *object, int pos
</FUNCTION>
<FUNCTION>
<NAME>idmef_file_access_new_permission</NAME>
<RETURNS>int </RETURNS>
idmef_file_access_t *ptr, requiem_string_t **ret, int pos
</FUNCTION>
<TYPEDEF>
<NAME>idmef_inode_t</NAME>
typedef struct idmef_inode idmef_inode_t;
</TYPEDEF>
<FUNCTION>
<NAME>idmef_inode_new</NAME>
<RETURNS>int </RETURNS>
idmef_inode_t **ret
</FUNCTION>
<FUNCTION>
<NAME>idmef_inode_copy</NAME>
<RETURNS>int </RETURNS>
const idmef_inode_t *src, idmef_inode_t *dst
</FUNCTION>
<FUNCTION>
<NAME>idmef_inode_clone</NAME>
<RETURNS>int </RETURNS>
idmef_inode_t *src, idmef_inode_t **dst
</FUNCTION>
<FUNCTION>
<NAME>idmef_inode_compare</NAME>
<RETURNS>int </RETURNS>
const idmef_inode_t *obj1, const idmef_inode_t *obj2
</FUNCTION>
<FUNCTION>
<NAME>idmef_inode_ref</NAME>
<RETURNS>idmef_inode_t *</RETURNS>
idmef_inode_t *inode
</FUNCTION>
<FUNCTION>
<NAME>idmef_inode_destroy</NAME>
<RETURNS>void </RETURNS>
idmef_inode_t *ptr
</FUNCTION>
<FUNCTION>
<NAME>idmef_inode_get_change_time</NAME>
<RETURNS>idmef_time_t *</RETURNS>
idmef_inode_t *ptr
</FUNCTION>
<FUNCTION>
<NAME>idmef_inode_set_change_time</NAME>
<RETURNS>void </RETURNS>
idmef_inode_t *ptr, idmef_time_t *change_time
</FUNCTION>
<FUNCTION>
<NAME>idmef_inode_new_change_time</NAME>
<RETURNS>int </RETURNS>
idmef_inode_t *ptr, idmef_time_t **ret
</FUNCTION>
<FUNCTION>
<NAME>idmef_inode_unset_number</NAME>
<RETURNS>void </RETURNS>
idmef_inode_t *ptr
</FUNCTION>
<FUNCTION>
<NAME>idmef_inode_get_number</NAME>
<RETURNS>uint32_t *</RETURNS>
idmef_inode_t *ptr
</FUNCTION>
<FUNCTION>
<NAME>idmef_inode_set_number</NAME>
<RETURNS>void </RETURNS>
idmef_inode_t *ptr, uint32_t number
</FUNCTION>
<FUNCTION>
<NAME>idmef_inode_new_number</NAME>
<RETURNS>int </RETURNS>
idmef_inode_t *ptr, uint32_t **ret
</FUNCTION>
<FUNCTION>
<NAME>idmef_inode_unset_major_device</NAME>
<RETURNS>void </RETURNS>
idmef_inode_t *ptr
</FUNCTION>
<FUNCTION>
<NAME>idmef_inode_get_major_device</NAME>
<RETURNS>uint32_t *</RETURNS>
idmef_inode_t *ptr
</FUNCTION>
<FUNCTION>
<NAME>idmef_inode_set_major_device</NAME>
<RETURNS>void </RETURNS>
idmef_inode_t *ptr, uint32_t major_device
</FUNCTION>
<FUNCTION>
<NAME>idmef_inode_new_major_device</NAME>
<RETURNS>int </RETURNS>
idmef_inode_t *ptr, uint32_t **ret
</FUNCTION>
<FUNCTION>
<NAME>idmef_inode_unset_minor_device</NAME>
<RETURNS>void </RETURNS>
idmef_inode_t *ptr
</FUNCTION>
<FUNCTION>
<NAME>idmef_inode_get_minor_device</NAME>
<RETURNS>uint32_t *</RETURNS>
idmef_inode_t *ptr
</FUNCTION>
<FUNCTION>
<NAME>idmef_inode_set_minor_device</NAME>
<RETURNS>void </RETURNS>
idmef_inode_t *ptr, uint32_t minor_device
</FUNCTION>
<FUNCTION>
<NAME>idmef_inode_new_minor_device</NAME>
<RETURNS>int </RETURNS>
idmef_inode_t *ptr, uint32_t **ret
</FUNCTION>
<FUNCTION>
<NAME>idmef_inode_unset_c_major_device</NAME>
<RETURNS>void </RETURNS>
idmef_inode_t *ptr
</FUNCTION>
<FUNCTION>
<NAME>idmef_inode_get_c_major_device</NAME>
<RETURNS>uint32_t *</RETURNS>
idmef_inode_t *ptr
</FUNCTION>
<FUNCTION>
<NAME>idmef_inode_set_c_major_device</NAME>
<RETURNS>void </RETURNS>
idmef_inode_t *ptr, uint32_t c_major_device
</FUNCTION>
<FUNCTION>
<NAME>idmef_inode_new_c_major_device</NAME>
<RETURNS>int </RETURNS>
idmef_inode_t *ptr, uint32_t **ret
</FUNCTION>
<FUNCTION>
<NAME>idmef_inode_unset_c_minor_device</NAME>
<RETURNS>void </RETURNS>
idmef_inode_t *ptr
</FUNCTION>
<FUNCTION>
<NAME>idmef_inode_get_c_minor_device</NAME>
<RETURNS>uint32_t *</RETURNS>
idmef_inode_t *ptr
</FUNCTION>
<FUNCTION>
<NAME>idmef_inode_set_c_minor_device</NAME>
<RETURNS>void </RETURNS>
idmef_inode_t *ptr, uint32_t c_minor_device
</FUNCTION>
<FUNCTION>
<NAME>idmef_inode_new_c_minor_device</NAME>
<RETURNS>int </RETURNS>
idmef_inode_t *ptr, uint32_t **ret
</FUNCTION>
<TYPEDEF>
<NAME>idmef_linkage_t</NAME>
typedef struct idmef_linkage idmef_linkage_t;
</TYPEDEF>
<ENUM>
<NAME>idmef_checksum_algorithm_t</NAME>
typedef enum {
        IDMEF_CHECKSUM_ALGORITHM_ERROR = -1,
        IDMEF_CHECKSUM_ALGORITHM_MD4 = 1,
        IDMEF_CHECKSUM_ALGORITHM_MD5 = 2,
        IDMEF_CHECKSUM_ALGORITHM_SHA1 = 3,
        IDMEF_CHECKSUM_ALGORITHM_SHA2_256 = 4,
        IDMEF_CHECKSUM_ALGORITHM_SHA2_384 = 5,
        IDMEF_CHECKSUM_ALGORITHM_SHA2_512 = 6,
        IDMEF_CHECKSUM_ALGORITHM_CRC_32 = 7,
        IDMEF_CHECKSUM_ALGORITHM_HAVAL = 8,
        IDMEF_CHECKSUM_ALGORITHM_TIGER = 9,
        IDMEF_CHECKSUM_ALGORITHM_GOST = 11
} idmef_checksum_algorithm_t;
</ENUM>
<FUNCTION>
<NAME>idmef_checksum_algorithm_to_numeric</NAME>
<RETURNS>idmef_checksum_algorithm_t </RETURNS>
const char *name
</FUNCTION>
<FUNCTION>
<NAME>idmef_checksum_algorithm_to_string</NAME>
<RETURNS>const char *</RETURNS>
idmef_checksum_algorithm_t val
</FUNCTION>
<TYPEDEF>
<NAME>idmef_checksum_t</NAME>
typedef struct idmef_checksum idmef_checksum_t;
</TYPEDEF>
<FUNCTION>
<NAME>idmef_checksum_new</NAME>
<RETURNS>int </RETURNS>
idmef_checksum_t **ret
</FUNCTION>
<FUNCTION>
<NAME>idmef_checksum_copy</NAME>
<RETURNS>int </RETURNS>
const idmef_checksum_t *src, idmef_checksum_t *dst
</FUNCTION>
<FUNCTION>
<NAME>idmef_checksum_clone</NAME>
<RETURNS>int </RETURNS>
idmef_checksum_t *src, idmef_checksum_t **dst
</FUNCTION>
<FUNCTION>
<NAME>idmef_checksum_compare</NAME>
<RETURNS>int </RETURNS>
const idmef_checksum_t *obj1, const idmef_checksum_t *obj2
</FUNCTION>
<FUNCTION>
<NAME>idmef_checksum_ref</NAME>
<RETURNS>idmef_checksum_t *</RETURNS>
idmef_checksum_t *checksum
</FUNCTION>
<FUNCTION>
<NAME>idmef_checksum_destroy</NAME>
<RETURNS>void </RETURNS>
idmef_checksum_t *ptr
</FUNCTION>
<FUNCTION>
<NAME>idmef_checksum_get_value</NAME>
<RETURNS>requiem_string_t *</RETURNS>
idmef_checksum_t *ptr
</FUNCTION>
<FUNCTION>
<NAME>idmef_checksum_set_value</NAME>
<RETURNS>void </RETURNS>
idmef_checksum_t *ptr, requiem_string_t *value
</FUNCTION>
<FUNCTION>
<NAME>idmef_checksum_new_value</NAME>
<RETURNS>int </RETURNS>
idmef_checksum_t *ptr, requiem_string_t **ret
</FUNCTION>
<FUNCTION>
<NAME>idmef_checksum_get_key</NAME>
<RETURNS>requiem_string_t *</RETURNS>
idmef_checksum_t *ptr
</FUNCTION>
<FUNCTION>
<NAME>idmef_checksum_set_key</NAME>
<RETURNS>void </RETURNS>
idmef_checksum_t *ptr, requiem_string_t *key
</FUNCTION>
<FUNCTION>
<NAME>idmef_checksum_new_key</NAME>
<RETURNS>int </RETURNS>
idmef_checksum_t *ptr, requiem_string_t **ret
</FUNCTION>
<FUNCTION>
<NAME>idmef_checksum_get_algorithm</NAME>
<RETURNS>idmef_checksum_algorithm_t </RETURNS>
idmef_checksum_t *ptr
</FUNCTION>
<FUNCTION>
<NAME>idmef_checksum_set_algorithm</NAME>
<RETURNS>void </RETURNS>
idmef_checksum_t *ptr, idmef_checksum_algorithm_t algorithm
</FUNCTION>
<FUNCTION>
<NAME>idmef_checksum_new_algorithm</NAME>
<RETURNS>int </RETURNS>
idmef_checksum_t *ptr, idmef_checksum_algorithm_t **ret
</FUNCTION>
<ENUM>
<NAME>idmef_file_category_t</NAME>
typedef enum {
        IDMEF_FILE_CATEGORY_ERROR = -1,
        IDMEF_FILE_CATEGORY_CURRENT = 1,
        IDMEF_FILE_CATEGORY_ORIGINAL = 2
} idmef_file_category_t;
</ENUM>
<FUNCTION>
<NAME>idmef_file_category_to_numeric</NAME>
<RETURNS>idmef_file_category_t </RETURNS>
const char *name
</FUNCTION>
<FUNCTION>
<NAME>idmef_file_category_to_string</NAME>
<RETURNS>const char *</RETURNS>
idmef_file_category_t val
</FUNCTION>
<ENUM>
<NAME>idmef_file_fstype_t</NAME>
typedef enum {
        IDMEF_FILE_FSTYPE_ERROR = -1,
        IDMEF_FILE_FSTYPE_UFS = 1,
        IDMEF_FILE_FSTYPE_EFS = 2,
        IDMEF_FILE_FSTYPE_NFS = 3,
        IDMEF_FILE_FSTYPE_AFS = 4,
        IDMEF_FILE_FSTYPE_NTFS = 5,
        IDMEF_FILE_FSTYPE_FAT16 = 6,
        IDMEF_FILE_FSTYPE_FAT32 = 7,
        IDMEF_FILE_FSTYPE_PCFS = 8,
        IDMEF_FILE_FSTYPE_JOLIET = 9,
        IDMEF_FILE_FSTYPE_ISO9660 = 10
} idmef_file_fstype_t;
</ENUM>
<FUNCTION>
<NAME>idmef_file_fstype_to_numeric</NAME>
<RETURNS>idmef_file_fstype_t </RETURNS>
const char *name
</FUNCTION>
<FUNCTION>
<NAME>idmef_file_fstype_to_string</NAME>
<RETURNS>const char *</RETURNS>
idmef_file_fstype_t val
</FUNCTION>
<TYPEDEF>
<NAME>idmef_file_t</NAME>
typedef struct idmef_file idmef_file_t;
</TYPEDEF>
<FUNCTION>
<NAME>idmef_file_new</NAME>
<RETURNS>int </RETURNS>
idmef_file_t **ret
</FUNCTION>
<FUNCTION>
<NAME>idmef_file_copy</NAME>
<RETURNS>int </RETURNS>
const idmef_file_t *src, idmef_file_t *dst
</FUNCTION>
<FUNCTION>
<NAME>idmef_file_clone</NAME>
<RETURNS>int </RETURNS>
idmef_file_t *src, idmef_file_t **dst
</FUNCTION>
<FUNCTION>
<NAME>idmef_file_compare</NAME>
<RETURNS>int </RETURNS>
const idmef_file_t *obj1, const idmef_file_t *obj2
</FUNCTION>
<FUNCTION>
<NAME>idmef_file_ref</NAME>
<RETURNS>idmef_file_t *</RETURNS>
idmef_file_t *file
</FUNCTION>
<FUNCTION>
<NAME>idmef_file_destroy</NAME>
<RETURNS>void </RETURNS>
idmef_file_t *ptr
</FUNCTION>
<FUNCTION>
<NAME>idmef_file_get_ident</NAME>
<RETURNS>requiem_string_t *</RETURNS>
idmef_file_t *ptr
</FUNCTION>
<FUNCTION>
<NAME>idmef_file_set_ident</NAME>
<RETURNS>void </RETURNS>
idmef_file_t *ptr, requiem_string_t *ident
</FUNCTION>
<FUNCTION>
<NAME>idmef_file_new_ident</NAME>
<RETURNS>int </RETURNS>
idmef_file_t *ptr, requiem_string_t **ret
</FUNCTION>
<FUNCTION>
<NAME>idmef_file_get_name</NAME>
<RETURNS>requiem_string_t *</RETURNS>
idmef_file_t *ptr
</FUNCTION>
<FUNCTION>
<NAME>idmef_file_set_name</NAME>
<RETURNS>void </RETURNS>
idmef_file_t *ptr, requiem_string_t *name
</FUNCTION>
<FUNCTION>
<NAME>idmef_file_new_name</NAME>
<RETURNS>int </RETURNS>
idmef_file_t *ptr, requiem_string_t **ret
</FUNCTION>
<FUNCTION>
<NAME>idmef_file_get_path</NAME>
<RETURNS>requiem_string_t *</RETURNS>
idmef_file_t *ptr
</FUNCTION>
<FUNCTION>
<NAME>idmef_file_set_path</NAME>
<RETURNS>void </RETURNS>
idmef_file_t *ptr, requiem_string_t *path
</FUNCTION>
<FUNCTION>
<NAME>idmef_file_new_path</NAME>
<RETURNS>int </RETURNS>
idmef_file_t *ptr, requiem_string_t **ret
</FUNCTION>
<FUNCTION>
<NAME>idmef_file_get_create_time</NAME>
<RETURNS>idmef_time_t *</RETURNS>
idmef_file_t *ptr
</FUNCTION>
<FUNCTION>
<NAME>idmef_file_set_create_time</NAME>
<RETURNS>void </RETURNS>
idmef_file_t *ptr, idmef_time_t *create_time
</FUNCTION>
<FUNCTION>
<NAME>idmef_file_new_create_time</NAME>
<RETURNS>int </RETURNS>
idmef_file_t *ptr, idmef_time_t **ret
</FUNCTION>
<FUNCTION>
<NAME>idmef_file_get_modify_time</NAME>
<RETURNS>idmef_time_t *</RETURNS>
idmef_file_t *ptr
</FUNCTION>
<FUNCTION>
<NAME>idmef_file_set_modify_time</NAME>
<RETURNS>void </RETURNS>
idmef_file_t *ptr, idmef_time_t *modify_time
</FUNCTION>
<FUNCTION>
<NAME>idmef_file_new_modify_time</NAME>
<RETURNS>int </RETURNS>
idmef_file_t *ptr, idmef_time_t **ret
</FUNCTION>
<FUNCTION>
<NAME>idmef_file_get_access_time</NAME>
<RETURNS>idmef_time_t *</RETURNS>
idmef_file_t *ptr
</FUNCTION>
<FUNCTION>
<NAME>idmef_file_set_access_time</NAME>
<RETURNS>void </RETURNS>
idmef_file_t *ptr, idmef_time_t *access_time
</FUNCTION>
<FUNCTION>
<NAME>idmef_file_new_access_time</NAME>
<RETURNS>int </RETURNS>
idmef_file_t *ptr, idmef_time_t **ret
</FUNCTION>
<FUNCTION>
<NAME>idmef_file_unset_data_size</NAME>
<RETURNS>void </RETURNS>
idmef_file_t *ptr
</FUNCTION>
<FUNCTION>
<NAME>idmef_file_get_data_size</NAME>
<RETURNS>uint64_t *</RETURNS>
idmef_file_t *ptr
</FUNCTION>
<FUNCTION>
<NAME>idmef_file_set_data_size</NAME>
<RETURNS>void </RETURNS>
idmef_file_t *ptr, uint64_t data_size
</FUNCTION>
<FUNCTION>
<NAME>idmef_file_new_data_size</NAME>
<RETURNS>int </RETURNS>
idmef_file_t *ptr, uint64_t **ret
</FUNCTION>
<FUNCTION>
<NAME>idmef_file_unset_disk_size</NAME>
<RETURNS>void </RETURNS>
idmef_file_t *ptr
</FUNCTION>
<FUNCTION>
<NAME>idmef_file_get_disk_size</NAME>
<RETURNS>uint64_t *</RETURNS>
idmef_file_t *ptr
</FUNCTION>
<FUNCTION>
<NAME>idmef_file_set_disk_size</NAME>
<RETURNS>void </RETURNS>
idmef_file_t *ptr, uint64_t disk_size
</FUNCTION>
<FUNCTION>
<NAME>idmef_file_new_disk_size</NAME>
<RETURNS>int </RETURNS>
idmef_file_t *ptr, uint64_t **ret
</FUNCTION>
<FUNCTION>
<NAME>idmef_file_get_next_file_access</NAME>
<RETURNS>idmef_file_access_t *</RETURNS>
idmef_file_t *file, idmef_file_access_t *file_access_cur
</FUNCTION>
<FUNCTION>
<NAME>idmef_file_set_file_access</NAME>
<RETURNS>void </RETURNS>
idmef_file_t *ptr, idmef_file_access_t *object, int pos
</FUNCTION>
<FUNCTION>
<NAME>idmef_file_new_file_access</NAME>
<RETURNS>int </RETURNS>
idmef_file_t *ptr, idmef_file_access_t **ret, int pos
</FUNCTION>
<FUNCTION>
<NAME>idmef_file_get_next_linkage</NAME>
<RETURNS>idmef_linkage_t *</RETURNS>
idmef_file_t *file, idmef_linkage_t *linkage_cur
</FUNCTION>
<FUNCTION>
<NAME>idmef_file_set_linkage</NAME>
<RETURNS>void </RETURNS>
idmef_file_t *ptr, idmef_linkage_t *object, int pos
</FUNCTION>
<FUNCTION>
<NAME>idmef_file_new_linkage</NAME>
<RETURNS>int </RETURNS>
idmef_file_t *ptr, idmef_linkage_t **ret, int pos
</FUNCTION>
<FUNCTION>
<NAME>idmef_file_get_inode</NAME>
<RETURNS>idmef_inode_t *</RETURNS>
idmef_file_t *ptr
</FUNCTION>
<FUNCTION>
<NAME>idmef_file_set_inode</NAME>
<RETURNS>void </RETURNS>
idmef_file_t *ptr, idmef_inode_t *inode
</FUNCTION>
<FUNCTION>
<NAME>idmef_file_new_inode</NAME>
<RETURNS>int </RETURNS>
idmef_file_t *ptr, idmef_inode_t **ret
</FUNCTION>
<FUNCTION>
<NAME>idmef_file_get_next_checksum</NAME>
<RETURNS>idmef_checksum_t *</RETURNS>
idmef_file_t *file, idmef_checksum_t *checksum_cur
</FUNCTION>
<FUNCTION>
<NAME>idmef_file_set_checksum</NAME>
<RETURNS>void </RETURNS>
idmef_file_t *ptr, idmef_checksum_t *object, int pos
</FUNCTION>
<FUNCTION>
<NAME>idmef_file_new_checksum</NAME>
<RETURNS>int </RETURNS>
idmef_file_t *ptr, idmef_checksum_t **ret, int pos
</FUNCTION>
<FUNCTION>
<NAME>idmef_file_get_category</NAME>
<RETURNS>idmef_file_category_t </RETURNS>
idmef_file_t *ptr
</FUNCTION>
<FUNCTION>
<NAME>idmef_file_set_category</NAME>
<RETURNS>void </RETURNS>
idmef_file_t *ptr, idmef_file_category_t category
</FUNCTION>
<FUNCTION>
<NAME>idmef_file_new_category</NAME>
<RETURNS>int </RETURNS>
idmef_file_t *ptr, idmef_file_category_t **ret
</FUNCTION>
<FUNCTION>
<NAME>idmef_file_unset_fstype</NAME>
<RETURNS>void </RETURNS>
idmef_file_t *ptr
</FUNCTION>
<FUNCTION>
<NAME>idmef_file_get_fstype</NAME>
<RETURNS>idmef_file_fstype_t *</RETURNS>
idmef_file_t *ptr
</FUNCTION>
<FUNCTION>
<NAME>idmef_file_set_fstype</NAME>
<RETURNS>void </RETURNS>
idmef_file_t *ptr, idmef_file_fstype_t fstype
</FUNCTION>
<FUNCTION>
<NAME>idmef_file_new_fstype</NAME>
<RETURNS>int </RETURNS>
idmef_file_t *ptr, idmef_file_fstype_t **ret
</FUNCTION>
<FUNCTION>
<NAME>idmef_file_get_file_type</NAME>
<RETURNS>requiem_string_t *</RETURNS>
idmef_file_t *ptr
</FUNCTION>
<FUNCTION>
<NAME>idmef_file_set_file_type</NAME>
<RETURNS>void </RETURNS>
idmef_file_t *ptr, requiem_string_t *file_type
</FUNCTION>
<FUNCTION>
<NAME>idmef_file_new_file_type</NAME>
<RETURNS>int </RETURNS>
idmef_file_t *ptr, requiem_string_t **ret
</FUNCTION>
<ENUM>
<NAME>idmef_linkage_category_t</NAME>
typedef enum {
        IDMEF_LINKAGE_CATEGORY_ERROR = -1,
        IDMEF_LINKAGE_CATEGORY_HARD_LINK = 1,
        IDMEF_LINKAGE_CATEGORY_MOUNT_POINT = 2,
        IDMEF_LINKAGE_CATEGORY_REPARSE_POINT = 3,
        IDMEF_LINKAGE_CATEGORY_SHORTCUT = 4,
        IDMEF_LINKAGE_CATEGORY_STREAM = 5,
        IDMEF_LINKAGE_CATEGORY_SYMBOLIC_LINK = 6
} idmef_linkage_category_t;
</ENUM>
<FUNCTION>
<NAME>idmef_linkage_category_to_numeric</NAME>
<RETURNS>idmef_linkage_category_t </RETURNS>
const char *name
</FUNCTION>
<FUNCTION>
<NAME>idmef_linkage_category_to_string</NAME>
<RETURNS>const char *</RETURNS>
idmef_linkage_category_t val
</FUNCTION>
<FUNCTION>
<NAME>idmef_linkage_new</NAME>
<RETURNS>int </RETURNS>
idmef_linkage_t **ret
</FUNCTION>
<FUNCTION>
<NAME>idmef_linkage_copy</NAME>
<RETURNS>int </RETURNS>
const idmef_linkage_t *src, idmef_linkage_t *dst
</FUNCTION>
<FUNCTION>
<NAME>idmef_linkage_clone</NAME>
<RETURNS>int </RETURNS>
idmef_linkage_t *src, idmef_linkage_t **dst
</FUNCTION>
<FUNCTION>
<NAME>idmef_linkage_compare</NAME>
<RETURNS>int </RETURNS>
const idmef_linkage_t *obj1, const idmef_linkage_t *obj2
</FUNCTION>
<FUNCTION>
<NAME>idmef_linkage_ref</NAME>
<RETURNS>idmef_linkage_t *</RETURNS>
idmef_linkage_t *linkage
</FUNCTION>
<FUNCTION>
<NAME>idmef_linkage_destroy</NAME>
<RETURNS>void </RETURNS>
idmef_linkage_t *ptr
</FUNCTION>
<FUNCTION>
<NAME>idmef_linkage_get_category</NAME>
<RETURNS>idmef_linkage_category_t </RETURNS>
idmef_linkage_t *ptr
</FUNCTION>
<FUNCTION>
<NAME>idmef_linkage_set_category</NAME>
<RETURNS>void </RETURNS>
idmef_linkage_t *ptr, idmef_linkage_category_t category
</FUNCTION>
<FUNCTION>
<NAME>idmef_linkage_new_category</NAME>
<RETURNS>int </RETURNS>
idmef_linkage_t *ptr, idmef_linkage_category_t **ret
</FUNCTION>
<FUNCTION>
<NAME>idmef_linkage_get_name</NAME>
<RETURNS>requiem_string_t *</RETURNS>
idmef_linkage_t *ptr
</FUNCTION>
<FUNCTION>
<NAME>idmef_linkage_set_name</NAME>
<RETURNS>void </RETURNS>
idmef_linkage_t *ptr, requiem_string_t *name
</FUNCTION>
<FUNCTION>
<NAME>idmef_linkage_new_name</NAME>
<RETURNS>int </RETURNS>
idmef_linkage_t *ptr, requiem_string_t **ret
</FUNCTION>
<FUNCTION>
<NAME>idmef_linkage_get_path</NAME>
<RETURNS>requiem_string_t *</RETURNS>
idmef_linkage_t *ptr
</FUNCTION>
<FUNCTION>
<NAME>idmef_linkage_set_path</NAME>
<RETURNS>void </RETURNS>
idmef_linkage_t *ptr, requiem_string_t *path
</FUNCTION>
<FUNCTION>
<NAME>idmef_linkage_new_path</NAME>
<RETURNS>int </RETURNS>
idmef_linkage_t *ptr, requiem_string_t **ret
</FUNCTION>
<FUNCTION>
<NAME>idmef_linkage_get_file</NAME>
<RETURNS>idmef_file_t *</RETURNS>
idmef_linkage_t *ptr
</FUNCTION>
<FUNCTION>
<NAME>idmef_linkage_set_file</NAME>
<RETURNS>void </RETURNS>
idmef_linkage_t *ptr, idmef_file_t *file
</FUNCTION>
<FUNCTION>
<NAME>idmef_linkage_new_file</NAME>
<RETURNS>int </RETURNS>
idmef_linkage_t *ptr, idmef_file_t **ret
</FUNCTION>
<ENUM>
<NAME>idmef_target_decoy_t</NAME>
typedef enum {
        IDMEF_TARGET_DECOY_ERROR = -1,
        IDMEF_TARGET_DECOY_UNKNOWN = 0,
        IDMEF_TARGET_DECOY_YES = 1,
        IDMEF_TARGET_DECOY_NO = 2
} idmef_target_decoy_t;
</ENUM>
<FUNCTION>
<NAME>idmef_target_decoy_to_numeric</NAME>
<RETURNS>idmef_target_decoy_t </RETURNS>
const char *name
</FUNCTION>
<FUNCTION>
<NAME>idmef_target_decoy_to_string</NAME>
<RETURNS>const char *</RETURNS>
idmef_target_decoy_t val
</FUNCTION>
<TYPEDEF>
<NAME>idmef_target_t</NAME>
typedef struct idmef_target idmef_target_t;
</TYPEDEF>
<FUNCTION>
<NAME>idmef_target_new</NAME>
<RETURNS>int </RETURNS>
idmef_target_t **ret
</FUNCTION>
<FUNCTION>
<NAME>idmef_target_copy</NAME>
<RETURNS>int </RETURNS>
const idmef_target_t *src, idmef_target_t *dst
</FUNCTION>
<FUNCTION>
<NAME>idmef_target_clone</NAME>
<RETURNS>int </RETURNS>
idmef_target_t *src, idmef_target_t **dst
</FUNCTION>
<FUNCTION>
<NAME>idmef_target_compare</NAME>
<RETURNS>int </RETURNS>
const idmef_target_t *obj1, const idmef_target_t *obj2
</FUNCTION>
<FUNCTION>
<NAME>idmef_target_ref</NAME>
<RETURNS>idmef_target_t *</RETURNS>
idmef_target_t *target
</FUNCTION>
<FUNCTION>
<NAME>idmef_target_destroy</NAME>
<RETURNS>void </RETURNS>
idmef_target_t *ptr
</FUNCTION>
<FUNCTION>
<NAME>idmef_target_get_ident</NAME>
<RETURNS>requiem_string_t *</RETURNS>
idmef_target_t *ptr
</FUNCTION>
<FUNCTION>
<NAME>idmef_target_set_ident</NAME>
<RETURNS>void </RETURNS>
idmef_target_t *ptr, requiem_string_t *ident
</FUNCTION>
<FUNCTION>
<NAME>idmef_target_new_ident</NAME>
<RETURNS>int </RETURNS>
idmef_target_t *ptr, requiem_string_t **ret
</FUNCTION>
<FUNCTION>
<NAME>idmef_target_get_decoy</NAME>
<RETURNS>idmef_target_decoy_t </RETURNS>
idmef_target_t *ptr
</FUNCTION>
<FUNCTION>
<NAME>idmef_target_set_decoy</NAME>
<RETURNS>void </RETURNS>
idmef_target_t *ptr, idmef_target_decoy_t decoy
</FUNCTION>
<FUNCTION>
<NAME>idmef_target_new_decoy</NAME>
<RETURNS>int </RETURNS>
idmef_target_t *ptr, idmef_target_decoy_t **ret
</FUNCTION>
<FUNCTION>
<NAME>idmef_target_get_interface</NAME>
<RETURNS>requiem_string_t *</RETURNS>
idmef_target_t *ptr
</FUNCTION>
<FUNCTION>
<NAME>idmef_target_set_interface</NAME>
<RETURNS>void </RETURNS>
idmef_target_t *ptr, requiem_string_t *interface
</FUNCTION>
<FUNCTION>
<NAME>idmef_target_new_interface</NAME>
<RETURNS>int </RETURNS>
idmef_target_t *ptr, requiem_string_t **ret
</FUNCTION>
<FUNCTION>
<NAME>idmef_target_get_node</NAME>
<RETURNS>idmef_node_t *</RETURNS>
idmef_target_t *ptr
</FUNCTION>
<FUNCTION>
<NAME>idmef_target_set_node</NAME>
<RETURNS>void </RETURNS>
idmef_target_t *ptr, idmef_node_t *node
</FUNCTION>
<FUNCTION>
<NAME>idmef_target_new_node</NAME>
<RETURNS>int </RETURNS>
idmef_target_t *ptr, idmef_node_t **ret
</FUNCTION>
<FUNCTION>
<NAME>idmef_target_get_user</NAME>
<RETURNS>idmef_user_t *</RETURNS>
idmef_target_t *ptr
</FUNCTION>
<FUNCTION>
<NAME>idmef_target_set_user</NAME>
<RETURNS>void </RETURNS>
idmef_target_t *ptr, idmef_user_t *user
</FUNCTION>
<FUNCTION>
<NAME>idmef_target_new_user</NAME>
<RETURNS>int </RETURNS>
idmef_target_t *ptr, idmef_user_t **ret
</FUNCTION>
<FUNCTION>
<NAME>idmef_target_get_process</NAME>
<RETURNS>idmef_process_t *</RETURNS>
idmef_target_t *ptr
</FUNCTION>
<FUNCTION>
<NAME>idmef_target_set_process</NAME>
<RETURNS>void </RETURNS>
idmef_target_t *ptr, idmef_process_t *process
</FUNCTION>
<FUNCTION>
<NAME>idmef_target_new_process</NAME>
<RETURNS>int </RETURNS>
idmef_target_t *ptr, idmef_process_t **ret
</FUNCTION>
<FUNCTION>
<NAME>idmef_target_get_service</NAME>
<RETURNS>idmef_service_t *</RETURNS>
idmef_target_t *ptr
</FUNCTION>
<FUNCTION>
<NAME>idmef_target_set_service</NAME>
<RETURNS>void </RETURNS>
idmef_target_t *ptr, idmef_service_t *service
</FUNCTION>
<FUNCTION>
<NAME>idmef_target_new_service</NAME>
<RETURNS>int </RETURNS>
idmef_target_t *ptr, idmef_service_t **ret
</FUNCTION>
<FUNCTION>
<NAME>idmef_target_get_next_file</NAME>
<RETURNS>idmef_file_t *</RETURNS>
idmef_target_t *target, idmef_file_t *file_cur
</FUNCTION>
<FUNCTION>
<NAME>idmef_target_set_file</NAME>
<RETURNS>void </RETURNS>
idmef_target_t *ptr, idmef_file_t *object, int pos
</FUNCTION>
<FUNCTION>
<NAME>idmef_target_new_file</NAME>
<RETURNS>int </RETURNS>
idmef_target_t *ptr, idmef_file_t **ret, int pos
</FUNCTION>
<TYPEDEF>
<NAME>idmef_analyzer_t</NAME>
typedef struct idmef_analyzer idmef_analyzer_t;
</TYPEDEF>
<FUNCTION>
<NAME>idmef_analyzer_new</NAME>
<RETURNS>int </RETURNS>
idmef_analyzer_t **ret
</FUNCTION>
<FUNCTION>
<NAME>idmef_analyzer_copy</NAME>
<RETURNS>int </RETURNS>
const idmef_analyzer_t *src, idmef_analyzer_t *dst
</FUNCTION>
<FUNCTION>
<NAME>idmef_analyzer_clone</NAME>
<RETURNS>int </RETURNS>
idmef_analyzer_t *src, idmef_analyzer_t **dst
</FUNCTION>
<FUNCTION>
<NAME>idmef_analyzer_compare</NAME>
<RETURNS>int </RETURNS>
const idmef_analyzer_t *obj1, const idmef_analyzer_t *obj2
</FUNCTION>
<FUNCTION>
<NAME>idmef_analyzer_ref</NAME>
<RETURNS>idmef_analyzer_t *</RETURNS>
idmef_analyzer_t *analyzer
</FUNCTION>
<FUNCTION>
<NAME>idmef_analyzer_destroy</NAME>
<RETURNS>void </RETURNS>
idmef_analyzer_t *ptr
</FUNCTION>
<FUNCTION>
<NAME>idmef_analyzer_get_analyzerid</NAME>
<RETURNS>requiem_string_t *</RETURNS>
idmef_analyzer_t *ptr
</FUNCTION>
<FUNCTION>
<NAME>idmef_analyzer_set_analyzerid</NAME>
<RETURNS>void </RETURNS>
idmef_analyzer_t *ptr, requiem_string_t *analyzerid
</FUNCTION>
<FUNCTION>
<NAME>idmef_analyzer_new_analyzerid</NAME>
<RETURNS>int </RETURNS>
idmef_analyzer_t *ptr, requiem_string_t **ret
</FUNCTION>
<FUNCTION>
<NAME>idmef_analyzer_get_name</NAME>
<RETURNS>requiem_string_t *</RETURNS>
idmef_analyzer_t *ptr
</FUNCTION>
<FUNCTION>
<NAME>idmef_analyzer_set_name</NAME>
<RETURNS>void </RETURNS>
idmef_analyzer_t *ptr, requiem_string_t *name
</FUNCTION>
<FUNCTION>
<NAME>idmef_analyzer_new_name</NAME>
<RETURNS>int </RETURNS>
idmef_analyzer_t *ptr, requiem_string_t **ret
</FUNCTION>
<FUNCTION>
<NAME>idmef_analyzer_get_manufacturer</NAME>
<RETURNS>requiem_string_t *</RETURNS>
idmef_analyzer_t *ptr
</FUNCTION>
<FUNCTION>
<NAME>idmef_analyzer_set_manufacturer</NAME>
<RETURNS>void </RETURNS>
idmef_analyzer_t *ptr, requiem_string_t *manufacturer
</FUNCTION>
<FUNCTION>
<NAME>idmef_analyzer_new_manufacturer</NAME>
<RETURNS>int </RETURNS>
idmef_analyzer_t *ptr, requiem_string_t **ret
</FUNCTION>
<FUNCTION>
<NAME>idmef_analyzer_get_model</NAME>
<RETURNS>requiem_string_t *</RETURNS>
idmef_analyzer_t *ptr
</FUNCTION>
<FUNCTION>
<NAME>idmef_analyzer_set_model</NAME>
<RETURNS>void </RETURNS>
idmef_analyzer_t *ptr, requiem_string_t *model
</FUNCTION>
<FUNCTION>
<NAME>idmef_analyzer_new_model</NAME>
<RETURNS>int </RETURNS>
idmef_analyzer_t *ptr, requiem_string_t **ret
</FUNCTION>
<FUNCTION>
<NAME>idmef_analyzer_get_version</NAME>
<RETURNS>requiem_string_t *</RETURNS>
idmef_analyzer_t *ptr
</FUNCTION>
<FUNCTION>
<NAME>idmef_analyzer_set_version</NAME>
<RETURNS>void </RETURNS>
idmef_analyzer_t *ptr, requiem_string_t *version
</FUNCTION>
<FUNCTION>
<NAME>idmef_analyzer_new_version</NAME>
<RETURNS>int </RETURNS>
idmef_analyzer_t *ptr, requiem_string_t **ret
</FUNCTION>
<FUNCTION>
<NAME>idmef_analyzer_get_class</NAME>
<RETURNS>requiem_string_t *</RETURNS>
idmef_analyzer_t *ptr
</FUNCTION>
<FUNCTION>
<NAME>idmef_analyzer_set_class</NAME>
<RETURNS>void </RETURNS>
idmef_analyzer_t *ptr, requiem_string_t *class_str
</FUNCTION>
<FUNCTION>
<NAME>idmef_analyzer_new_class</NAME>
<RETURNS>int </RETURNS>
idmef_analyzer_t *ptr, requiem_string_t **ret
</FUNCTION>
<FUNCTION>
<NAME>idmef_analyzer_get_ostype</NAME>
<RETURNS>requiem_string_t *</RETURNS>
idmef_analyzer_t *ptr
</FUNCTION>
<FUNCTION>
<NAME>idmef_analyzer_set_ostype</NAME>
<RETURNS>void </RETURNS>
idmef_analyzer_t *ptr, requiem_string_t *ostype
</FUNCTION>
<FUNCTION>
<NAME>idmef_analyzer_new_ostype</NAME>
<RETURNS>int </RETURNS>
idmef_analyzer_t *ptr, requiem_string_t **ret
</FUNCTION>
<FUNCTION>
<NAME>idmef_analyzer_get_osversion</NAME>
<RETURNS>requiem_string_t *</RETURNS>
idmef_analyzer_t *ptr
</FUNCTION>
<FUNCTION>
<NAME>idmef_analyzer_set_osversion</NAME>
<RETURNS>void </RETURNS>
idmef_analyzer_t *ptr, requiem_string_t *osversion
</FUNCTION>
<FUNCTION>
<NAME>idmef_analyzer_new_osversion</NAME>
<RETURNS>int </RETURNS>
idmef_analyzer_t *ptr, requiem_string_t **ret
</FUNCTION>
<FUNCTION>
<NAME>idmef_analyzer_get_node</NAME>
<RETURNS>idmef_node_t *</RETURNS>
idmef_analyzer_t *ptr
</FUNCTION>
<FUNCTION>
<NAME>idmef_analyzer_set_node</NAME>
<RETURNS>void </RETURNS>
idmef_analyzer_t *ptr, idmef_node_t *node
</FUNCTION>
<FUNCTION>
<NAME>idmef_analyzer_new_node</NAME>
<RETURNS>int </RETURNS>
idmef_analyzer_t *ptr, idmef_node_t **ret
</FUNCTION>
<FUNCTION>
<NAME>idmef_analyzer_get_process</NAME>
<RETURNS>idmef_process_t *</RETURNS>
idmef_analyzer_t *ptr
</FUNCTION>
<FUNCTION>
<NAME>idmef_analyzer_set_process</NAME>
<RETURNS>void </RETURNS>
idmef_analyzer_t *ptr, idmef_process_t *process
</FUNCTION>
<FUNCTION>
<NAME>idmef_analyzer_new_process</NAME>
<RETURNS>int </RETURNS>
idmef_analyzer_t *ptr, idmef_process_t **ret
</FUNCTION>
<TYPEDEF>
<NAME>idmef_alertident_t</NAME>
typedef struct idmef_alertident idmef_alertident_t;
</TYPEDEF>
<FUNCTION>
<NAME>idmef_alertident_new</NAME>
<RETURNS>int </RETURNS>
idmef_alertident_t **ret
</FUNCTION>
<FUNCTION>
<NAME>idmef_alertident_copy</NAME>
<RETURNS>int </RETURNS>
const idmef_alertident_t *src, idmef_alertident_t *dst
</FUNCTION>
<FUNCTION>
<NAME>idmef_alertident_clone</NAME>
<RETURNS>int </RETURNS>
idmef_alertident_t *src, idmef_alertident_t **dst
</FUNCTION>
<FUNCTION>
<NAME>idmef_alertident_compare</NAME>
<RETURNS>int </RETURNS>
const idmef_alertident_t *obj1, const idmef_alertident_t *obj2
</FUNCTION>
<FUNCTION>
<NAME>idmef_alertident_ref</NAME>
<RETURNS>idmef_alertident_t *</RETURNS>
idmef_alertident_t *alertident
</FUNCTION>
<FUNCTION>
<NAME>idmef_alertident_destroy</NAME>
<RETURNS>void </RETURNS>
idmef_alertident_t *ptr
</FUNCTION>
<FUNCTION>
<NAME>idmef_alertident_get_alertident</NAME>
<RETURNS>requiem_string_t *</RETURNS>
idmef_alertident_t *ptr
</FUNCTION>
<FUNCTION>
<NAME>idmef_alertident_set_alertident</NAME>
<RETURNS>void </RETURNS>
idmef_alertident_t *ptr, requiem_string_t *alertident
</FUNCTION>
<FUNCTION>
<NAME>idmef_alertident_new_alertident</NAME>
<RETURNS>int </RETURNS>
idmef_alertident_t *ptr, requiem_string_t **ret
</FUNCTION>
<FUNCTION>
<NAME>idmef_alertident_get_analyzerid</NAME>
<RETURNS>requiem_string_t *</RETURNS>
idmef_alertident_t *ptr
</FUNCTION>
<FUNCTION>
<NAME>idmef_alertident_set_analyzerid</NAME>
<RETURNS>void </RETURNS>
idmef_alertident_t *ptr, requiem_string_t *analyzerid
</FUNCTION>
<FUNCTION>
<NAME>idmef_alertident_new_analyzerid</NAME>
<RETURNS>int </RETURNS>
idmef_alertident_t *ptr, requiem_string_t **ret
</FUNCTION>
<ENUM>
<NAME>idmef_impact_severity_t</NAME>
typedef enum {
        IDMEF_IMPACT_SEVERITY_ERROR = -1,
        IDMEF_IMPACT_SEVERITY_INFO = 1,
        IDMEF_IMPACT_SEVERITY_LOW = 2,
        IDMEF_IMPACT_SEVERITY_MEDIUM = 3,
        IDMEF_IMPACT_SEVERITY_HIGH = 4
} idmef_impact_severity_t;
</ENUM>
<FUNCTION>
<NAME>idmef_impact_severity_to_numeric</NAME>
<RETURNS>idmef_impact_severity_t </RETURNS>
const char *name
</FUNCTION>
<FUNCTION>
<NAME>idmef_impact_severity_to_string</NAME>
<RETURNS>const char *</RETURNS>
idmef_impact_severity_t val
</FUNCTION>
<ENUM>
<NAME>idmef_impact_completion_t</NAME>
typedef enum {
        IDMEF_IMPACT_COMPLETION_ERROR = -1,
        IDMEF_IMPACT_COMPLETION_FAILED = 1,
        IDMEF_IMPACT_COMPLETION_SUCCEEDED = 2
} idmef_impact_completion_t;
</ENUM>
<FUNCTION>
<NAME>idmef_impact_completion_to_numeric</NAME>
<RETURNS>idmef_impact_completion_t </RETURNS>
const char *name
</FUNCTION>
<FUNCTION>
<NAME>idmef_impact_completion_to_string</NAME>
<RETURNS>const char *</RETURNS>
idmef_impact_completion_t val
</FUNCTION>
<ENUM>
<NAME>idmef_impact_type_t</NAME>
typedef enum {
        IDMEF_IMPACT_TYPE_ERROR = -1,
        IDMEF_IMPACT_TYPE_OTHER = 0,
        IDMEF_IMPACT_TYPE_ADMIN = 1,
        IDMEF_IMPACT_TYPE_DOS = 2,
        IDMEF_IMPACT_TYPE_FILE = 3,
        IDMEF_IMPACT_TYPE_RECON = 4,
        IDMEF_IMPACT_TYPE_USER = 5
} idmef_impact_type_t;
</ENUM>
<FUNCTION>
<NAME>idmef_impact_type_to_numeric</NAME>
<RETURNS>idmef_impact_type_t </RETURNS>
const char *name
</FUNCTION>
<FUNCTION>
<NAME>idmef_impact_type_to_string</NAME>
<RETURNS>const char *</RETURNS>
idmef_impact_type_t val
</FUNCTION>
<TYPEDEF>
<NAME>idmef_impact_t</NAME>
typedef struct idmef_impact idmef_impact_t;
</TYPEDEF>
<FUNCTION>
<NAME>idmef_impact_new</NAME>
<RETURNS>int </RETURNS>
idmef_impact_t **ret
</FUNCTION>
<FUNCTION>
<NAME>idmef_impact_copy</NAME>
<RETURNS>int </RETURNS>
const idmef_impact_t *src, idmef_impact_t *dst
</FUNCTION>
<FUNCTION>
<NAME>idmef_impact_clone</NAME>
<RETURNS>int </RETURNS>
idmef_impact_t *src, idmef_impact_t **dst
</FUNCTION>
<FUNCTION>
<NAME>idmef_impact_compare</NAME>
<RETURNS>int </RETURNS>
const idmef_impact_t *obj1, const idmef_impact_t *obj2
</FUNCTION>
<FUNCTION>
<NAME>idmef_impact_ref</NAME>
<RETURNS>idmef_impact_t *</RETURNS>
idmef_impact_t *impact
</FUNCTION>
<FUNCTION>
<NAME>idmef_impact_destroy</NAME>
<RETURNS>void </RETURNS>
idmef_impact_t *ptr
</FUNCTION>
<FUNCTION>
<NAME>idmef_impact_unset_severity</NAME>
<RETURNS>void </RETURNS>
idmef_impact_t *ptr
</FUNCTION>
<FUNCTION>
<NAME>idmef_impact_get_severity</NAME>
<RETURNS>idmef_impact_severity_t *</RETURNS>
idmef_impact_t *ptr
</FUNCTION>
<FUNCTION>
<NAME>idmef_impact_set_severity</NAME>
<RETURNS>void </RETURNS>
idmef_impact_t *ptr, idmef_impact_severity_t severity
</FUNCTION>
<FUNCTION>
<NAME>idmef_impact_new_severity</NAME>
<RETURNS>int </RETURNS>
idmef_impact_t *ptr, idmef_impact_severity_t **ret
</FUNCTION>
<FUNCTION>
<NAME>idmef_impact_unset_completion</NAME>
<RETURNS>void </RETURNS>
idmef_impact_t *ptr
</FUNCTION>
<FUNCTION>
<NAME>idmef_impact_get_completion</NAME>
<RETURNS>idmef_impact_completion_t *</RETURNS>
idmef_impact_t *ptr
</FUNCTION>
<FUNCTION>
<NAME>idmef_impact_set_completion</NAME>
<RETURNS>void </RETURNS>
idmef_impact_t *ptr, idmef_impact_completion_t completion
</FUNCTION>
<FUNCTION>
<NAME>idmef_impact_new_completion</NAME>
<RETURNS>int </RETURNS>
idmef_impact_t *ptr, idmef_impact_completion_t **ret
</FUNCTION>
<FUNCTION>
<NAME>idmef_impact_get_type</NAME>
<RETURNS>idmef_impact_type_t </RETURNS>
idmef_impact_t *ptr
</FUNCTION>
<FUNCTION>
<NAME>idmef_impact_set_type</NAME>
<RETURNS>void </RETURNS>
idmef_impact_t *ptr, idmef_impact_type_t type
</FUNCTION>
<FUNCTION>
<NAME>idmef_impact_new_type</NAME>
<RETURNS>int </RETURNS>
idmef_impact_t *ptr, idmef_impact_type_t **ret
</FUNCTION>
<FUNCTION>
<NAME>idmef_impact_get_description</NAME>
<RETURNS>requiem_string_t *</RETURNS>
idmef_impact_t *ptr
</FUNCTION>
<FUNCTION>
<NAME>idmef_impact_set_description</NAME>
<RETURNS>void </RETURNS>
idmef_impact_t *ptr, requiem_string_t *description
</FUNCTION>
<FUNCTION>
<NAME>idmef_impact_new_description</NAME>
<RETURNS>int </RETURNS>
idmef_impact_t *ptr, requiem_string_t **ret
</FUNCTION>
<ENUM>
<NAME>idmef_action_category_t</NAME>
typedef enum {
        IDMEF_ACTION_CATEGORY_ERROR = -1,
        IDMEF_ACTION_CATEGORY_OTHER = 0,
        IDMEF_ACTION_CATEGORY_BLOCK_INSTALLED = 1,
        IDMEF_ACTION_CATEGORY_NOTIFICATION_SENT = 2,
        IDMEF_ACTION_CATEGORY_TAKEN_OFFLINE = 3
} idmef_action_category_t;
</ENUM>
<FUNCTION>
<NAME>idmef_action_category_to_numeric</NAME>
<RETURNS>idmef_action_category_t </RETURNS>
const char *name
</FUNCTION>
<FUNCTION>
<NAME>idmef_action_category_to_string</NAME>
<RETURNS>const char *</RETURNS>
idmef_action_category_t val
</FUNCTION>
<TYPEDEF>
<NAME>idmef_action_t</NAME>
typedef struct idmef_action idmef_action_t;
</TYPEDEF>
<FUNCTION>
<NAME>idmef_action_new</NAME>
<RETURNS>int </RETURNS>
idmef_action_t **ret
</FUNCTION>
<FUNCTION>
<NAME>idmef_action_copy</NAME>
<RETURNS>int </RETURNS>
const idmef_action_t *src, idmef_action_t *dst
</FUNCTION>
<FUNCTION>
<NAME>idmef_action_clone</NAME>
<RETURNS>int </RETURNS>
idmef_action_t *src, idmef_action_t **dst
</FUNCTION>
<FUNCTION>
<NAME>idmef_action_compare</NAME>
<RETURNS>int </RETURNS>
const idmef_action_t *obj1, const idmef_action_t *obj2
</FUNCTION>
<FUNCTION>
<NAME>idmef_action_ref</NAME>
<RETURNS>idmef_action_t *</RETURNS>
idmef_action_t *action
</FUNCTION>
<FUNCTION>
<NAME>idmef_action_destroy</NAME>
<RETURNS>void </RETURNS>
idmef_action_t *ptr
</FUNCTION>
<FUNCTION>
<NAME>idmef_action_get_category</NAME>
<RETURNS>idmef_action_category_t </RETURNS>
idmef_action_t *ptr
</FUNCTION>
<FUNCTION>
<NAME>idmef_action_set_category</NAME>
<RETURNS>void </RETURNS>
idmef_action_t *ptr, idmef_action_category_t category
</FUNCTION>
<FUNCTION>
<NAME>idmef_action_new_category</NAME>
<RETURNS>int </RETURNS>
idmef_action_t *ptr, idmef_action_category_t **ret
</FUNCTION>
<FUNCTION>
<NAME>idmef_action_get_description</NAME>
<RETURNS>requiem_string_t *</RETURNS>
idmef_action_t *ptr
</FUNCTION>
<FUNCTION>
<NAME>idmef_action_set_description</NAME>
<RETURNS>void </RETURNS>
idmef_action_t *ptr, requiem_string_t *description
</FUNCTION>
<FUNCTION>
<NAME>idmef_action_new_description</NAME>
<RETURNS>int </RETURNS>
idmef_action_t *ptr, requiem_string_t **ret
</FUNCTION>
<ENUM>
<NAME>idmef_confidence_rating_t</NAME>
typedef enum {
        IDMEF_CONFIDENCE_RATING_ERROR = -1,
        IDMEF_CONFIDENCE_RATING_NUMERIC = 0,
        IDMEF_CONFIDENCE_RATING_LOW = 1,
        IDMEF_CONFIDENCE_RATING_MEDIUM = 2,
        IDMEF_CONFIDENCE_RATING_HIGH = 3
} idmef_confidence_rating_t;
</ENUM>
<FUNCTION>
<NAME>idmef_confidence_rating_to_numeric</NAME>
<RETURNS>idmef_confidence_rating_t </RETURNS>
const char *name
</FUNCTION>
<FUNCTION>
<NAME>idmef_confidence_rating_to_string</NAME>
<RETURNS>const char *</RETURNS>
idmef_confidence_rating_t val
</FUNCTION>
<TYPEDEF>
<NAME>idmef_confidence_t</NAME>
typedef struct idmef_confidence idmef_confidence_t;
</TYPEDEF>
<FUNCTION>
<NAME>idmef_confidence_new</NAME>
<RETURNS>int </RETURNS>
idmef_confidence_t **ret
</FUNCTION>
<FUNCTION>
<NAME>idmef_confidence_copy</NAME>
<RETURNS>int </RETURNS>
const idmef_confidence_t *src, idmef_confidence_t *dst
</FUNCTION>
<FUNCTION>
<NAME>idmef_confidence_clone</NAME>
<RETURNS>int </RETURNS>
idmef_confidence_t *src, idmef_confidence_t **dst
</FUNCTION>
<FUNCTION>
<NAME>idmef_confidence_compare</NAME>
<RETURNS>int </RETURNS>
const idmef_confidence_t *obj1, const idmef_confidence_t *obj2
</FUNCTION>
<FUNCTION>
<NAME>idmef_confidence_ref</NAME>
<RETURNS>idmef_confidence_t *</RETURNS>
idmef_confidence_t *confidence
</FUNCTION>
<FUNCTION>
<NAME>idmef_confidence_destroy</NAME>
<RETURNS>void </RETURNS>
idmef_confidence_t *ptr
</FUNCTION>
<FUNCTION>
<NAME>idmef_confidence_get_rating</NAME>
<RETURNS>idmef_confidence_rating_t </RETURNS>
idmef_confidence_t *ptr
</FUNCTION>
<FUNCTION>
<NAME>idmef_confidence_set_rating</NAME>
<RETURNS>void </RETURNS>
idmef_confidence_t *ptr, idmef_confidence_rating_t rating
</FUNCTION>
<FUNCTION>
<NAME>idmef_confidence_new_rating</NAME>
<RETURNS>int </RETURNS>
idmef_confidence_t *ptr, idmef_confidence_rating_t **ret
</FUNCTION>
<FUNCTION>
<NAME>idmef_confidence_get_confidence</NAME>
<RETURNS>float </RETURNS>
idmef_confidence_t *ptr
</FUNCTION>
<FUNCTION>
<NAME>idmef_confidence_set_confidence</NAME>
<RETURNS>void </RETURNS>
idmef_confidence_t *ptr, float confidence
</FUNCTION>
<FUNCTION>
<NAME>idmef_confidence_new_confidence</NAME>
<RETURNS>int </RETURNS>
idmef_confidence_t *ptr, float **ret
</FUNCTION>
<TYPEDEF>
<NAME>idmef_assessment_t</NAME>
typedef struct idmef_assessment idmef_assessment_t;
</TYPEDEF>
<FUNCTION>
<NAME>idmef_assessment_new</NAME>
<RETURNS>int </RETURNS>
idmef_assessment_t **ret
</FUNCTION>
<FUNCTION>
<NAME>idmef_assessment_copy</NAME>
<RETURNS>int </RETURNS>
const idmef_assessment_t *src, idmef_assessment_t *dst
</FUNCTION>
<FUNCTION>
<NAME>idmef_assessment_clone</NAME>
<RETURNS>int </RETURNS>
idmef_assessment_t *src, idmef_assessment_t **dst
</FUNCTION>
<FUNCTION>
<NAME>idmef_assessment_compare</NAME>
<RETURNS>int </RETURNS>
const idmef_assessment_t *obj1, const idmef_assessment_t *obj2
</FUNCTION>
<FUNCTION>
<NAME>idmef_assessment_ref</NAME>
<RETURNS>idmef_assessment_t *</RETURNS>
idmef_assessment_t *assessment
</FUNCTION>
<FUNCTION>
<NAME>idmef_assessment_destroy</NAME>
<RETURNS>void </RETURNS>
idmef_assessment_t *ptr
</FUNCTION>
<FUNCTION>
<NAME>idmef_assessment_get_impact</NAME>
<RETURNS>idmef_impact_t *</RETURNS>
idmef_assessment_t *ptr
</FUNCTION>
<FUNCTION>
<NAME>idmef_assessment_set_impact</NAME>
<RETURNS>void </RETURNS>
idmef_assessment_t *ptr, idmef_impact_t *impact
</FUNCTION>
<FUNCTION>
<NAME>idmef_assessment_new_impact</NAME>
<RETURNS>int </RETURNS>
idmef_assessment_t *ptr, idmef_impact_t **ret
</FUNCTION>
<FUNCTION>
<NAME>idmef_assessment_get_next_action</NAME>
<RETURNS>idmef_action_t *</RETURNS>
idmef_assessment_t *assessment, idmef_action_t *action_cur
</FUNCTION>
<FUNCTION>
<NAME>idmef_assessment_set_action</NAME>
<RETURNS>void </RETURNS>
idmef_assessment_t *ptr, idmef_action_t *object, int pos
</FUNCTION>
<FUNCTION>
<NAME>idmef_assessment_new_action</NAME>
<RETURNS>int </RETURNS>
idmef_assessment_t *ptr, idmef_action_t **ret, int pos
</FUNCTION>
<FUNCTION>
<NAME>idmef_assessment_get_confidence</NAME>
<RETURNS>idmef_confidence_t *</RETURNS>
idmef_assessment_t *ptr
</FUNCTION>
<FUNCTION>
<NAME>idmef_assessment_set_confidence</NAME>
<RETURNS>void </RETURNS>
idmef_assessment_t *ptr, idmef_confidence_t *confidence
</FUNCTION>
<FUNCTION>
<NAME>idmef_assessment_new_confidence</NAME>
<RETURNS>int </RETURNS>
idmef_assessment_t *ptr, idmef_confidence_t **ret
</FUNCTION>
<TYPEDEF>
<NAME>idmef_tool_alert_t</NAME>
typedef struct idmef_tool_alert idmef_tool_alert_t;
</TYPEDEF>
<FUNCTION>
<NAME>idmef_tool_alert_new</NAME>
<RETURNS>int </RETURNS>
idmef_tool_alert_t **ret
</FUNCTION>
<FUNCTION>
<NAME>idmef_tool_alert_copy</NAME>
<RETURNS>int </RETURNS>
const idmef_tool_alert_t *src, idmef_tool_alert_t *dst
</FUNCTION>
<FUNCTION>
<NAME>idmef_tool_alert_clone</NAME>
<RETURNS>int </RETURNS>
idmef_tool_alert_t *src, idmef_tool_alert_t **dst
</FUNCTION>
<FUNCTION>
<NAME>idmef_tool_alert_compare</NAME>
<RETURNS>int </RETURNS>
const idmef_tool_alert_t *obj1, const idmef_tool_alert_t *obj2
</FUNCTION>
<FUNCTION>
<NAME>idmef_tool_alert_ref</NAME>
<RETURNS>idmef_tool_alert_t *</RETURNS>
idmef_tool_alert_t *tool_alert
</FUNCTION>
<FUNCTION>
<NAME>idmef_tool_alert_destroy</NAME>
<RETURNS>void </RETURNS>
idmef_tool_alert_t *ptr
</FUNCTION>
<FUNCTION>
<NAME>idmef_tool_alert_get_name</NAME>
<RETURNS>requiem_string_t *</RETURNS>
idmef_tool_alert_t *ptr
</FUNCTION>
<FUNCTION>
<NAME>idmef_tool_alert_set_name</NAME>
<RETURNS>void </RETURNS>
idmef_tool_alert_t *ptr, requiem_string_t *name
</FUNCTION>
<FUNCTION>
<NAME>idmef_tool_alert_new_name</NAME>
<RETURNS>int </RETURNS>
idmef_tool_alert_t *ptr, requiem_string_t **ret
</FUNCTION>
<FUNCTION>
<NAME>idmef_tool_alert_get_command</NAME>
<RETURNS>requiem_string_t *</RETURNS>
idmef_tool_alert_t *ptr
</FUNCTION>
<FUNCTION>
<NAME>idmef_tool_alert_set_command</NAME>
<RETURNS>void </RETURNS>
idmef_tool_alert_t *ptr, requiem_string_t *command
</FUNCTION>
<FUNCTION>
<NAME>idmef_tool_alert_new_command</NAME>
<RETURNS>int </RETURNS>
idmef_tool_alert_t *ptr, requiem_string_t **ret
</FUNCTION>
<FUNCTION>
<NAME>idmef_tool_alert_get_next_alertident</NAME>
<RETURNS>idmef_alertident_t *</RETURNS>
idmef_tool_alert_t *tool_alert, idmef_alertident_t *alertident_cur
</FUNCTION>
<FUNCTION>
<NAME>idmef_tool_alert_set_alertident</NAME>
<RETURNS>void </RETURNS>
idmef_tool_alert_t *ptr, idmef_alertident_t *object, int pos
</FUNCTION>
<FUNCTION>
<NAME>idmef_tool_alert_new_alertident</NAME>
<RETURNS>int </RETURNS>
idmef_tool_alert_t *ptr, idmef_alertident_t **ret, int pos
</FUNCTION>
<TYPEDEF>
<NAME>idmef_correlation_alert_t</NAME>
typedef struct idmef_correlation_alert idmef_correlation_alert_t;
</TYPEDEF>
<FUNCTION>
<NAME>idmef_correlation_alert_new</NAME>
<RETURNS>int </RETURNS>
idmef_correlation_alert_t **ret
</FUNCTION>
<FUNCTION>
<NAME>idmef_correlation_alert_copy</NAME>
<RETURNS>int </RETURNS>
const idmef_correlation_alert_t *src, idmef_correlation_alert_t *dst
</FUNCTION>
<FUNCTION>
<NAME>idmef_correlation_alert_clone</NAME>
<RETURNS>int </RETURNS>
idmef_correlation_alert_t *src, idmef_correlation_alert_t **dst
</FUNCTION>
<FUNCTION>
<NAME>idmef_correlation_alert_compare</NAME>
<RETURNS>int </RETURNS>
const idmef_correlation_alert_t *obj1, const idmef_correlation_alert_t *obj2
</FUNCTION>
<FUNCTION>
<NAME>idmef_correlation_alert_ref</NAME>
<RETURNS>idmef_correlation_alert_t *</RETURNS>
idmef_correlation_alert_t *correlation_alert
</FUNCTION>
<FUNCTION>
<NAME>idmef_correlation_alert_destroy</NAME>
<RETURNS>void </RETURNS>
idmef_correlation_alert_t *ptr
</FUNCTION>
<FUNCTION>
<NAME>idmef_correlation_alert_get_name</NAME>
<RETURNS>requiem_string_t *</RETURNS>
idmef_correlation_alert_t *ptr
</FUNCTION>
<FUNCTION>
<NAME>idmef_correlation_alert_set_name</NAME>
<RETURNS>void </RETURNS>
idmef_correlation_alert_t *ptr, requiem_string_t *name
</FUNCTION>
<FUNCTION>
<NAME>idmef_correlation_alert_new_name</NAME>
<RETURNS>int </RETURNS>
idmef_correlation_alert_t *ptr, requiem_string_t **ret
</FUNCTION>
<FUNCTION>
<NAME>idmef_correlation_alert_get_next_alertident</NAME>
<RETURNS>idmef_alertident_t *</RETURNS>
idmef_correlation_alert_t *correlation_alert, idmef_alertident_t *alertident_cur
</FUNCTION>
<FUNCTION>
<NAME>idmef_correlation_alert_set_alertident</NAME>
<RETURNS>void </RETURNS>
idmef_correlation_alert_t *ptr, idmef_alertident_t *object, int pos
</FUNCTION>
<FUNCTION>
<NAME>idmef_correlation_alert_new_alertident</NAME>
<RETURNS>int </RETURNS>
idmef_correlation_alert_t *ptr, idmef_alertident_t **ret, int pos
</FUNCTION>
<TYPEDEF>
<NAME>idmef_overflow_alert_t</NAME>
typedef struct idmef_overflow_alert idmef_overflow_alert_t;
</TYPEDEF>
<FUNCTION>
<NAME>idmef_overflow_alert_new</NAME>
<RETURNS>int </RETURNS>
idmef_overflow_alert_t **ret
</FUNCTION>
<FUNCTION>
<NAME>idmef_overflow_alert_copy</NAME>
<RETURNS>int </RETURNS>
const idmef_overflow_alert_t *src, idmef_overflow_alert_t *dst
</FUNCTION>
<FUNCTION>
<NAME>idmef_overflow_alert_clone</NAME>
<RETURNS>int </RETURNS>
idmef_overflow_alert_t *src, idmef_overflow_alert_t **dst
</FUNCTION>
<FUNCTION>
<NAME>idmef_overflow_alert_compare</NAME>
<RETURNS>int </RETURNS>
const idmef_overflow_alert_t *obj1, const idmef_overflow_alert_t *obj2
</FUNCTION>
<FUNCTION>
<NAME>idmef_overflow_alert_ref</NAME>
<RETURNS>idmef_overflow_alert_t *</RETURNS>
idmef_overflow_alert_t *overflow_alert
</FUNCTION>
<FUNCTION>
<NAME>idmef_overflow_alert_destroy</NAME>
<RETURNS>void </RETURNS>
idmef_overflow_alert_t *ptr
</FUNCTION>
<FUNCTION>
<NAME>idmef_overflow_alert_get_program</NAME>
<RETURNS>requiem_string_t *</RETURNS>
idmef_overflow_alert_t *ptr
</FUNCTION>
<FUNCTION>
<NAME>idmef_overflow_alert_set_program</NAME>
<RETURNS>void </RETURNS>
idmef_overflow_alert_t *ptr, requiem_string_t *program
</FUNCTION>
<FUNCTION>
<NAME>idmef_overflow_alert_new_program</NAME>
<RETURNS>int </RETURNS>
idmef_overflow_alert_t *ptr, requiem_string_t **ret
</FUNCTION>
<FUNCTION>
<NAME>idmef_overflow_alert_unset_size</NAME>
<RETURNS>void </RETURNS>
idmef_overflow_alert_t *ptr
</FUNCTION>
<FUNCTION>
<NAME>idmef_overflow_alert_get_size</NAME>
<RETURNS>uint32_t *</RETURNS>
idmef_overflow_alert_t *ptr
</FUNCTION>
<FUNCTION>
<NAME>idmef_overflow_alert_set_size</NAME>
<RETURNS>void </RETURNS>
idmef_overflow_alert_t *ptr, uint32_t size
</FUNCTION>
<FUNCTION>
<NAME>idmef_overflow_alert_new_size</NAME>
<RETURNS>int </RETURNS>
idmef_overflow_alert_t *ptr, uint32_t **ret
</FUNCTION>
<FUNCTION>
<NAME>idmef_overflow_alert_get_buffer</NAME>
<RETURNS>idmef_data_t *</RETURNS>
idmef_overflow_alert_t *ptr
</FUNCTION>
<FUNCTION>
<NAME>idmef_overflow_alert_set_buffer</NAME>
<RETURNS>void </RETURNS>
idmef_overflow_alert_t *ptr, idmef_data_t *buffer
</FUNCTION>
<FUNCTION>
<NAME>idmef_overflow_alert_new_buffer</NAME>
<RETURNS>int </RETURNS>
idmef_overflow_alert_t *ptr, idmef_data_t **ret
</FUNCTION>
<ENUM>
<NAME>idmef_alert_type_t</NAME>
typedef enum {
        IDMEF_ALERT_TYPE_ERROR = -1,
        IDMEF_ALERT_TYPE_DEFAULT = 0,
        IDMEF_ALERT_TYPE_TOOL = 1,
        IDMEF_ALERT_TYPE_CORRELATION = 2,
        IDMEF_ALERT_TYPE_OVERFLOW = 3
} idmef_alert_type_t;
</ENUM>
<FUNCTION>
<NAME>idmef_alert_type_to_numeric</NAME>
<RETURNS>idmef_alert_type_t </RETURNS>
const char *name
</FUNCTION>
<FUNCTION>
<NAME>idmef_alert_type_to_string</NAME>
<RETURNS>const char *</RETURNS>
idmef_alert_type_t val
</FUNCTION>
<TYPEDEF>
<NAME>idmef_alert_t</NAME>
typedef struct idmef_alert idmef_alert_t;
</TYPEDEF>
<FUNCTION>
<NAME>idmef_alert_new</NAME>
<RETURNS>int </RETURNS>
idmef_alert_t **ret
</FUNCTION>
<FUNCTION>
<NAME>idmef_alert_copy</NAME>
<RETURNS>int </RETURNS>
const idmef_alert_t *src, idmef_alert_t *dst
</FUNCTION>
<FUNCTION>
<NAME>idmef_alert_clone</NAME>
<RETURNS>int </RETURNS>
idmef_alert_t *src, idmef_alert_t **dst
</FUNCTION>
<FUNCTION>
<NAME>idmef_alert_compare</NAME>
<RETURNS>int </RETURNS>
const idmef_alert_t *obj1, const idmef_alert_t *obj2
</FUNCTION>
<FUNCTION>
<NAME>idmef_alert_ref</NAME>
<RETURNS>idmef_alert_t *</RETURNS>
idmef_alert_t *alert
</FUNCTION>
<FUNCTION>
<NAME>idmef_alert_destroy</NAME>
<RETURNS>void </RETURNS>
idmef_alert_t *ptr
</FUNCTION>
<FUNCTION>
<NAME>idmef_alert_get_messageid</NAME>
<RETURNS>requiem_string_t *</RETURNS>
idmef_alert_t *ptr
</FUNCTION>
<FUNCTION>
<NAME>idmef_alert_set_messageid</NAME>
<RETURNS>void </RETURNS>
idmef_alert_t *ptr, requiem_string_t *messageid
</FUNCTION>
<FUNCTION>
<NAME>idmef_alert_new_messageid</NAME>
<RETURNS>int </RETURNS>
idmef_alert_t *ptr, requiem_string_t **ret
</FUNCTION>
<FUNCTION>
<NAME>idmef_alert_get_next_analyzer</NAME>
<RETURNS>idmef_analyzer_t *</RETURNS>
idmef_alert_t *alert, idmef_analyzer_t *analyzer_cur
</FUNCTION>
<FUNCTION>
<NAME>idmef_alert_set_analyzer</NAME>
<RETURNS>void </RETURNS>
idmef_alert_t *ptr, idmef_analyzer_t *object, int pos
</FUNCTION>
<FUNCTION>
<NAME>idmef_alert_new_analyzer</NAME>
<RETURNS>int </RETURNS>
idmef_alert_t *ptr, idmef_analyzer_t **ret, int pos
</FUNCTION>
<FUNCTION>
<NAME>idmef_alert_get_create_time</NAME>
<RETURNS>idmef_time_t *</RETURNS>
idmef_alert_t *ptr
</FUNCTION>
<FUNCTION>
<NAME>idmef_alert_set_create_time</NAME>
<RETURNS>void </RETURNS>
idmef_alert_t *ptr, idmef_time_t *create_time
</FUNCTION>
<FUNCTION>
<NAME>idmef_alert_new_create_time</NAME>
<RETURNS>int </RETURNS>
idmef_alert_t *ptr, idmef_time_t **ret
</FUNCTION>
<FUNCTION>
<NAME>idmef_alert_get_classification</NAME>
<RETURNS>idmef_classification_t *</RETURNS>
idmef_alert_t *ptr
</FUNCTION>
<FUNCTION>
<NAME>idmef_alert_set_classification</NAME>
<RETURNS>void </RETURNS>
idmef_alert_t *ptr, idmef_classification_t *classification
</FUNCTION>
<FUNCTION>
<NAME>idmef_alert_new_classification</NAME>
<RETURNS>int </RETURNS>
idmef_alert_t *ptr, idmef_classification_t **ret
</FUNCTION>
<FUNCTION>
<NAME>idmef_alert_get_detect_time</NAME>
<RETURNS>idmef_time_t *</RETURNS>
idmef_alert_t *ptr
</FUNCTION>
<FUNCTION>
<NAME>idmef_alert_set_detect_time</NAME>
<RETURNS>void </RETURNS>
idmef_alert_t *ptr, idmef_time_t *detect_time
</FUNCTION>
<FUNCTION>
<NAME>idmef_alert_new_detect_time</NAME>
<RETURNS>int </RETURNS>
idmef_alert_t *ptr, idmef_time_t **ret
</FUNCTION>
<FUNCTION>
<NAME>idmef_alert_get_analyzer_time</NAME>
<RETURNS>idmef_time_t *</RETURNS>
idmef_alert_t *ptr
</FUNCTION>
<FUNCTION>
<NAME>idmef_alert_set_analyzer_time</NAME>
<RETURNS>void </RETURNS>
idmef_alert_t *ptr, idmef_time_t *analyzer_time
</FUNCTION>
<FUNCTION>
<NAME>idmef_alert_new_analyzer_time</NAME>
<RETURNS>int </RETURNS>
idmef_alert_t *ptr, idmef_time_t **ret
</FUNCTION>
<FUNCTION>
<NAME>idmef_alert_get_next_source</NAME>
<RETURNS>idmef_source_t *</RETURNS>
idmef_alert_t *alert, idmef_source_t *source_cur
</FUNCTION>
<FUNCTION>
<NAME>idmef_alert_set_source</NAME>
<RETURNS>void </RETURNS>
idmef_alert_t *ptr, idmef_source_t *object, int pos
</FUNCTION>
<FUNCTION>
<NAME>idmef_alert_new_source</NAME>
<RETURNS>int </RETURNS>
idmef_alert_t *ptr, idmef_source_t **ret, int pos
</FUNCTION>
<FUNCTION>
<NAME>idmef_alert_get_next_target</NAME>
<RETURNS>idmef_target_t *</RETURNS>
idmef_alert_t *alert, idmef_target_t *target_cur
</FUNCTION>
<FUNCTION>
<NAME>idmef_alert_set_target</NAME>
<RETURNS>void </RETURNS>
idmef_alert_t *ptr, idmef_target_t *object, int pos
</FUNCTION>
<FUNCTION>
<NAME>idmef_alert_new_target</NAME>
<RETURNS>int </RETURNS>
idmef_alert_t *ptr, idmef_target_t **ret, int pos
</FUNCTION>
<FUNCTION>
<NAME>idmef_alert_get_assessment</NAME>
<RETURNS>idmef_assessment_t *</RETURNS>
idmef_alert_t *ptr
</FUNCTION>
<FUNCTION>
<NAME>idmef_alert_set_assessment</NAME>
<RETURNS>void </RETURNS>
idmef_alert_t *ptr, idmef_assessment_t *assessment
</FUNCTION>
<FUNCTION>
<NAME>idmef_alert_new_assessment</NAME>
<RETURNS>int </RETURNS>
idmef_alert_t *ptr, idmef_assessment_t **ret
</FUNCTION>
<FUNCTION>
<NAME>idmef_alert_get_next_additional_data</NAME>
<RETURNS>idmef_additional_data_t *</RETURNS>
idmef_alert_t *alert, idmef_additional_data_t *additional_data_cur
</FUNCTION>
<FUNCTION>
<NAME>idmef_alert_set_additional_data</NAME>
<RETURNS>void </RETURNS>
idmef_alert_t *ptr, idmef_additional_data_t *object, int pos
</FUNCTION>
<FUNCTION>
<NAME>idmef_alert_new_additional_data</NAME>
<RETURNS>int </RETURNS>
idmef_alert_t *ptr, idmef_additional_data_t **ret, int pos
</FUNCTION>
<FUNCTION>
<NAME>idmef_alert_get_type</NAME>
<RETURNS>idmef_alert_type_t </RETURNS>
idmef_alert_t *ptr
</FUNCTION>
<FUNCTION>
<NAME>idmef_alert_get_tool_alert</NAME>
<RETURNS>idmef_tool_alert_t *</RETURNS>
idmef_alert_t *ptr
</FUNCTION>
<FUNCTION>
<NAME>idmef_alert_set_tool_alert</NAME>
<RETURNS>void </RETURNS>
idmef_alert_t *ptr, idmef_tool_alert_t *tool_alert
</FUNCTION>
<FUNCTION>
<NAME>idmef_alert_new_tool_alert</NAME>
<RETURNS>int </RETURNS>
idmef_alert_t *ptr, idmef_tool_alert_t **ret
</FUNCTION>
<FUNCTION>
<NAME>idmef_alert_get_correlation_alert</NAME>
<RETURNS>idmef_correlation_alert_t *</RETURNS>
idmef_alert_t *ptr
</FUNCTION>
<FUNCTION>
<NAME>idmef_alert_set_correlation_alert</NAME>
<RETURNS>void </RETURNS>
idmef_alert_t *ptr, idmef_correlation_alert_t *correlation_alert
</FUNCTION>
<FUNCTION>
<NAME>idmef_alert_new_correlation_alert</NAME>
<RETURNS>int </RETURNS>
idmef_alert_t *ptr, idmef_correlation_alert_t **ret
</FUNCTION>
<FUNCTION>
<NAME>idmef_alert_get_overflow_alert</NAME>
<RETURNS>idmef_overflow_alert_t *</RETURNS>
idmef_alert_t *ptr
</FUNCTION>
<FUNCTION>
<NAME>idmef_alert_set_overflow_alert</NAME>
<RETURNS>void </RETURNS>
idmef_alert_t *ptr, idmef_overflow_alert_t *overflow_alert
</FUNCTION>
<FUNCTION>
<NAME>idmef_alert_new_overflow_alert</NAME>
<RETURNS>int </RETURNS>
idmef_alert_t *ptr, idmef_overflow_alert_t **ret
</FUNCTION>
<TYPEDEF>
<NAME>idmef_heartbeat_t</NAME>
typedef struct idmef_heartbeat idmef_heartbeat_t;
</TYPEDEF>
<FUNCTION>
<NAME>idmef_heartbeat_new</NAME>
<RETURNS>int </RETURNS>
idmef_heartbeat_t **ret
</FUNCTION>
<FUNCTION>
<NAME>idmef_heartbeat_copy</NAME>
<RETURNS>int </RETURNS>
const idmef_heartbeat_t *src, idmef_heartbeat_t *dst
</FUNCTION>
<FUNCTION>
<NAME>idmef_heartbeat_clone</NAME>
<RETURNS>int </RETURNS>
idmef_heartbeat_t *src, idmef_heartbeat_t **dst
</FUNCTION>
<FUNCTION>
<NAME>idmef_heartbeat_compare</NAME>
<RETURNS>int </RETURNS>
const idmef_heartbeat_t *obj1, const idmef_heartbeat_t *obj2
</FUNCTION>
<FUNCTION>
<NAME>idmef_heartbeat_ref</NAME>
<RETURNS>idmef_heartbeat_t *</RETURNS>
idmef_heartbeat_t *heartbeat
</FUNCTION>
<FUNCTION>
<NAME>idmef_heartbeat_destroy</NAME>
<RETURNS>void </RETURNS>
idmef_heartbeat_t *ptr
</FUNCTION>
<FUNCTION>
<NAME>idmef_heartbeat_get_messageid</NAME>
<RETURNS>requiem_string_t *</RETURNS>
idmef_heartbeat_t *ptr
</FUNCTION>
<FUNCTION>
<NAME>idmef_heartbeat_set_messageid</NAME>
<RETURNS>void </RETURNS>
idmef_heartbeat_t *ptr, requiem_string_t *messageid
</FUNCTION>
<FUNCTION>
<NAME>idmef_heartbeat_new_messageid</NAME>
<RETURNS>int </RETURNS>
idmef_heartbeat_t *ptr, requiem_string_t **ret
</FUNCTION>
<FUNCTION>
<NAME>idmef_heartbeat_get_next_analyzer</NAME>
<RETURNS>idmef_analyzer_t *</RETURNS>
idmef_heartbeat_t *heartbeat, idmef_analyzer_t *analyzer_cur
</FUNCTION>
<FUNCTION>
<NAME>idmef_heartbeat_set_analyzer</NAME>
<RETURNS>void </RETURNS>
idmef_heartbeat_t *ptr, idmef_analyzer_t *object, int pos
</FUNCTION>
<FUNCTION>
<NAME>idmef_heartbeat_new_analyzer</NAME>
<RETURNS>int </RETURNS>
idmef_heartbeat_t *ptr, idmef_analyzer_t **ret, int pos
</FUNCTION>
<FUNCTION>
<NAME>idmef_heartbeat_get_create_time</NAME>
<RETURNS>idmef_time_t *</RETURNS>
idmef_heartbeat_t *ptr
</FUNCTION>
<FUNCTION>
<NAME>idmef_heartbeat_set_create_time</NAME>
<RETURNS>void </RETURNS>
idmef_heartbeat_t *ptr, idmef_time_t *create_time
</FUNCTION>
<FUNCTION>
<NAME>idmef_heartbeat_new_create_time</NAME>
<RETURNS>int </RETURNS>
idmef_heartbeat_t *ptr, idmef_time_t **ret
</FUNCTION>
<FUNCTION>
<NAME>idmef_heartbeat_get_analyzer_time</NAME>
<RETURNS>idmef_time_t *</RETURNS>
idmef_heartbeat_t *ptr
</FUNCTION>
<FUNCTION>
<NAME>idmef_heartbeat_set_analyzer_time</NAME>
<RETURNS>void </RETURNS>
idmef_heartbeat_t *ptr, idmef_time_t *analyzer_time
</FUNCTION>
<FUNCTION>
<NAME>idmef_heartbeat_new_analyzer_time</NAME>
<RETURNS>int </RETURNS>
idmef_heartbeat_t *ptr, idmef_time_t **ret
</FUNCTION>
<FUNCTION>
<NAME>idmef_heartbeat_unset_heartbeat_interval</NAME>
<RETURNS>void </RETURNS>
idmef_heartbeat_t *ptr
</FUNCTION>
<FUNCTION>
<NAME>idmef_heartbeat_get_heartbeat_interval</NAME>
<RETURNS>uint32_t *</RETURNS>
idmef_heartbeat_t *ptr
</FUNCTION>
<FUNCTION>
<NAME>idmef_heartbeat_set_heartbeat_interval</NAME>
<RETURNS>void </RETURNS>
idmef_heartbeat_t *ptr, uint32_t heartbeat_interval
</FUNCTION>
<FUNCTION>
<NAME>idmef_heartbeat_new_heartbeat_interval</NAME>
<RETURNS>int </RETURNS>
idmef_heartbeat_t *ptr, uint32_t **ret
</FUNCTION>
<FUNCTION>
<NAME>idmef_heartbeat_get_next_additional_data</NAME>
<RETURNS>idmef_additional_data_t *</RETURNS>
idmef_heartbeat_t *heartbeat, idmef_additional_data_t *additional_data_cur
</FUNCTION>
<FUNCTION>
<NAME>idmef_heartbeat_set_additional_data</NAME>
<RETURNS>void </RETURNS>
idmef_heartbeat_t *ptr, idmef_additional_data_t *object, int pos
</FUNCTION>
<FUNCTION>
<NAME>idmef_heartbeat_new_additional_data</NAME>
<RETURNS>int </RETURNS>
idmef_heartbeat_t *ptr, idmef_additional_data_t **ret, int pos
</FUNCTION>
<ENUM>
<NAME>idmef_message_type_t</NAME>
typedef enum {
        IDMEF_MESSAGE_TYPE_ERROR = -1,
        IDMEF_MESSAGE_TYPE_ALERT = 1,
        IDMEF_MESSAGE_TYPE_HEARTBEAT = 2
} idmef_message_type_t;
</ENUM>
<FUNCTION>
<NAME>idmef_message_type_to_numeric</NAME>
<RETURNS>idmef_message_type_t </RETURNS>
const char *name
</FUNCTION>
<FUNCTION>
<NAME>idmef_message_type_to_string</NAME>
<RETURNS>const char *</RETURNS>
idmef_message_type_t val
</FUNCTION>
<TYPEDEF>
<NAME>idmef_message_t</NAME>
typedef struct idmef_message idmef_message_t;
</TYPEDEF>
<FUNCTION>
<NAME>idmef_message_new</NAME>
<RETURNS>int </RETURNS>
idmef_message_t **ret
</FUNCTION>
<FUNCTION>
<NAME>idmef_message_copy</NAME>
<RETURNS>int </RETURNS>
const idmef_message_t *src, idmef_message_t *dst
</FUNCTION>
<FUNCTION>
<NAME>idmef_message_clone</NAME>
<RETURNS>int </RETURNS>
idmef_message_t *src, idmef_message_t **dst
</FUNCTION>
<FUNCTION>
<NAME>idmef_message_compare</NAME>
<RETURNS>int </RETURNS>
const idmef_message_t *obj1, const idmef_message_t *obj2
</FUNCTION>
<FUNCTION>
<NAME>idmef_message_ref</NAME>
<RETURNS>idmef_message_t *</RETURNS>
idmef_message_t *message
</FUNCTION>
<FUNCTION>
<NAME>idmef_message_destroy</NAME>
<RETURNS>void </RETURNS>
idmef_message_t *ptr
</FUNCTION>
<FUNCTION>
<NAME>idmef_message_get_version</NAME>
<RETURNS>requiem_string_t *</RETURNS>
idmef_message_t *ptr
</FUNCTION>
<FUNCTION>
<NAME>idmef_message_set_version</NAME>
<RETURNS>void </RETURNS>
idmef_message_t *ptr, requiem_string_t *version
</FUNCTION>
<FUNCTION>
<NAME>idmef_message_new_version</NAME>
<RETURNS>int </RETURNS>
idmef_message_t *ptr, requiem_string_t **ret
</FUNCTION>
<FUNCTION>
<NAME>idmef_message_get_type</NAME>
<RETURNS>idmef_message_type_t </RETURNS>
idmef_message_t *ptr
</FUNCTION>
<FUNCTION>
<NAME>idmef_message_get_alert</NAME>
<RETURNS>idmef_alert_t *</RETURNS>
idmef_message_t *ptr
</FUNCTION>
<FUNCTION>
<NAME>idmef_message_set_alert</NAME>
<RETURNS>void </RETURNS>
idmef_message_t *ptr, idmef_alert_t *alert
</FUNCTION>
<FUNCTION>
<NAME>idmef_message_new_alert</NAME>
<RETURNS>int </RETURNS>
idmef_message_t *ptr, idmef_alert_t **ret
</FUNCTION>
<FUNCTION>
<NAME>idmef_message_get_heartbeat</NAME>
<RETURNS>idmef_heartbeat_t *</RETURNS>
idmef_message_t *ptr
</FUNCTION>
<FUNCTION>
<NAME>idmef_message_set_heartbeat</NAME>
<RETURNS>void </RETURNS>
idmef_message_t *ptr, idmef_heartbeat_t *heartbeat
</FUNCTION>
<FUNCTION>
<NAME>idmef_message_new_heartbeat</NAME>
<RETURNS>int </RETURNS>
idmef_message_t *ptr, idmef_heartbeat_t **ret
</FUNCTION>
<FUNCTION>
<NAME>idmef_message_set_pmsg</NAME>
<RETURNS>void </RETURNS>
idmef_message_t *message, requiem_msg_t *msg
</FUNCTION>
<FUNCTION>
<NAME>idmef_message_get_pmsg</NAME>
<RETURNS>requiem_msg_t *</RETURNS>
idmef_message_t *message
</FUNCTION>
<MACRO>
<NAME>IDMEF_CLASS_ID_ADDITIONAL_DATA_TYPE</NAME>
#define IDMEF_CLASS_ID_ADDITIONAL_DATA_TYPE 3
</MACRO>
<MACRO>
<NAME>IDMEF_CLASS_ID_ADDITIONAL_DATA</NAME>
#define IDMEF_CLASS_ID_ADDITIONAL_DATA 4
</MACRO>
<MACRO>
<NAME>IDMEF_CLASS_ID_REFERENCE_ORIGIN</NAME>
#define IDMEF_CLASS_ID_REFERENCE_ORIGIN 5
</MACRO>
<MACRO>
<NAME>IDMEF_CLASS_ID_REFERENCE</NAME>
#define IDMEF_CLASS_ID_REFERENCE 50
</MACRO>
<MACRO>
<NAME>IDMEF_CLASS_ID_CLASSIFICATION</NAME>
#define IDMEF_CLASS_ID_CLASSIFICATION 6
</MACRO>
<MACRO>
<NAME>IDMEF_CLASS_ID_USER_ID_TYPE</NAME>
#define IDMEF_CLASS_ID_USER_ID_TYPE 7
</MACRO>
<MACRO>
<NAME>IDMEF_CLASS_ID_USER_ID</NAME>
#define IDMEF_CLASS_ID_USER_ID 8
</MACRO>
<MACRO>
<NAME>IDMEF_CLASS_ID_USER_CATEGORY</NAME>
#define IDMEF_CLASS_ID_USER_CATEGORY 9
</MACRO>
<MACRO>
<NAME>IDMEF_CLASS_ID_USER</NAME>
#define IDMEF_CLASS_ID_USER 10
</MACRO>
<MACRO>
<NAME>IDMEF_CLASS_ID_ADDRESS_CATEGORY</NAME>
#define IDMEF_CLASS_ID_ADDRESS_CATEGORY 11
</MACRO>
<MACRO>
<NAME>IDMEF_CLASS_ID_ADDRESS</NAME>
#define IDMEF_CLASS_ID_ADDRESS 12
</MACRO>
<MACRO>
<NAME>IDMEF_CLASS_ID_PROCESS</NAME>
#define IDMEF_CLASS_ID_PROCESS 13
</MACRO>
<MACRO>
<NAME>IDMEF_CLASS_ID_WEB_SERVICE</NAME>
#define IDMEF_CLASS_ID_WEB_SERVICE 14
</MACRO>
<MACRO>
<NAME>IDMEF_CLASS_ID_SNMP_SERVICE</NAME>
#define IDMEF_CLASS_ID_SNMP_SERVICE 15
</MACRO>
<MACRO>
<NAME>IDMEF_CLASS_ID_SERVICE_TYPE</NAME>
#define IDMEF_CLASS_ID_SERVICE_TYPE 16
</MACRO>
<MACRO>
<NAME>IDMEF_CLASS_ID_SERVICE</NAME>
#define IDMEF_CLASS_ID_SERVICE 17
</MACRO>
<MACRO>
<NAME>IDMEF_CLASS_ID_NODE_CATEGORY</NAME>
#define IDMEF_CLASS_ID_NODE_CATEGORY 18
</MACRO>
<MACRO>
<NAME>IDMEF_CLASS_ID_NODE</NAME>
#define IDMEF_CLASS_ID_NODE 19
</MACRO>
<MACRO>
<NAME>IDMEF_CLASS_ID_SOURCE_SPOOFED</NAME>
#define IDMEF_CLASS_ID_SOURCE_SPOOFED 20
</MACRO>
<MACRO>
<NAME>IDMEF_CLASS_ID_SOURCE</NAME>
#define IDMEF_CLASS_ID_SOURCE 21
</MACRO>
<MACRO>
<NAME>IDMEF_CLASS_ID_FILE_ACCESS</NAME>
#define IDMEF_CLASS_ID_FILE_ACCESS 22
</MACRO>
<MACRO>
<NAME>IDMEF_CLASS_ID_INODE</NAME>
#define IDMEF_CLASS_ID_INODE 23
</MACRO>
<MACRO>
<NAME>IDMEF_CLASS_ID_CHECKSUM_ALGORITHM</NAME>
#define IDMEF_CLASS_ID_CHECKSUM_ALGORITHM 53
</MACRO>
<MACRO>
<NAME>IDMEF_CLASS_ID_CHECKSUM</NAME>
#define IDMEF_CLASS_ID_CHECKSUM 52
</MACRO>
<MACRO>
<NAME>IDMEF_CLASS_ID_FILE_CATEGORY</NAME>
#define IDMEF_CLASS_ID_FILE_CATEGORY 24
</MACRO>
<MACRO>
<NAME>IDMEF_CLASS_ID_FILE_FSTYPE</NAME>
#define IDMEF_CLASS_ID_FILE_FSTYPE 25
</MACRO>
<MACRO>
<NAME>IDMEF_CLASS_ID_FILE</NAME>
#define IDMEF_CLASS_ID_FILE 26
</MACRO>
<MACRO>
<NAME>IDMEF_CLASS_ID_LINKAGE_CATEGORY</NAME>
#define IDMEF_CLASS_ID_LINKAGE_CATEGORY 27
</MACRO>
<MACRO>
<NAME>IDMEF_CLASS_ID_LINKAGE</NAME>
#define IDMEF_CLASS_ID_LINKAGE 28
</MACRO>
<MACRO>
<NAME>IDMEF_CLASS_ID_TARGET_DECOY</NAME>
#define IDMEF_CLASS_ID_TARGET_DECOY 29
</MACRO>
<MACRO>
<NAME>IDMEF_CLASS_ID_TARGET</NAME>
#define IDMEF_CLASS_ID_TARGET 30
</MACRO>
<MACRO>
<NAME>IDMEF_CLASS_ID_ANALYZER</NAME>
#define IDMEF_CLASS_ID_ANALYZER 31
</MACRO>
<MACRO>
<NAME>IDMEF_CLASS_ID_ALERTIDENT</NAME>
#define IDMEF_CLASS_ID_ALERTIDENT 32
</MACRO>
<MACRO>
<NAME>IDMEF_CLASS_ID_IMPACT_SEVERITY</NAME>
#define IDMEF_CLASS_ID_IMPACT_SEVERITY 33
</MACRO>
<MACRO>
<NAME>IDMEF_CLASS_ID_IMPACT_COMPLETION</NAME>
#define IDMEF_CLASS_ID_IMPACT_COMPLETION 34
</MACRO>
<MACRO>
<NAME>IDMEF_CLASS_ID_IMPACT_TYPE</NAME>
#define IDMEF_CLASS_ID_IMPACT_TYPE 35
</MACRO>
<MACRO>
<NAME>IDMEF_CLASS_ID_IMPACT</NAME>
#define IDMEF_CLASS_ID_IMPACT 36
</MACRO>
<MACRO>
<NAME>IDMEF_CLASS_ID_ACTION_CATEGORY</NAME>
#define IDMEF_CLASS_ID_ACTION_CATEGORY 37
</MACRO>
<MACRO>
<NAME>IDMEF_CLASS_ID_ACTION</NAME>
#define IDMEF_CLASS_ID_ACTION 38
</MACRO>
<MACRO>
<NAME>IDMEF_CLASS_ID_CONFIDENCE_RATING</NAME>
#define IDMEF_CLASS_ID_CONFIDENCE_RATING 39
</MACRO>
<MACRO>
<NAME>IDMEF_CLASS_ID_CONFIDENCE</NAME>
#define IDMEF_CLASS_ID_CONFIDENCE 40
</MACRO>
<MACRO>
<NAME>IDMEF_CLASS_ID_ASSESSMENT</NAME>
#define IDMEF_CLASS_ID_ASSESSMENT 41
</MACRO>
<MACRO>
<NAME>IDMEF_CLASS_ID_TOOL_ALERT</NAME>
#define IDMEF_CLASS_ID_TOOL_ALERT 42
</MACRO>
<MACRO>
<NAME>IDMEF_CLASS_ID_CORRELATION_ALERT</NAME>
#define IDMEF_CLASS_ID_CORRELATION_ALERT 43
</MACRO>
<MACRO>
<NAME>IDMEF_CLASS_ID_OVERFLOW_ALERT</NAME>
#define IDMEF_CLASS_ID_OVERFLOW_ALERT 44
</MACRO>
<MACRO>
<NAME>IDMEF_CLASS_ID_ALERT_TYPE</NAME>
#define IDMEF_CLASS_ID_ALERT_TYPE 45
</MACRO>
<MACRO>
<NAME>IDMEF_CLASS_ID_ALERT</NAME>
#define IDMEF_CLASS_ID_ALERT 46
</MACRO>
<MACRO>
<NAME>IDMEF_CLASS_ID_HEARTBEAT</NAME>
#define IDMEF_CLASS_ID_HEARTBEAT 47
</MACRO>
<MACRO>
<NAME>IDMEF_CLASS_ID_MESSAGE_TYPE</NAME>
#define IDMEF_CLASS_ID_MESSAGE_TYPE 48
</MACRO>
<MACRO>
<NAME>IDMEF_CLASS_ID_MESSAGE</NAME>
#define IDMEF_CLASS_ID_MESSAGE 49
</MACRO>
<MACRO>
<NAME>LIBREQUIEM_VERSION</NAME>
#define LIBREQUIEM_VERSION "1.0.0"
</MACRO>
<FUNCTION>
<NAME>requiem_init</NAME>
<RETURNS>int </RETURNS>
int *argc, char **argv
</FUNCTION>
<FUNCTION>
<NAME>requiem_deinit</NAME>
<RETURNS>void </RETURNS>
void
</FUNCTION>
<FUNCTION>
<NAME>requiem_check_version</NAME>
<RETURNS>const char *</RETURNS>
const char *req_version
</FUNCTION>
<FUNCTION>
<NAME>requiem_thread_init</NAME>
<RETURNS>int </RETURNS>
void *future_use
</FUNCTION>
<FUNCTION>
<NAME>requiem_fork_prepare</NAME>
<RETURNS>void </RETURNS>
void
</FUNCTION>
<FUNCTION>
<NAME>requiem_fork_parent</NAME>
<RETURNS>void </RETURNS>
void
</FUNCTION>
<FUNCTION>
<NAME>requiem_fork_child</NAME>
<RETURNS>void </RETURNS>
void
</FUNCTION>
<TYPEDEF>
<NAME>idmef_path_t</NAME>
typedef struct idmef_path idmef_path_t;
</TYPEDEF>
<FUNCTION>
<NAME>idmef_path_get</NAME>
<RETURNS>int </RETURNS>
const idmef_path_t *path, idmef_message_t *message, idmef_value_t **ret
</FUNCTION>
<FUNCTION>
<NAME>idmef_path_set</NAME>
<RETURNS>int </RETURNS>
const idmef_path_t *path, idmef_message_t *message, idmef_value_t *value
</FUNCTION>
<FUNCTION>
<NAME>idmef_path_new</NAME>
<RETURNS>int </RETURNS>
idmef_path_t **path, const char *format, ...
</FUNCTION>
<FUNCTION>
<NAME>idmef_path_new_v</NAME>
<RETURNS>int </RETURNS>
idmef_path_t **path, const char *format, va_list args
</FUNCTION>
<FUNCTION>
<NAME>idmef_path_new_fast</NAME>
<RETURNS>int </RETURNS>
idmef_path_t **path, const char *buffer
</FUNCTION>
<FUNCTION>
<NAME>idmef_path_get_class</NAME>
<RETURNS>idmef_class_id_t </RETURNS>
const idmef_path_t *path, int depth
</FUNCTION>
<FUNCTION>
<NAME>idmef_path_get_value_type</NAME>
<RETURNS>idmef_value_type_id_t </RETURNS>
const idmef_path_t *path, int depth
</FUNCTION>
<FUNCTION>
<NAME>idmef_path_set_index</NAME>
<RETURNS>int </RETURNS>
idmef_path_t *path, unsigned int depth, int index
</FUNCTION>
<FUNCTION>
<NAME>idmef_path_undefine_index</NAME>
<RETURNS>int </RETURNS>
idmef_path_t *path, unsigned int depth
</FUNCTION>
<FUNCTION>
<NAME>idmef_path_get_index</NAME>
<RETURNS>int </RETURNS>
const idmef_path_t *path, unsigned int depth
</FUNCTION>
<FUNCTION>
<NAME>idmef_path_make_child</NAME>
<RETURNS>int </RETURNS>
idmef_path_t *path, const char *child_name, int index
</FUNCTION>
<FUNCTION>
<NAME>idmef_path_make_parent</NAME>
<RETURNS>int </RETURNS>
idmef_path_t *path
</FUNCTION>
<FUNCTION>
<NAME>idmef_path_destroy</NAME>
<RETURNS>void </RETURNS>
idmef_path_t *path
</FUNCTION>
<FUNCTION>
<NAME>idmef_path_ncompare</NAME>
<RETURNS>int </RETURNS>
const idmef_path_t *p1, const idmef_path_t *p2, unsigned int depth
</FUNCTION>
<FUNCTION>
<NAME>idmef_path_compare</NAME>
<RETURNS>int </RETURNS>
const idmef_path_t *p1, const idmef_path_t *p2
</FUNCTION>
<FUNCTION>
<NAME>idmef_path_clone</NAME>
<RETURNS>int </RETURNS>
const idmef_path_t *src, idmef_path_t **dst
</FUNCTION>
<FUNCTION>
<NAME>idmef_path_ref</NAME>
<RETURNS>idmef_path_t *</RETURNS>
idmef_path_t *path
</FUNCTION>
<FUNCTION>
<NAME>idmef_path_get_name</NAME>
<RETURNS>const char *</RETURNS>
const idmef_path_t *path, int depth
</FUNCTION>
<FUNCTION>
<NAME>idmef_path_is_ambiguous</NAME>
<RETURNS>requiem_bool_t </RETURNS>
const idmef_path_t *path
</FUNCTION>
<FUNCTION>
<NAME>idmef_path_has_lists</NAME>
<RETURNS>int </RETURNS>
const idmef_path_t *path
</FUNCTION>
<FUNCTION>
<NAME>idmef_path_is_list</NAME>
<RETURNS>requiem_bool_t </RETURNS>
const idmef_path_t *path, int depth
</FUNCTION>
<FUNCTION>
<NAME>idmef_path_get_depth</NAME>
<RETURNS>unsigned int </RETURNS>
const idmef_path_t *path
</FUNCTION>
<FUNCTION>
<NAME>idmef_path_check_operator</NAME>
<RETURNS>int </RETURNS>
const idmef_path_t *path, idmef_criterion_operator_t op
</FUNCTION>
<FUNCTION>
<NAME>idmef_path_get_applicable_operators</NAME>
<RETURNS>int </RETURNS>
const idmef_path_t *path, idmef_criterion_operator_t *result
</FUNCTION>
<TYPEDEF>
<NAME>idmef_value_t</NAME>
typedef struct idmef_value idmef_value_t;
</TYPEDEF>
<FUNCTION>
<NAME>idmef_value_new_int8</NAME>
<RETURNS>int </RETURNS>
idmef_value_t **value, int8_t val
</FUNCTION>
<FUNCTION>
<NAME>idmef_value_new_uint8</NAME>
<RETURNS>int </RETURNS>
idmef_value_t **value, uint8_t val
</FUNCTION>
<FUNCTION>
<NAME>idmef_value_new_int16</NAME>
<RETURNS>int </RETURNS>
idmef_value_t **value, int16_t val
</FUNCTION>
<FUNCTION>
<NAME>idmef_value_new_uint16</NAME>
<RETURNS>int </RETURNS>
idmef_value_t **value, uint16_t val
</FUNCTION>
<FUNCTION>
<NAME>idmef_value_new_int32</NAME>
<RETURNS>int </RETURNS>
idmef_value_t **value, int32_t val
</FUNCTION>
<FUNCTION>
<NAME>idmef_value_new_uint32</NAME>
<RETURNS>int </RETURNS>
idmef_value_t **value, uint32_t val
</FUNCTION>
<FUNCTION>
<NAME>idmef_value_new_int64</NAME>
<RETURNS>int </RETURNS>
idmef_value_t **value, int64_t val
</FUNCTION>
<FUNCTION>
<NAME>idmef_value_new_uint64</NAME>
<RETURNS>int </RETURNS>
idmef_value_t **value, uint64_t val
</FUNCTION>
<FUNCTION>
<NAME>idmef_value_new_float</NAME>
<RETURNS>int </RETURNS>
idmef_value_t **value, float val
</FUNCTION>
<FUNCTION>
<NAME>idmef_value_new_double</NAME>
<RETURNS>int </RETURNS>
idmef_value_t **value, double val
</FUNCTION>
<FUNCTION>
<NAME>idmef_value_new_string</NAME>
<RETURNS>int </RETURNS>
idmef_value_t **value, requiem_string_t *string
</FUNCTION>
<FUNCTION>
<NAME>idmef_value_new_time</NAME>
<RETURNS>int </RETURNS>
idmef_value_t **value, idmef_time_t *time
</FUNCTION>
<FUNCTION>
<NAME>idmef_value_new_data</NAME>
<RETURNS>int </RETURNS>
idmef_value_t **value, idmef_data_t *data
</FUNCTION>
<FUNCTION>
<NAME>idmef_value_new_class</NAME>
<RETURNS>int </RETURNS>
idmef_value_t **value, idmef_class_id_t classid, void *ptr
</FUNCTION>
<FUNCTION>
<NAME>idmef_value_new_list</NAME>
<RETURNS>int </RETURNS>
idmef_value_t **value
</FUNCTION>
<FUNCTION>
<NAME>idmef_value_new_enum</NAME>
<RETURNS>int </RETURNS>
idmef_value_t **value, idmef_class_id_t classid, const char *buf
</FUNCTION>
<FUNCTION>
<NAME>idmef_value_new_enum_from_string</NAME>
<RETURNS>int </RETURNS>
idmef_value_t **value, idmef_class_id_t classid, const char *buf
</FUNCTION>
<FUNCTION>
<NAME>idmef_value_new_enum_from_numeric</NAME>
<RETURNS>int </RETURNS>
idmef_value_t **value, idmef_class_id_t classid, int val
</FUNCTION>
<FUNCTION>
<NAME>idmef_value_set_int8</NAME>
<RETURNS>int </RETURNS>
idmef_value_t *value, int8_t val
</FUNCTION>
<FUNCTION>
<NAME>idmef_value_set_uint8</NAME>
<RETURNS>int </RETURNS>
idmef_value_t *value, uint8_t val
</FUNCTION>
<FUNCTION>
<NAME>idmef_value_set_int16</NAME>
<RETURNS>int </RETURNS>
idmef_value_t *value, int16_t val
</FUNCTION>
<FUNCTION>
<NAME>idmef_value_set_uint16</NAME>
<RETURNS>int </RETURNS>
idmef_value_t *value, uint16_t val
</FUNCTION>
<FUNCTION>
<NAME>idmef_value_set_int32</NAME>
<RETURNS>int </RETURNS>
idmef_value_t *value, int32_t val
</FUNCTION>
<FUNCTION>
<NAME>idmef_value_set_uint32</NAME>
<RETURNS>int </RETURNS>
idmef_value_t *value, uint32_t val
</FUNCTION>
<FUNCTION>
<NAME>idmef_value_set_int64</NAME>
<RETURNS>int </RETURNS>
idmef_value_t *value, int64_t val
</FUNCTION>
<FUNCTION>
<NAME>idmef_value_set_uint64</NAME>
<RETURNS>int </RETURNS>
idmef_value_t *value, uint64_t val
</FUNCTION>
<FUNCTION>
<NAME>idmef_value_set_float</NAME>
<RETURNS>int </RETURNS>
idmef_value_t *value, float val
</FUNCTION>
<FUNCTION>
<NAME>idmef_value_set_double</NAME>
<RETURNS>int </RETURNS>
idmef_value_t *value, double val
</FUNCTION>
<FUNCTION>
<NAME>idmef_value_set_string</NAME>
<RETURNS>int </RETURNS>
idmef_value_t *value, requiem_string_t *string
</FUNCTION>
<FUNCTION>
<NAME>idmef_value_set_time</NAME>
<RETURNS>int </RETURNS>
idmef_value_t *value, idmef_time_t *time
</FUNCTION>
<FUNCTION>
<NAME>idmef_value_set_data</NAME>
<RETURNS>int </RETURNS>
idmef_value_t *value, idmef_data_t *data
</FUNCTION>
<FUNCTION>
<NAME>idmef_value_set_enum</NAME>
<RETURNS>int </RETURNS>
idmef_value_t *value, idmef_class_id_t classid, const char *buf
</FUNCTION>
<FUNCTION>
<NAME>idmef_value_set_enum_from_string</NAME>
<RETURNS>int </RETURNS>
idmef_value_t *value, idmef_class_id_t classid, const char *buf
</FUNCTION>
<FUNCTION>
<NAME>idmef_value_set_enum_from_numeric</NAME>
<RETURNS>int </RETURNS>
idmef_value_t *value, idmef_class_id_t classid, int no
</FUNCTION>
<FUNCTION>
<NAME>idmef_value_set_class</NAME>
<RETURNS>int </RETURNS>
idmef_value_t *value, idmef_class_id_t classid, void *ptr
</FUNCTION>
<FUNCTION>
<NAME>idmef_value_new</NAME>
<RETURNS>int </RETURNS>
idmef_value_t **value, idmef_value_type_id_t type, void *ptr
</FUNCTION>
<FUNCTION>
<NAME>idmef_value_new_from_path</NAME>
<RETURNS>int </RETURNS>
idmef_value_t **value, idmef_path_t *path, const char *buf
</FUNCTION>
<FUNCTION>
<NAME>idmef_value_new_from_string</NAME>
<RETURNS>int </RETURNS>
idmef_value_t **value, idmef_value_type_id_t type, const char *buf
</FUNCTION>
<FUNCTION>
<NAME>idmef_value_get_int8</NAME>
<RETURNS>int8_t </RETURNS>
const idmef_value_t *val
</FUNCTION>
<FUNCTION>
<NAME>idmef_value_get_uint8</NAME>
<RETURNS>uint8_t </RETURNS>
const idmef_value_t *val
</FUNCTION>
<FUNCTION>
<NAME>idmef_value_get_int16</NAME>
<RETURNS>int16_t </RETURNS>
const idmef_value_t *val
</FUNCTION>
<FUNCTION>
<NAME>idmef_value_get_uint16</NAME>
<RETURNS>uint16_t </RETURNS>
const idmef_value_t *val
</FUNCTION>
<FUNCTION>
<NAME>idmef_value_get_int32</NAME>
<RETURNS>int32_t </RETURNS>
const idmef_value_t *val
</FUNCTION>
<FUNCTION>
<NAME>idmef_value_get_uint32</NAME>
<RETURNS>uint32_t </RETURNS>
const idmef_value_t *val
</FUNCTION>
<FUNCTION>
<NAME>idmef_value_get_int64</NAME>
<RETURNS>int64_t </RETURNS>
const idmef_value_t *val
</FUNCTION>
<FUNCTION>
<NAME>idmef_value_get_uint64</NAME>
<RETURNS>uint64_t </RETURNS>
const idmef_value_t *val
</FUNCTION>
<FUNCTION>
<NAME>idmef_value_get_enum</NAME>
<RETURNS>int </RETURNS>
const idmef_value_t *val
</FUNCTION>
<FUNCTION>
<NAME>idmef_value_get_float</NAME>
<RETURNS>float </RETURNS>
const idmef_value_t *val
</FUNCTION>
<FUNCTION>
<NAME>idmef_value_get_double</NAME>
<RETURNS>double </RETURNS>
const idmef_value_t *val
</FUNCTION>
<FUNCTION>
<NAME>idmef_value_get_time</NAME>
<RETURNS>idmef_time_t *</RETURNS>
const idmef_value_t *val
</FUNCTION>
<FUNCTION>
<NAME>idmef_value_get_data</NAME>
<RETURNS>idmef_data_t *</RETURNS>
const idmef_value_t *val
</FUNCTION>
<FUNCTION>
<NAME>idmef_value_get_string</NAME>
<RETURNS>requiem_string_t *</RETURNS>
const idmef_value_t *val
</FUNCTION>
<FUNCTION>
<NAME>idmef_value_list_add</NAME>
<RETURNS>int </RETURNS>
idmef_value_t *list, idmef_value_t *item
</FUNCTION>
<FUNCTION>
<NAME>idmef_value_is_list</NAME>
<RETURNS>requiem_bool_t </RETURNS>
const idmef_value_t *list
</FUNCTION>
<FUNCTION>
<NAME>idmef_value_list_is_empty</NAME>
<RETURNS>requiem_bool_t </RETURNS>
const idmef_value_t *list
</FUNCTION>
<FUNCTION>
<NAME>idmef_value_have_own_data</NAME>
<RETURNS>int </RETURNS>
idmef_value_t *value
</FUNCTION>
<FUNCTION>
<NAME>idmef_value_dont_have_own_data</NAME>
<RETURNS>int </RETURNS>
idmef_value_t *value
</FUNCTION>
<FUNCTION>
<NAME>idmef_value_get_type</NAME>
<RETURNS>idmef_value_type_id_t </RETURNS>
const idmef_value_t *value
</FUNCTION>
<FUNCTION>
<NAME>idmef_value_get_class</NAME>
<RETURNS>idmef_class_id_t </RETURNS>
const idmef_value_t *value
</FUNCTION>
<FUNCTION>
<NAME>idmef_value_get_object</NAME>
<RETURNS>void *</RETURNS>
const idmef_value_t *value
</FUNCTION>
<FUNCTION>
<NAME>idmef_value_iterate</NAME>
<RETURNS>int </RETURNS>
const idmef_value_t *value, int (*callback)(idmef_value_t *ptr, void *extra), void *extra
</FUNCTION>
<FUNCTION>
<NAME>idmef_value_iterate_reversed</NAME>
<RETURNS>int </RETURNS>
const idmef_value_t *value, int (*callback)(idmef_value_t *ptr, void *extra), void *extra
</FUNCTION>
<FUNCTION>
<NAME>idmef_value_get_nth</NAME>
<RETURNS>idmef_value_t *</RETURNS>
const idmef_value_t *val, int n
</FUNCTION>
<FUNCTION>
<NAME>idmef_value_get_count</NAME>
<RETURNS>int </RETURNS>
const idmef_value_t *val
</FUNCTION>
<FUNCTION>
<NAME>idmef_value_clone</NAME>
<RETURNS>int </RETURNS>
const idmef_value_t *val, idmef_value_t **dst
</FUNCTION>
<FUNCTION>
<NAME>idmef_value_ref</NAME>
<RETURNS>idmef_value_t *</RETURNS>
idmef_value_t *val
</FUNCTION>
<FUNCTION>
<NAME>idmef_value_print</NAME>
<RETURNS>int </RETURNS>
const idmef_value_t *val, requiem_io_t *fd
</FUNCTION>
<FUNCTION>
<NAME>idmef_value_to_string</NAME>
<RETURNS>int </RETURNS>
const idmef_value_t *val, requiem_string_t *out
</FUNCTION>
<FUNCTION>
<NAME>idmef_value_get</NAME>
<RETURNS>int </RETURNS>
const idmef_value_t *val, void *res
</FUNCTION>
<FUNCTION>
<NAME>idmef_value_match</NAME>
<RETURNS>int </RETURNS>
idmef_value_t *val1, idmef_value_t *val2, idmef_criterion_operator_t op
</FUNCTION>
<FUNCTION>
<NAME>idmef_value_check_operator</NAME>
<RETURNS>int </RETURNS>
const idmef_value_t *value, idmef_criterion_operator_t op
</FUNCTION>
<FUNCTION>
<NAME>idmef_value_get_applicable_operators</NAME>
<RETURNS>int </RETURNS>
const idmef_value_t *value, idmef_criterion_operator_t *result
</FUNCTION>
<FUNCTION>
<NAME>idmef_value_destroy</NAME>
<RETURNS>void </RETURNS>
idmef_value_t *val
</FUNCTION>
<TYPEDEF>
<NAME>requiem_msg_t</NAME>
typedef struct requiem_msg requiem_msg_t;
</TYPEDEF>
<ENUM>
<NAME>requiem_msg_priority_t</NAME>
typedef enum {
        REQUIEM_MSG_PRIORITY_NONE = 0,
        REQUIEM_MSG_PRIORITY_LOW  = 1,
        REQUIEM_MSG_PRIORITY_MID  = 2,
        REQUIEM_MSG_PRIORITY_HIGH = 3
} requiem_msg_priority_t;
</ENUM>
<FUNCTION>
<NAME>requiem_msg_read</NAME>
<RETURNS>int </RETURNS>
requiem_msg_t **msg, requiem_io_t *pio
</FUNCTION>
<FUNCTION>
<NAME>requiem_msg_forward</NAME>
<RETURNS>int </RETURNS>
requiem_msg_t *msg, requiem_io_t *dst, requiem_io_t *src
</FUNCTION>
<FUNCTION>
<NAME>requiem_msg_get</NAME>
<RETURNS>int </RETURNS>
requiem_msg_t *msg, uint8_t *tag, uint32_t *len, void **buf
</FUNCTION>
<FUNCTION>
<NAME>requiem_msg_recycle</NAME>
<RETURNS>void </RETURNS>
requiem_msg_t *msg
</FUNCTION>
<FUNCTION>
<NAME>requiem_msg_mark_end</NAME>
<RETURNS>void </RETURNS>
requiem_msg_t *msg
</FUNCTION>
<FUNCTION>
<NAME>requiem_msg_dynamic_new</NAME>
<RETURNS>int </RETURNS>
requiem_msg_t **ret, int (*flush_msg_cb)(requiem_msg_t **msg, void *data), void *data
</FUNCTION>
<FUNCTION>
<NAME>requiem_msg_new</NAME>
<RETURNS>int </RETURNS>
requiem_msg_t **ret, size_t msgcount, size_t msglen, uint8_t tag, requiem_msg_priority_t priority
</FUNCTION>
<FUNCTION>
<NAME>requiem_msg_set</NAME>
<RETURNS>int </RETURNS>
requiem_msg_t *msg, uint8_t tag, uint32_t len, const void *data
</FUNCTION>
<FUNCTION>
<NAME>requiem_msg_write</NAME>
<RETURNS>int </RETURNS>
requiem_msg_t *msg, requiem_io_t *dst
</FUNCTION>
<FUNCTION>
<NAME>requiem_msg_set_tag</NAME>
<RETURNS>void </RETURNS>
requiem_msg_t *msg, uint8_t tag
</FUNCTION>
<FUNCTION>
<NAME>requiem_msg_set_priority</NAME>
<RETURNS>void </RETURNS>
requiem_msg_t *msg, requiem_msg_priority_t priority
</FUNCTION>
<FUNCTION>
<NAME>requiem_msg_get_tag</NAME>
<RETURNS>uint8_t </RETURNS>
requiem_msg_t *msg
</FUNCTION>
<FUNCTION>
<NAME>requiem_msg_get_priority</NAME>
<RETURNS>requiem_msg_priority_t </RETURNS>
requiem_msg_t *msg
</FUNCTION>
<FUNCTION>
<NAME>requiem_msg_get_len</NAME>
<RETURNS>uint32_t </RETURNS>
requiem_msg_t *msg
</FUNCTION>
<FUNCTION>
<NAME>requiem_msg_get_datalen</NAME>
<RETURNS>uint32_t </RETURNS>
requiem_msg_t *msg
</FUNCTION>
<FUNCTION>
<NAME>requiem_msg_get_message_data</NAME>
<RETURNS>const unsigned char *</RETURNS>
requiem_msg_t *msg
</FUNCTION>
<FUNCTION>
<NAME>requiem_msg_get_time</NAME>
<RETURNS>struct timeval *</RETURNS>
requiem_msg_t *msg, struct timeval *tv
</FUNCTION>
<FUNCTION>
<NAME>requiem_msg_is_empty</NAME>
<RETURNS>int </RETURNS>
requiem_msg_t *msg
</FUNCTION>
<FUNCTION>
<NAME>requiem_msg_is_fragment</NAME>
<RETURNS>int </RETURNS>
requiem_msg_t *msg
</FUNCTION>
<FUNCTION>
<NAME>requiem_msg_destroy</NAME>
<RETURNS>void </RETURNS>
requiem_msg_t *msg
</FUNCTION>
<FUNCTION>
<NAME>requiem_msg_set_callback</NAME>
<RETURNS>void </RETURNS>
requiem_msg_t *msg, int (*flush_msg_cb)(requiem_msg_t **msg, void *data)
</FUNCTION>
<FUNCTION>
<NAME>requiem_msg_set_data</NAME>
<RETURNS>void </RETURNS>
requiem_msg_t *msg, void *data
</FUNCTION>
<FUNCTION>
<NAME>requiem_msg_ref</NAME>
<RETURNS>requiem_msg_t *</RETURNS>
requiem_msg_t *msg
</FUNCTION>
<MACRO>
<NAME>REQUIEM_LIST</NAME>
#define REQUIEM_LIST(item) requiem_list_t (item) = { &(item), &(item) }
</MACRO>
<STRUCT>
<NAME>requiem_list_t</NAME>
typedef struct requiem_list {
        struct requiem_list *next;
        struct requiem_list *prev;
} requiem_list_t;
</STRUCT>
<MACRO>
<NAME>requiem_list_entry</NAME>
#define requiem_list_entry(item, type, member)                             \
        (type *) ((unsigned long) item - (unsigned long) &((type *) 0)->member)
</MACRO>
<MACRO>
<NAME>requiem_list_for_each</NAME>
#define requiem_list_for_each(list, pos)                                   \
        for ( (pos) = (list)->next; (pos) != (list); (pos) = (pos)->next )
</MACRO>
<MACRO>
<NAME>requiem_list_for_each_safe</NAME>
#define requiem_list_for_each_safe(list, pos, bkp)                         \
        for ( (pos) = (list)->next, (bkp) = (pos)->next; (pos) != (list); (pos) = (bkp), (bkp) = (pos)->next )
</MACRO>
<MACRO>
<NAME>requiem_list_for_each_reversed</NAME>
#define requiem_list_for_each_reversed(list, pos)                          \
        for ( (pos) = (list)->prev; (pos) != (list); (pos) = (pos)->prev ) 
</MACRO>
<MACRO>
<NAME>requiem_list_for_each_reversed_safe</NAME>
#define requiem_list_for_each_reversed_safe(list, pos, bkp)                \
        for ( (pos) = (list)->prev, (bkp) = (pos)->prev; (pos) != (list); (pos) = (bkp), (bkp) = (pos)->prev )
</MACRO>
<MACRO>
<NAME>requiem_list_for_each_continue</NAME>
#define requiem_list_for_each_continue(list, pos)                          \
        for ( (pos) = ((pos) == NULL) ? (list)->next : (pos)->next; (pos) != (list); (pos) = (pos)->next )
</MACRO>
<MACRO>
<NAME>requiem_list_for_each_continue_safe</NAME>
#define requiem_list_for_each_continue_safe(list, pos, bkp)                \
        for ( (pos) = ((bkp) == NULL) ? (list)->next : (bkp); (bkp) = (pos)->next, (pos) != (list); (pos) = (bkp) )
</MACRO>
<MACRO>
<NAME>requiem_list_get_next</NAME>
#define requiem_list_get_next(list, pos, class, member) \
        pos ? \
                ((pos)->member.next == (list)) ? NULL : \
                                requiem_list_entry((pos)->member.next, class, member) \
        : \
                ((list)->next == (list)) ? NULL : \
                                requiem_list_entry((list)->next, class, member)
</MACRO>
<MACRO>
<NAME>requiem_list_get_next_safe</NAME>
#define requiem_list_get_next_safe(list, pos, bkp, class, member)                                                                \
        pos ?                                                                                                            \
              (((pos) = bkp),                                                                                            \
               ((bkp) = (! (bkp) || (bkp)->member.next == list) ? NULL : requiem_list_entry((pos)->member.next, class, member)), \
               (pos))                                                                                                    \
        :                                                                                                                \
              (((pos) = ((list)->next == list) ? NULL : requiem_list_entry((list)->next, class, member)),                        \
               ((bkp) = (! (pos) ||(pos)->member.next == list ) ? NULL : requiem_list_entry((pos)->member.next, class, member)), \
               (pos))
</MACRO>
<MACRO>
<NAME>REQUIEM_PLUGIN_API_VERSION</NAME>
#define REQUIEM_PLUGIN_API_VERSION 1
</MACRO>
<TYPEDEF>
<NAME>requiem_plugin_entry_t</NAME>
typedef struct requiem_plugin_entry requiem_plugin_entry_t;
</TYPEDEF>
<TYPEDEF>
<NAME>requiem_plugin_instance_t</NAME>
typedef struct requiem_plugin_instance requiem_plugin_instance_t;
</TYPEDEF>
<MACRO>
<NAME>REQUIEM_PLUGIN_GENERIC</NAME>
#define REQUIEM_PLUGIN_GENERIC               \
        requiem_plugin_entry_t *_pe;         \
        char *name;                          \
        void (*destroy)(requiem_plugin_instance_t *pi, requiem_string_t *err)
</MACRO>
<STRUCT>
<NAME>requiem_plugin_generic_t</NAME>
typedef struct {
        REQUIEM_PLUGIN_GENERIC;
} requiem_plugin_generic_t;
</STRUCT>
<MACRO>
<NAME>lt_preloaded_symbols</NAME>
# define lt_preloaded_symbols lt__PROGRAM__LTX_preloaded_symbols
</MACRO>
<MACRO>
<NAME>REQUIEM_PLUGIN_SET_PRELOADED_SYMBOLS</NAME>
#define REQUIEM_PLUGIN_SET_PRELOADED_SYMBOLS()         \
        requiem_plugin_set_preloaded_symbols(lt_preloaded_symbols)
</MACRO>
<MACRO>
<NAME>REQUIEM_PLUGIN_OPTION_DECLARE_STRING_CB</NAME>
#define REQUIEM_PLUGIN_OPTION_DECLARE_STRING_CB(prefix, type, name)                              \
static int prefix ## _set_ ## name(requiem_option_t *opt, const char *optarg, requiem_string_t *err, void *context)  \
{                                                                                                \
        char *dup = NULL;                                                                        \
        type *ptr = requiem_plugin_instance_get_plugin_data(context);                            \
                                                                                                 \
        if ( optarg ) {                                                                          \
                dup = strdup(optarg);                                                            \
                if ( ! dup )                                                                     \
                        return requiem_error_from_errno(errno);                                  \
        }                                                                                        \
                                                                                                 \
        if ( ptr->name )                                                                         \
                free(ptr->name);                                                                 \
                                                                                                 \
        ptr->name = dup;                                                                         \
                                                                                                 \
        return 0;                                                                                \
}                                                                                                \
                                                                                                 \
                                                                                                 \
static int prefix ## _get_ ## name(requiem_option_t *opt, requiem_string_t *out, void *context)  \
{                                                                                                \
        type *ptr = requiem_plugin_instance_get_plugin_data(context);                            \
        if ( ptr->name )                                                                         \
                requiem_string_cat(out, ptr->name);                                              \
                                                                                                 \
        return 0;                                                                                \
}
</MACRO>
<MACRO>
<NAME>requiem_plugin_get_name</NAME>
#define requiem_plugin_get_name(p) (p)->name
</MACRO>
<MACRO>
<NAME>requiem_plugin_set_name</NAME>
#define requiem_plugin_set_name(p, str) (p)->name = (str)
</MACRO>
<MACRO>
<NAME>requiem_plugin_set_destroy_func</NAME>
#define requiem_plugin_set_destroy_func(p, func) (p)->destroy = func
</MACRO>
<FUNCTION>
<NAME>requiem_plugin_entry_set_plugin</NAME>
<RETURNS>void </RETURNS>
requiem_plugin_entry_t *pe, requiem_plugin_generic_t *pl
</FUNCTION>
<FUNCTION>
<NAME>requiem_plugin_set_activation_option</NAME>
<RETURNS>int </RETURNS>
requiem_plugin_entry_t *pe, requiem_option_t *opt,int (*commit)(requiem_plugin_instance_t *pi, requiem_string_t *err)
</FUNCTION>
<FUNCTION>
<NAME>requiem_plugin_instance_subscribe</NAME>
<RETURNS>int </RETURNS>
requiem_plugin_instance_t *pi
</FUNCTION>
<FUNCTION>
<NAME>requiem_plugin_instance_unsubscribe</NAME>
<RETURNS>int </RETURNS>
requiem_plugin_instance_t *pi
</FUNCTION>
<FUNCTION>
<NAME>requiem_plugin_new_instance</NAME>
<RETURNS>int </RETURNS>
requiem_plugin_instance_t **pi,requiem_plugin_generic_t *plugin, const char *name, void *data
</FUNCTION>
<FUNCTION>
<NAME>requiem_plugin_search_by_name</NAME>
<RETURNS>requiem_plugin_generic_t *</RETURNS>
requiem_list_t *head, const char *name
</FUNCTION>
<FUNCTION>
<NAME>requiem_plugin_search_instance_by_name</NAME>
<RETURNS>requiem_plugin_instance_t *</RETURNS>
requiem_list_t *head,const char *pname, const char *iname
</FUNCTION>
<FUNCTION>
<NAME>requiem_plugin_instance_set_data</NAME>
<RETURNS>void </RETURNS>
requiem_plugin_instance_t *pi, void *data
</FUNCTION>
<FUNCTION>
<NAME>requiem_plugin_instance_get_data</NAME>
<RETURNS>void *</RETURNS>
requiem_plugin_instance_t *pi
</FUNCTION>
<FUNCTION>
<NAME>requiem_plugin_instance_set_plugin_data</NAME>
<RETURNS>void </RETURNS>
requiem_plugin_instance_t *pi, void *data
</FUNCTION>
<FUNCTION>
<NAME>requiem_plugin_instance_get_plugin_data</NAME>
<RETURNS>void *</RETURNS>
requiem_plugin_instance_t *pi
</FUNCTION>
<FUNCTION>
<NAME>requiem_plugin_instance_get_name</NAME>
<RETURNS>const char *</RETURNS>
requiem_plugin_instance_t *pi
</FUNCTION>
<FUNCTION>
<NAME>requiem_plugin_instance_get_plugin</NAME>
<RETURNS>requiem_plugin_generic_t *</RETURNS>
requiem_plugin_instance_t *pi
</FUNCTION>
<FUNCTION>
<NAME>requiem_plugin_load_from_dir</NAME>
<RETURNS>int </RETURNS>
requiem_list_t *head,const char *dirname, const char *symbol, void *ptr,int (*subscribe)(requiem_plugin_instance_t *p),void (*unsubscribe)(requiem_plugin_instance_t *pi)
</FUNCTION>
<FUNCTION>
<NAME>requiem_plugin_instance_add</NAME>
<RETURNS>int </RETURNS>
requiem_plugin_instance_t *pi, requiem_list_t *h
</FUNCTION>
<FUNCTION>
<NAME>requiem_plugin_instance_del</NAME>
<RETURNS>void </RETURNS>
requiem_plugin_instance_t *pi
</FUNCTION>
<FUNCTION>
<NAME>requiem_plugin_instance_compute_time</NAME>
<RETURNS>void </RETURNS>
requiem_plugin_instance_t *pi,struct timeval *start, struct timeval *end
</FUNCTION>
<FUNCTION>
<NAME>requiem_plugin_instance_call_commit_func</NAME>
<RETURNS>int </RETURNS>
requiem_plugin_instance_t *pi, requiem_string_t *err
</FUNCTION>
<FUNCTION>
<NAME>requiem_plugin_instance_has_commit_func</NAME>
<RETURNS>requiem_bool_t </RETURNS>
requiem_plugin_instance_t *pi
</FUNCTION>
<FUNCTION>
<NAME>requiem_plugin_set_preloaded_symbols</NAME>
<RETURNS>void </RETURNS>
void *symlist
</FUNCTION>
<FUNCTION>
<NAME>requiem_plugin_get_next</NAME>
<RETURNS>requiem_plugin_generic_t *</RETURNS>
requiem_list_t *head, requiem_list_t **iter
</FUNCTION>
<FUNCTION>
<NAME>requiem_plugin_unload</NAME>
<RETURNS>void </RETURNS>
requiem_plugin_generic_t *plugin
</FUNCTION>
<MACRO>
<NAME>requiem_plugin_compute_stats</NAME>
#define requiem_plugin_compute_stats(pi, func) do {                            \
        struct timeval start, end;                                             \
        gettimeofday(&start, NULL);                                            \
        (func);                                                                \
        gettimeofday(&end, NULL);                                              \
        requiem_plugin_instance_compute_time(&start, &end);                    \
} while(0)
</MACRO>
<MACRO>
<NAME>requiem_plugin_run</NAME>
#define requiem_plugin_run(pi, type, member, ...) \
        (((type *)requiem_plugin_instance_get_plugin(pi))->member(__VA_ARGS__))
</MACRO>
<MACRO>
<NAME>REQUIEM_OPTION_REPLY_TYPE_SET</NAME>
#define REQUIEM_OPTION_REPLY_TYPE_SET   0x01
</MACRO>
<MACRO>
<NAME>REQUIEM_OPTION_REPLY_TYPE_GET</NAME>
#define REQUIEM_OPTION_REPLY_TYPE_GET   0x02
</MACRO>
<MACRO>
<NAME>REQUIEM_OPTION_REPLY_TYPE_LIST</NAME>
#define REQUIEM_OPTION_REPLY_TYPE_LIST  0x04
</MACRO>
<MACRO>
<NAME>REQUIEM_OPTION_REPLY_TYPE_ERROR</NAME>
#define REQUIEM_OPTION_REPLY_TYPE_ERROR 0x08
</MACRO>
<FUNCTION>
<NAME>requiem_option_push_request</NAME>
<RETURNS>int </RETURNS>
requiem_msgbuf_t *msg, int type, const char *request
</FUNCTION>
<FUNCTION>
<NAME>requiem_option_new_request</NAME>
<RETURNS>int </RETURNS>
requiem_msgbuf_t *msgbuf,uint32_t request_id, uint64_t *target_id, size_t size
</FUNCTION>
<FUNCTION>
<NAME>requiem_option_process_request</NAME>
<RETURNS>int </RETURNS>
requiem_client_t *client, requiem_msg_t *msg, requiem_msgbuf_t *reply
</FUNCTION>
<FUNCTION>
<NAME>requiem_option_recv_reply</NAME>
<RETURNS>int </RETURNS>
requiem_msg_t *msg, uint64_t *source_id, uint32_t *request_id, void **value
</FUNCTION>
<MACRO>
<NAME>REQUIEM_INT8_MIN</NAME>
#define REQUIEM_INT8_MIN               (-128)
</MACRO>
<MACRO>
<NAME>REQUIEM_INT16_MIN</NAME>
#define REQUIEM_INT16_MIN              (-32767 - 1)
</MACRO>
<MACRO>
<NAME>REQUIEM_INT32_MIN</NAME>
#define REQUIEM_INT32_MIN              (-2147483647 - 1)
</MACRO>
<MACRO>
<NAME>REQUIEM_INT64_MIN</NAME>
#define REQUIEM_INT64_MIN              (-__REQUIEM_INT64_SUFFIX(9223372036854775807) - 1)
</MACRO>
<MACRO>
<NAME>REQUIEM_INT8_MAX</NAME>
#define REQUIEM_INT8_MAX               (127)
</MACRO>
<MACRO>
<NAME>REQUIEM_INT16_MAX</NAME>
#define REQUIEM_INT16_MAX              (32767)
</MACRO>
<MACRO>
<NAME>REQUIEM_INT32_MAX</NAME>
#define REQUIEM_INT32_MAX              (2147483647)
</MACRO>
<MACRO>
<NAME>REQUIEM_INT64_MAX</NAME>
#define REQUIEM_INT64_MAX              (__REQUIEM_INT64_SUFFIX(9223372036854775807))
</MACRO>
<MACRO>
<NAME>REQUIEM_UINT8_MAX</NAME>
#define REQUIEM_UINT8_MAX              (255)
</MACRO>
<MACRO>
<NAME>REQUIEM_UINT16_MAX</NAME>
#define REQUIEM_UINT16_MAX             (65535)
</MACRO>
<MACRO>
<NAME>REQUIEM_UINT32_MAX</NAME>
#define REQUIEM_UINT32_MAX             (4294967295U)
</MACRO>
<MACRO>
<NAME>REQUIEM_UINT64_MAX</NAME>
#define REQUIEM_UINT64_MAX             (__REQUIEM_UINT64_SUFFIX(18446744073709551615))
</MACRO>
<MACRO>
<NAME>REQUIEM_INTMAX_MIN</NAME>
#define REQUIEM_INTMAX_MIN             INT64_MIN
</MACRO>
<MACRO>
<NAME>REQUIEM_INTMAX_MAX</NAME>
#define REQUIEM_INTMAX_MAX             INT64_MAX
</MACRO>
<MACRO>
<NAME>REQUIEM_UINTMAX_MAX</NAME>
#define REQUIEM_UINTMAX_MAX            UINT64_MAX
</MACRO>
<MACRO>
<NAME>REQUIEM_PRId64</NAME>
#define REQUIEM_PRId64      __REQUIEM_64BIT_FORMAT_PREFIX "d"
</MACRO>
<MACRO>
<NAME>REQUIEM_PRIi64</NAME>
#define REQUIEM_PRIi64      __REQUIEM_64BIT_FORMAT_PREFIX "i"
</MACRO>
<MACRO>
<NAME>REQUIEM_PRIo64</NAME>
#define REQUIEM_PRIo64      __REQUIEM_64BIT_FORMAT_PREFIX "o"
</MACRO>
<MACRO>
<NAME>REQUIEM_PRIx64</NAME>
#define REQUIEM_PRIx64      __REQUIEM_64BIT_FORMAT_PREFIX "x"
</MACRO>
<MACRO>
<NAME>REQUIEM_PRIX64</NAME>
#define REQUIEM_PRIX64      __REQUIEM_64BIT_FORMAT_PREFIX "X"
</MACRO>
<MACRO>
<NAME>REQUIEM_PRIu64</NAME>
#define REQUIEM_PRIu64      __REQUIEM_64BIT_FORMAT_PREFIX "u"
</MACRO>
<MACRO>
<NAME>REQUIEM_PRId32</NAME>
#define REQUIEM_PRId32      "d"
</MACRO>
<MACRO>
<NAME>REQUIEM_PRIi32</NAME>
#define REQUIEM_PRIi32      "i"
</MACRO>
<MACRO>
<NAME>REQUIEM_PRIo32</NAME>
#define REQUIEM_PRIo32      "o"
</MACRO>
<MACRO>
<NAME>REQUIEM_PRIx32</NAME>
#define REQUIEM_PRIx32      "x"
</MACRO>
<MACRO>
<NAME>REQUIEM_PRIX32</NAME>
#define REQUIEM_PRIX32      "X"
</MACRO>
<MACRO>
<NAME>REQUIEM_PRIu32</NAME>
#define REQUIEM_PRIu32      "u"
</MACRO>
<MACRO>
<NAME>REQUIEM_PRId16</NAME>
#define REQUIEM_PRId16      "d"
</MACRO>
<MACRO>
<NAME>REQUIEM_PRIi16</NAME>
#define REQUIEM_PRIi16      "i"
</MACRO>
<MACRO>
<NAME>REQUIEM_PRIo16</NAME>
#define REQUIEM_PRIo16      "o"
</MACRO>
<MACRO>
<NAME>REQUIEM_PRIx16</NAME>
#define REQUIEM_PRIx16      "x"
</MACRO>
<MACRO>
<NAME>REQUIEM_PRIX16</NAME>
#define REQUIEM_PRIX16      "X"
</MACRO>
<MACRO>
<NAME>REQUIEM_PRIu16</NAME>
#define REQUIEM_PRIu16      "u"
</MACRO>
<MACRO>
<NAME>REQUIEM_PRId8</NAME>
#define REQUIEM_PRId8       "d"
</MACRO>
<MACRO>
<NAME>REQUIEM_PRIi8</NAME>
#define REQUIEM_PRIi8       "i"
</MACRO>
<MACRO>
<NAME>REQUIEM_PRIo8</NAME>
#define REQUIEM_PRIo8       "o"
</MACRO>
<MACRO>
<NAME>REQUIEM_PRIx8</NAME>
#define REQUIEM_PRIx8       "x"
</MACRO>
<MACRO>
<NAME>REQUIEM_PRIX8</NAME>
#define REQUIEM_PRIX8       "X"
</MACRO>
<MACRO>
<NAME>REQUIEM_PRIu8</NAME>
#define REQUIEM_PRIu8       "u"
</MACRO>
<MACRO>
<NAME>REQUIEM_SCNd64</NAME>
#define REQUIEM_SCNd64      __REQUIEM_64BIT_FORMAT_PREFIX "d"
</MACRO>
<MACRO>
<NAME>REQUIEM_SCNi64</NAME>
#define REQUIEM_SCNi64      __REQUIEM_64BIT_FORMAT_PREFIX "i"
</MACRO>
<MACRO>
<NAME>REQUIEM_SCNo64</NAME>
#define REQUIEM_SCNo64      __REQUIEM_64BIT_FORMAT_PREFIX "o"
</MACRO>
<MACRO>
<NAME>REQUIEM_SCNx64</NAME>
#define REQUIEM_SCNx64      __REQUIEM_64BIT_FORMAT_PREFIX "x"
</MACRO>
<MACRO>
<NAME>REQUIEM_SCNu64</NAME>
#define REQUIEM_SCNu64      __REQUIEM_64BIT_FORMAT_PREFIX "u"
</MACRO>
<ENUM>
<NAME>requiem_bool_t</NAME>
typedef enum { 
	REQUIEM_BOOL_TRUE = TRUE, 
	REQUIEM_BOOL_FALSE = FALSE 
} requiem_bool_t;
</ENUM>
<TYPEDEF>
<NAME>int8_t</NAME>
 typedef signed char int8_t;
</TYPEDEF>
<TYPEDEF>
<NAME>uint8_t</NAME>
 typedef unsigned char uint8_t;
</TYPEDEF>
<TYPEDEF>
<NAME>int16_t</NAME>
 typedef short int16_t;
</TYPEDEF>
<TYPEDEF>
<NAME>uint16_t</NAME>
 typedef unsigned short uint16_t;
</TYPEDEF>
<TYPEDEF>
<NAME>int32_t</NAME>
 typedef int int32_t;
</TYPEDEF>
<TYPEDEF>
<NAME>uint32_t</NAME>
 typedef unsigned int uint32_t;
</TYPEDEF>
<TYPEDEF>
<NAME>int64_t</NAME>
  typedef long int64_t;
</TYPEDEF>
<TYPEDEF>
<NAME>uint64_t</NAME>
  typedef unsigned long uint64_t;
</TYPEDEF>
<TYPEDEF>
<NAME>int64_t</NAME>
  typedef long long int64_t;
</TYPEDEF>
<TYPEDEF>
<NAME>uint64_t</NAME>
  typedef unsigned long long uint64_t;
</TYPEDEF>
<MACRO>
<NAME>REQUIEM_LINKED_OBJECT</NAME>
#define REQUIEM_LINKED_OBJECT   \
        requiem_list_t _list;   \
        unsigned int _object_id
</MACRO>
<STRUCT>
<NAME>requiem_linked_object_t</NAME>
typedef struct {
        REQUIEM_LINKED_OBJECT;
} requiem_linked_object_t;
</STRUCT>
<MACRO>
<NAME>requiem_linked_object_get_object</NAME>
#define requiem_linked_object_get_object(object)  \
        (void *) requiem_list_entry(object, requiem_linked_object_t, _list)
</MACRO>
<ENUM>
<NAME>requiem_connection_pool_flags_t</NAME>
typedef enum {
        REQUIEM_CONNECTION_POOL_FLAGS_RECONNECT        = 0x01,
        REQUIEM_CONNECTION_POOL_FLAGS_FAILOVER         = 0x02
} requiem_connection_pool_flags_t;
</ENUM>
<ENUM>
<NAME>requiem_connection_pool_event_t</NAME>
typedef enum {
        REQUIEM_CONNECTION_POOL_EVENT_INPUT            = 0x01,
        REQUIEM_CONNECTION_POOL_EVENT_DEAD             = 0x02,
        REQUIEM_CONNECTION_POOL_EVENT_ALIVE            = 0x04
} requiem_connection_pool_event_t;
</ENUM>
<TYPEDEF>
<NAME>requiem_connection_pool_t</NAME>
typedef struct requiem_connection_pool requiem_connection_pool_t;
</TYPEDEF>
<FUNCTION>
<NAME>requiem_connection_pool_broadcast</NAME>
<RETURNS>void </RETURNS>
requiem_connection_pool_t *pool, requiem_msg_t *msg
</FUNCTION>
<FUNCTION>
<NAME>requiem_connection_pool_broadcast_async</NAME>
<RETURNS>void </RETURNS>
requiem_connection_pool_t *pool, requiem_msg_t *msg
</FUNCTION>
<FUNCTION>
<NAME>requiem_connection_pool_init</NAME>
<RETURNS>int </RETURNS>
requiem_connection_pool_t *pool
</FUNCTION>
<FUNCTION>
<NAME>requiem_connection_pool_new</NAME>
<RETURNS>int </RETURNS>
requiem_connection_pool_t **ret,requiem_client_profile_t *cp,requiem_connection_permission_t permission
</FUNCTION>
<FUNCTION>
<NAME>requiem_connection_pool_get_connection_list</NAME>
<RETURNS>requiem_list_t *</RETURNS>
requiem_connection_pool_t *pool
</FUNCTION>
<FUNCTION>
<NAME>requiem_connection_pool_add_connection</NAME>
<RETURNS>int </RETURNS>
requiem_connection_pool_t *pool, requiem_connection_t *cnx
</FUNCTION>
<FUNCTION>
<NAME>requiem_connection_pool_del_connection</NAME>
<RETURNS>int </RETURNS>
requiem_connection_pool_t *pool, requiem_connection_t *cnx
</FUNCTION>
<FUNCTION>
<NAME>requiem_connection_pool_set_connection_dead</NAME>
<RETURNS>int </RETURNS>
requiem_connection_pool_t *pool, requiem_connection_t *cnx
</FUNCTION>
<FUNCTION>
<NAME>requiem_connection_pool_set_connection_alive</NAME>
<RETURNS>int </RETURNS>
requiem_connection_pool_t *pool, requiem_connection_t *cnx
</FUNCTION>
<FUNCTION>
<NAME>requiem_connection_pool_set_connection_string</NAME>
<RETURNS>int </RETURNS>
requiem_connection_pool_t *pool, const char *cfgstr
</FUNCTION>
<FUNCTION>
<NAME>requiem_connection_pool_get_connection_string</NAME>
<RETURNS>const char *</RETURNS>
requiem_connection_pool_t *pool
</FUNCTION>
<FUNCTION>
<NAME>requiem_connection_pool_destroy</NAME>
<RETURNS>void </RETURNS>
requiem_connection_pool_t *pool
</FUNCTION>
<FUNCTION>
<NAME>requiem_connection_pool_ref</NAME>
<RETURNS>requiem_connection_pool_t *</RETURNS>
requiem_connection_pool_t *pool
</FUNCTION>
<FUNCTION>
<NAME>requiem_connection_pool_get_flags</NAME>
<RETURNS>requiem_connection_pool_flags_t </RETURNS>
requiem_connection_pool_t *pool
</FUNCTION>
<FUNCTION>
<NAME>requiem_connection_pool_set_flags</NAME>
<RETURNS>void </RETURNS>
requiem_connection_pool_t *pool, requiem_connection_pool_flags_t flags
</FUNCTION>
<FUNCTION>
<NAME>requiem_connection_pool_set_required_permission</NAME>
<RETURNS>void </RETURNS>
requiem_connection_pool_t *pool, requiem_connection_permission_t req_perm
</FUNCTION>
<FUNCTION>
<NAME>requiem_connection_pool_set_data</NAME>
<RETURNS>void </RETURNS>
requiem_connection_pool_t *pool, void *data
</FUNCTION>
<FUNCTION>
<NAME>requiem_connection_pool_get_data</NAME>
<RETURNS>void *</RETURNS>
requiem_connection_pool_t *pool
</FUNCTION>
<FUNCTION>
<NAME>requiem_connection_pool_recv</NAME>
<RETURNS>int </RETURNS>
requiem_connection_pool_t *pool, int timeout, requiem_connection_t **outcon, requiem_msg_t **outmsg
</FUNCTION>
<FUNCTION>
<NAME>requiem_connection_pool_check_event</NAME>
<RETURNS>int </RETURNS>
requiem_connection_pool_t *pool, int timeout,int (*event_cb)(requiem_connection_pool_t *pool,requiem_connection_pool_event_t event,requiem_connection_t *cnx, void *extra), void *extra
</FUNCTION>
<FUNCTION>
<NAME>requiem_connection_pool_set_global_event_handler</NAME>
<RETURNS>void </RETURNS>
requiem_connection_pool_t *pool,requiem_connection_pool_event_t wanted_events,int (*callback)(requiem_connection_pool_t *pool,requiem_connection_pool_event_t events)
</FUNCTION>
<FUNCTION>
<NAME>requiem_connection_pool_set_event_handler</NAME>
<RETURNS>void </RETURNS>
requiem_connection_pool_t *pool,requiem_connection_pool_event_t wanted_events,int (*callback)(requiem_connection_pool_t *pool,requiem_connection_pool_event_t events,requiem_connection_t *cnx)
</FUNCTION>
<STRUCT>
<NAME>requiem_timer_t</NAME>
typedef struct {
        requiem_list_t list;

        int expire;
        time_t start_time;

        void *data;
        void (*function)(void *data);
} requiem_timer_t;
</STRUCT>
<MACRO>
<NAME>requiem_timer_get_expire</NAME>
#define requiem_timer_get_expire(timer) (timer)->expire
</MACRO>
<MACRO>
<NAME>requiem_timer_get_data</NAME>
#define requiem_timer_get_data(timer) (timer)->data
</MACRO>
<MACRO>
<NAME>requiem_timer_get_callback</NAME>
#define requiem_timer_get_callback(timer) (timer)->function
</MACRO>
<MACRO>
<NAME>requiem_timer_set_expire</NAME>
#define requiem_timer_set_expire(timer, x) requiem_timer_get_expire((timer)) = (x)
</MACRO>
<MACRO>
<NAME>requiem_timer_set_data</NAME>
#define requiem_timer_set_data(timer, x) requiem_timer_get_data((timer)) = (x)
</MACRO>
<MACRO>
<NAME>requiem_timer_set_callback</NAME>
#define requiem_timer_set_callback(timer, x) requiem_timer_get_callback((timer)) = (x)
</MACRO>
<FUNCTION>
<NAME>requiem_timer_init</NAME>
<RETURNS>void </RETURNS>
requiem_timer_t *timer
</FUNCTION>
<FUNCTION>
<NAME>requiem_timer_init_list</NAME>
<RETURNS>void </RETURNS>
requiem_timer_t *timer
</FUNCTION>
<FUNCTION>
<NAME>requiem_timer_reset</NAME>
<RETURNS>void </RETURNS>
requiem_timer_t *timer
</FUNCTION>
<FUNCTION>
<NAME>requiem_timer_destroy</NAME>
<RETURNS>void </RETURNS>
requiem_timer_t *timer
</FUNCTION>
<FUNCTION>
<NAME>requiem_timer_wake_up</NAME>
<RETURNS>void </RETURNS>
void
</FUNCTION>
<FUNCTION>
<NAME>requiem_timer_flush</NAME>
<RETURNS>void </RETURNS>
void
</FUNCTION>
<FUNCTION>
<NAME>requiem_timer_lock_critical_region</NAME>
<RETURNS>void </RETURNS>
void
</FUNCTION>
<FUNCTION>
<NAME>requiem_timer_unlock_critical_region</NAME>
<RETURNS>void </RETURNS>
void
</FUNCTION>
<TYPEDEF>
<NAME>requiem_hash_t</NAME>
typedef struct requiem_hash requiem_hash_t;
</TYPEDEF>
<FUNCTION>
<NAME>requiem_hash_new</NAME>
<RETURNS>int </RETURNS>
requiem_hash_t **hash,unsigned int (*hash_func)(const void *),int (*key_cmp_func)(const void *, const void *),void (*key_destroy_func)(void *),void (*value_destroy_func)(void *)
</FUNCTION>
<FUNCTION>
<NAME>requiem_hash_new2</NAME>
<RETURNS>int </RETURNS>
requiem_hash_t **hash, size_t size,unsigned int (*hash_func)(const void *),int (*key_cmp_func)(const void *, const void *),void (*key_destroy_func)(void *),void (*value_destroy_func)(void *)
</FUNCTION>
<FUNCTION>
<NAME>requiem_hash_destroy</NAME>
<RETURNS>void </RETURNS>
requiem_hash_t *hash
</FUNCTION>
<FUNCTION>
<NAME>requiem_hash_set</NAME>
<RETURNS>int </RETURNS>
requiem_hash_t *hash, void *key, void *value
</FUNCTION>
<FUNCTION>
<NAME>requiem_hash_get</NAME>
<RETURNS>void *</RETURNS>
requiem_hash_t *hash, const void *key
</FUNCTION>
<FUNCTION>
<NAME>requiem_hash_elem_destroy</NAME>
<RETURNS>int </RETURNS>
requiem_hash_t *hash, const void *key
</FUNCTION>
<FUNCTION>
<NAME>requiem_hash_iterate</NAME>
<RETURNS>void </RETURNS>
requiem_hash_t *hash, void (*cb)(void *data)
</FUNCTION>
<TYPEDEF>
<NAME>idmef_time_t</NAME>
typedef struct idmef_time idmef_time_t;
</TYPEDEF>
<FUNCTION>
<NAME>idmef_time_ref</NAME>
<RETURNS>idmef_time_t *</RETURNS>
idmef_time_t *time
</FUNCTION>
<FUNCTION>
<NAME>idmef_time_new</NAME>
<RETURNS>int </RETURNS>
idmef_time_t **time
</FUNCTION>
<FUNCTION>
<NAME>idmef_time_new_from_time</NAME>
<RETURNS>int </RETURNS>
idmef_time_t **time, const time_t *t
</FUNCTION>
<FUNCTION>
<NAME>idmef_time_new_from_gettimeofday</NAME>
<RETURNS>int </RETURNS>
idmef_time_t **time
</FUNCTION>
<FUNCTION>
<NAME>idmef_time_new_from_string</NAME>
<RETURNS>int </RETURNS>
idmef_time_t **time, const char *buf
</FUNCTION>
<FUNCTION>
<NAME>idmef_time_new_from_ntpstamp</NAME>
<RETURNS>int </RETURNS>
idmef_time_t **time, const char *buf
</FUNCTION>
<FUNCTION>
<NAME>idmef_time_new_from_timeval</NAME>
<RETURNS>int </RETURNS>
idmef_time_t **time, const struct timeval *tv
</FUNCTION>
<FUNCTION>
<NAME>idmef_time_set_from_time</NAME>
<RETURNS>void </RETURNS>
idmef_time_t *time, const time_t *t
</FUNCTION>
<FUNCTION>
<NAME>idmef_time_set_from_gettimeofday</NAME>
<RETURNS>int </RETURNS>
idmef_time_t *time
</FUNCTION>
<FUNCTION>
<NAME>idmef_time_set_from_string</NAME>
<RETURNS>int </RETURNS>
idmef_time_t *time, const char *buf
</FUNCTION>
<FUNCTION>
<NAME>idmef_time_set_from_ntpstamp</NAME>
<RETURNS>int </RETURNS>
idmef_time_t *time, const char *buf
</FUNCTION>
<FUNCTION>
<NAME>idmef_time_set_from_timeval</NAME>
<RETURNS>int </RETURNS>
idmef_time_t *time, const struct timeval *tv
</FUNCTION>
<FUNCTION>
<NAME>idmef_time_destroy_internal</NAME>
<RETURNS>void </RETURNS>
idmef_time_t *time
</FUNCTION>
<FUNCTION>
<NAME>idmef_time_destroy</NAME>
<RETURNS>void </RETURNS>
idmef_time_t *time
</FUNCTION>
<FUNCTION>
<NAME>idmef_time_clone</NAME>
<RETURNS>int </RETURNS>
const idmef_time_t *src, idmef_time_t **dst
</FUNCTION>
<FUNCTION>
<NAME>idmef_time_copy</NAME>
<RETURNS>int </RETURNS>
const idmef_time_t *src, idmef_time_t *dst
</FUNCTION>
<FUNCTION>
<NAME>idmef_time_set_sec</NAME>
<RETURNS>void </RETURNS>
idmef_time_t *time, uint32_t sec
</FUNCTION>
<FUNCTION>
<NAME>idmef_time_set_usec</NAME>
<RETURNS>void </RETURNS>
idmef_time_t *time, uint32_t usec
</FUNCTION>
<FUNCTION>
<NAME>idmef_time_set_gmt_offset</NAME>
<RETURNS>void </RETURNS>
idmef_time_t *time, int32_t gmtoff
</FUNCTION>
<FUNCTION>
<NAME>idmef_time_get_sec</NAME>
<RETURNS>uint32_t </RETURNS>
const idmef_time_t *time
</FUNCTION>
<FUNCTION>
<NAME>idmef_time_get_usec</NAME>
<RETURNS>uint32_t </RETURNS>
const idmef_time_t *time
</FUNCTION>
<FUNCTION>
<NAME>idmef_time_get_gmt_offset</NAME>
<RETURNS>int32_t </RETURNS>
const idmef_time_t *time
</FUNCTION>
<FUNCTION>
<NAME>idmef_time_to_string</NAME>
<RETURNS>int </RETURNS>
const idmef_time_t *time, requiem_string_t *out
</FUNCTION>
<FUNCTION>
<NAME>idmef_time_to_ntpstamp</NAME>
<RETURNS>int </RETURNS>
const idmef_time_t *time, requiem_string_t *out
</FUNCTION>
<FUNCTION>
<NAME>idmef_time_compare</NAME>
<RETURNS>int </RETURNS>
const idmef_time_t *time1, const idmef_time_t *time2
</FUNCTION>
<MACRO>
<NAME>REQUIEM_ERROR_SYSTEM_ERROR</NAME>
#define REQUIEM_ERROR_SYSTEM_ERROR    (1 << 15)
</MACRO>
<ENUM>
<NAME>requiem_error_source_t</NAME>
typedef enum {
    REQUIEM_ERROR_SOURCE_UNKNOWN = 0,
    REQUIEM_ERROR_SOURCE_IO = 1,
    REQUIEM_ERROR_SOURCE_MESSAGE = 2,
    REQUIEM_ERROR_SOURCE_FAILOVER = 3,
    REQUIEM_ERROR_SOURCE_CLIENT = 4,
    REQUIEM_ERROR_SOURCE_CLIENT_PROFILE = 5,
    REQUIEM_ERROR_SOURCE_EXTRACT = 6,
    REQUIEM_ERROR_SOURCE_CONNECTION = 7,
    REQUIEM_ERROR_SOURCE_CONNECTION_POOL = 8,
    REQUIEM_ERROR_SOURCE_CONFIG_ENGINE = 9,
    REQUIEM_ERROR_SOURCE_STRING = 10,
    REQUIEM_ERROR_SOURCE_IDMEF_TREE_WRAP = 11,
    REQUIEM_ERROR_SOURCE_IDMEF_PATH = 12,
    REQUIEM_ERROR_SOURCE_IDMEF_TYPE = 13,
    REQUIEM_ERROR_SOURCE_IDMEF_MESSAGE_READ = 14,
    REQUIEM_ERROR_SOURCE_IDMEF_CRITERIA = 15,
    REQUIEM_ERROR_SOURCE_IDMEF_VALUE_TYPE = 16,
    REQUIEM_ERROR_SOURCE_REQUIEMDB = 255,
} requiem_error_source_t;
</ENUM>
<ENUM>
<NAME>requiem_error_code_t</NAME>
typedef enum {
    REQUIEM_ERROR_NO_ERROR = 0,
    REQUIEM_ERROR_GENERIC = 1,
    REQUIEM_ERROR_TLS = 2,
    REQUIEM_ERROR_INVAL_LENGTH = 3,
    REQUIEM_ERROR_INVAL_MESSAGE = 4,
    REQUIEM_ERROR_PROTOCOL_VERSION = 5,
    REQUIEM_ERROR_EOF = 6,
    REQUIEM_ERROR_PROFILE = 8,
    REQUIEM_ERROR_TLS_AUTH_REJECTED = 16,
    REQUIEM_ERROR_INVAL_INT8 = 17,
    REQUIEM_ERROR_INVAL_INT16 = 18,
    REQUIEM_ERROR_INVAL_INT32 = 19,
    REQUIEM_ERROR_INVAL_INT64 = 20,
    REQUIEM_ERROR_INVAL_FLOAT = 21,
    REQUIEM_ERROR_INVAL_CHAR = 22,
    REQUIEM_ERROR_INVAL_IDMEF_TIME = 23,
    REQUIEM_ERROR_CONNECTION_STRING = 24,
    REQUIEM_ERROR_IDMEF_VALUE_TYPE_UNKNOWN = 25,
    REQUIEM_ERROR_IDMEF_VALUE_TYPE_COPY_UNAVAILABLE = 26,
    REQUIEM_ERROR_IDMEF_VALUE_TYPE_CLONE_UNAVAILABLE = 27,
    REQUIEM_ERROR_IDMEF_VALUE_TYPE_COMPARE_UNAVAILABLE = 28,
    REQUIEM_ERROR_IDMEF_VALUE_TYPE_READ_UNAVAILABLE = 29,
    REQUIEM_ERROR_IDMEF_VALUE_TYPE_WRITE_UNAVAILABLE = 30,
    REQUIEM_ERROR_IDMEF_VALUE_TYPE_COMPARE_MISMATCH = 31,
    REQUIEM_ERROR_IDMEF_VALUE_TYPE_PARSE = 32,
    REQUIEM_ERROR_IDMEF_CLASS_UNKNOWN = 33,
    REQUIEM_ERROR_IDMEF_CLASS_UNKNOWN_CHILD = 34,
    REQUIEM_ERROR_IDMEF_CLASS_UNKNOWN_NAME = 35,
    REQUIEM_ERROR_IDMEF_PATH_LENGTH = 36,
    REQUIEM_ERROR_IDMEF_PATH_DEPTH = 37,
    REQUIEM_ERROR_IDMEF_PATH_PARENT_ROOT = 38,
    REQUIEM_ERROR_IDMEF_PATH_NTH = 39,
    REQUIEM_ERROR_IDMEF_PATH_MISS_INDEX = 40,
    REQUIEM_ERROR_IDMEF_PATH_INTEGRITY = 41,
    REQUIEM_ERROR_IDMEF_PATH_INDEX_RESERVED = 42,
    REQUIEM_ERROR_IDMEF_PATH_INDEX_FORBIDDEN = 43,
    REQUIEM_ERROR_IDMEF_PATH_INDEX_UNDEFINED = 44,
    REQUIEM_ERROR_IDMEF_TREE_INDEX_UNDEFINED = 45,
    REQUIEM_ERROR_IDMEF_UNKNOWN_ENUM_STRING = 46,
    REQUIEM_ERROR_IDMEF_UNKNOWN_TAG = 47,
    REQUIEM_ERROR_DAEMONIZE_LOCK_HELD = 48,
    REQUIEM_ERROR_PLUGIN_LTDL_INIT = 49,
    REQUIEM_ERROR_STRING_NOT_NULL_TERMINATED = 50,
    REQUIEM_ERROR_CANT_RESOLVE = 51,
    REQUIEM_ERROR_UNKNOWN_PERMISSION_TYPE = 52,
    REQUIEM_ERROR_UNKNOWN_PERMISSION_BIT = 53,
    REQUIEM_ERROR_IDMEF_CRITERIA_PARSE = 55,
    REQUIEM_ERROR_IDMEF_CRITERION_UNSUPPORTED_OPERATOR = 56,
    REQUIEM_ERROR_IDMEF_CRITERION_INVALID_REGEX = 57,
    REQUIEM_ERROR_TLS_WARNING_ALERT = 58,
    REQUIEM_ERROR_TLS_FATAL_ALERT = 59,
    REQUIEM_ERROR_IDMEF_CLASS_CHILD_NOT_CLASS = 60,
    REQUIEM_ERROR_ASSERTION = 61,
    REQUIEM_ERROR_IDMEF_VALUE_TYPE_REF_UNAVAILABLE = 62,
    REQUIEM_ERROR_UNKNOWN_ERRNO = 16382,
    REQUIEM_ERROR_E2BIG = REQUIEM_ERROR_SYSTEM_ERROR | 0,
    REQUIEM_ERROR_EACCES = REQUIEM_ERROR_SYSTEM_ERROR | 1,
    REQUIEM_ERROR_EADDRINUSE = REQUIEM_ERROR_SYSTEM_ERROR | 2,
    REQUIEM_ERROR_EADDRNOTAVAIL = REQUIEM_ERROR_SYSTEM_ERROR | 3,
    REQUIEM_ERROR_EADV = REQUIEM_ERROR_SYSTEM_ERROR | 4,
    REQUIEM_ERROR_EAFNOSUPPORT = REQUIEM_ERROR_SYSTEM_ERROR | 5,
    REQUIEM_ERROR_EAGAIN = REQUIEM_ERROR_SYSTEM_ERROR | 6,
    REQUIEM_ERROR_EALREADY = REQUIEM_ERROR_SYSTEM_ERROR | 7,
    REQUIEM_ERROR_EAUTH = REQUIEM_ERROR_SYSTEM_ERROR | 8,
    REQUIEM_ERROR_EBACKGROUND = REQUIEM_ERROR_SYSTEM_ERROR | 9,
    REQUIEM_ERROR_EBADE = REQUIEM_ERROR_SYSTEM_ERROR | 10,
    REQUIEM_ERROR_EBADF = REQUIEM_ERROR_SYSTEM_ERROR | 11,
    REQUIEM_ERROR_EBADFD = REQUIEM_ERROR_SYSTEM_ERROR | 12,
    REQUIEM_ERROR_EBADMSG = REQUIEM_ERROR_SYSTEM_ERROR | 13,
    REQUIEM_ERROR_EBADR = REQUIEM_ERROR_SYSTEM_ERROR | 14,
    REQUIEM_ERROR_EBADRPC = REQUIEM_ERROR_SYSTEM_ERROR | 15,
    REQUIEM_ERROR_EBADRQC = REQUIEM_ERROR_SYSTEM_ERROR | 16,
    REQUIEM_ERROR_EBADSLT = REQUIEM_ERROR_SYSTEM_ERROR | 17,
    REQUIEM_ERROR_EBFONT = REQUIEM_ERROR_SYSTEM_ERROR | 18,
    REQUIEM_ERROR_EBUSY = REQUIEM_ERROR_SYSTEM_ERROR | 19,
    REQUIEM_ERROR_ECANCELED = REQUIEM_ERROR_SYSTEM_ERROR | 20,
    REQUIEM_ERROR_ECHILD = REQUIEM_ERROR_SYSTEM_ERROR | 21,
    REQUIEM_ERROR_ECHRNG = REQUIEM_ERROR_SYSTEM_ERROR | 22,
    REQUIEM_ERROR_ECOMM = REQUIEM_ERROR_SYSTEM_ERROR | 23,
    REQUIEM_ERROR_ECONNABORTED = REQUIEM_ERROR_SYSTEM_ERROR | 24,
    REQUIEM_ERROR_ECONNREFUSED = REQUIEM_ERROR_SYSTEM_ERROR | 25,
    REQUIEM_ERROR_ECONNRESET = REQUIEM_ERROR_SYSTEM_ERROR | 26,
    REQUIEM_ERROR_ED = REQUIEM_ERROR_SYSTEM_ERROR | 27,
    REQUIEM_ERROR_EDEADLK = REQUIEM_ERROR_SYSTEM_ERROR | 28,
    REQUIEM_ERROR_EDEADLOCK = REQUIEM_ERROR_SYSTEM_ERROR | 29,
    REQUIEM_ERROR_EDESTADDRREQ = REQUIEM_ERROR_SYSTEM_ERROR | 30,
    REQUIEM_ERROR_EDIED = REQUIEM_ERROR_SYSTEM_ERROR | 31,
    REQUIEM_ERROR_EDOM = REQUIEM_ERROR_SYSTEM_ERROR | 32,
    REQUIEM_ERROR_EDOTDOT = REQUIEM_ERROR_SYSTEM_ERROR | 33,
    REQUIEM_ERROR_EDQUOT = REQUIEM_ERROR_SYSTEM_ERROR | 34,
    REQUIEM_ERROR_EEXIST = REQUIEM_ERROR_SYSTEM_ERROR | 35,
    REQUIEM_ERROR_EFAULT = REQUIEM_ERROR_SYSTEM_ERROR | 36,
    REQUIEM_ERROR_EFBIG = REQUIEM_ERROR_SYSTEM_ERROR | 37,
    REQUIEM_ERROR_EFTYPE = REQUIEM_ERROR_SYSTEM_ERROR | 38,
    REQUIEM_ERROR_EGRATUITOUS = REQUIEM_ERROR_SYSTEM_ERROR | 39,
    REQUIEM_ERROR_EGREGIOUS = REQUIEM_ERROR_SYSTEM_ERROR | 40,
    REQUIEM_ERROR_EHOSTDOWN = REQUIEM_ERROR_SYSTEM_ERROR | 41,
    REQUIEM_ERROR_EHOSTUNREACH = REQUIEM_ERROR_SYSTEM_ERROR | 42,
    REQUIEM_ERROR_EIDRM = REQUIEM_ERROR_SYSTEM_ERROR | 43,
    REQUIEM_ERROR_EIEIO = REQUIEM_ERROR_SYSTEM_ERROR | 44,
    REQUIEM_ERROR_EILSEQ = REQUIEM_ERROR_SYSTEM_ERROR | 45,
    REQUIEM_ERROR_EINPROGRESS = REQUIEM_ERROR_SYSTEM_ERROR | 46,
    REQUIEM_ERROR_EINTR = REQUIEM_ERROR_SYSTEM_ERROR | 47,
    REQUIEM_ERROR_EINVAL = REQUIEM_ERROR_SYSTEM_ERROR | 48,
    REQUIEM_ERROR_EIO = REQUIEM_ERROR_SYSTEM_ERROR | 49,
    REQUIEM_ERROR_EISCONN = REQUIEM_ERROR_SYSTEM_ERROR | 50,
    REQUIEM_ERROR_EISDIR = REQUIEM_ERROR_SYSTEM_ERROR | 51,
    REQUIEM_ERROR_EISNAM = REQUIEM_ERROR_SYSTEM_ERROR | 52,
    REQUIEM_ERROR_EL2HLT = REQUIEM_ERROR_SYSTEM_ERROR | 53,
    REQUIEM_ERROR_EL2NSYNC = REQUIEM_ERROR_SYSTEM_ERROR | 54,
    REQUIEM_ERROR_EL3HLT = REQUIEM_ERROR_SYSTEM_ERROR | 55,
    REQUIEM_ERROR_EL3RST = REQUIEM_ERROR_SYSTEM_ERROR | 56,
    REQUIEM_ERROR_ELIBACC = REQUIEM_ERROR_SYSTEM_ERROR | 57,
    REQUIEM_ERROR_ELIBBAD = REQUIEM_ERROR_SYSTEM_ERROR | 58,
    REQUIEM_ERROR_ELIBEXEC = REQUIEM_ERROR_SYSTEM_ERROR | 59,
    REQUIEM_ERROR_ELIBMAX = REQUIEM_ERROR_SYSTEM_ERROR | 60,
    REQUIEM_ERROR_ELIBSCN = REQUIEM_ERROR_SYSTEM_ERROR | 61,
    REQUIEM_ERROR_ELNRNG = REQUIEM_ERROR_SYSTEM_ERROR | 62,
    REQUIEM_ERROR_ELOOP = REQUIEM_ERROR_SYSTEM_ERROR | 63,
    REQUIEM_ERROR_EMEDIUMTYPE = REQUIEM_ERROR_SYSTEM_ERROR | 64,
    REQUIEM_ERROR_EMFILE = REQUIEM_ERROR_SYSTEM_ERROR | 65,
    REQUIEM_ERROR_EMLINK = REQUIEM_ERROR_SYSTEM_ERROR | 66,
    REQUIEM_ERROR_EMSGSIZE = REQUIEM_ERROR_SYSTEM_ERROR | 67,
    REQUIEM_ERROR_EMULTIHOP = REQUIEM_ERROR_SYSTEM_ERROR | 68,
    REQUIEM_ERROR_ENAMETOOLONG = REQUIEM_ERROR_SYSTEM_ERROR | 69,
    REQUIEM_ERROR_ENAVAIL = REQUIEM_ERROR_SYSTEM_ERROR | 70,
    REQUIEM_ERROR_ENEEDAUTH = REQUIEM_ERROR_SYSTEM_ERROR | 71,
    REQUIEM_ERROR_ENETDOWN = REQUIEM_ERROR_SYSTEM_ERROR | 72,
    REQUIEM_ERROR_ENETRESET = REQUIEM_ERROR_SYSTEM_ERROR | 73,
    REQUIEM_ERROR_ENETUNREACH = REQUIEM_ERROR_SYSTEM_ERROR | 74,
    REQUIEM_ERROR_ENFILE = REQUIEM_ERROR_SYSTEM_ERROR | 75,
    REQUIEM_ERROR_ENOANO = REQUIEM_ERROR_SYSTEM_ERROR | 76,
    REQUIEM_ERROR_ENOBUFS = REQUIEM_ERROR_SYSTEM_ERROR | 77,
    REQUIEM_ERROR_ENOCSI = REQUIEM_ERROR_SYSTEM_ERROR | 78,
    REQUIEM_ERROR_ENODATA = REQUIEM_ERROR_SYSTEM_ERROR | 79,
    REQUIEM_ERROR_ENODEV = REQUIEM_ERROR_SYSTEM_ERROR | 80,
    REQUIEM_ERROR_ENOENT = REQUIEM_ERROR_SYSTEM_ERROR | 81,
    REQUIEM_ERROR_ENOEXEC = REQUIEM_ERROR_SYSTEM_ERROR | 82,
    REQUIEM_ERROR_ENOLCK = REQUIEM_ERROR_SYSTEM_ERROR | 83,
    REQUIEM_ERROR_ENOLINK = REQUIEM_ERROR_SYSTEM_ERROR | 84,
    REQUIEM_ERROR_ENOMEDIUM = REQUIEM_ERROR_SYSTEM_ERROR | 85,
    REQUIEM_ERROR_ENOMEM = REQUIEM_ERROR_SYSTEM_ERROR | 86,
    REQUIEM_ERROR_ENOMSG = REQUIEM_ERROR_SYSTEM_ERROR | 87,
    REQUIEM_ERROR_ENONET = REQUIEM_ERROR_SYSTEM_ERROR | 88,
    REQUIEM_ERROR_ENOPKG = REQUIEM_ERROR_SYSTEM_ERROR | 89,
    REQUIEM_ERROR_ENOPROTOOPT = REQUIEM_ERROR_SYSTEM_ERROR | 90,
    REQUIEM_ERROR_ENOSPC = REQUIEM_ERROR_SYSTEM_ERROR | 91,
    REQUIEM_ERROR_ENOSR = REQUIEM_ERROR_SYSTEM_ERROR | 92,
    REQUIEM_ERROR_ENOSTR = REQUIEM_ERROR_SYSTEM_ERROR | 93,
    REQUIEM_ERROR_ENOSYS = REQUIEM_ERROR_SYSTEM_ERROR | 94,
    REQUIEM_ERROR_ENOTBLK = REQUIEM_ERROR_SYSTEM_ERROR | 95,
    REQUIEM_ERROR_ENOTCONN = REQUIEM_ERROR_SYSTEM_ERROR | 96,
    REQUIEM_ERROR_ENOTDIR = REQUIEM_ERROR_SYSTEM_ERROR | 97,
    REQUIEM_ERROR_ENOTEMPTY = REQUIEM_ERROR_SYSTEM_ERROR | 98,
    REQUIEM_ERROR_ENOTNAM = REQUIEM_ERROR_SYSTEM_ERROR | 99,
    REQUIEM_ERROR_ENOTSOCK = REQUIEM_ERROR_SYSTEM_ERROR | 100,
    REQUIEM_ERROR_ENOTSUP = REQUIEM_ERROR_SYSTEM_ERROR | 101,
    REQUIEM_ERROR_ENOTTY = REQUIEM_ERROR_SYSTEM_ERROR | 102,
    REQUIEM_ERROR_ENOTUNIQ = REQUIEM_ERROR_SYSTEM_ERROR | 103,
    REQUIEM_ERROR_ENXIO = REQUIEM_ERROR_SYSTEM_ERROR | 104,
    REQUIEM_ERROR_EOPNOTSUPP = REQUIEM_ERROR_SYSTEM_ERROR | 105,
    REQUIEM_ERROR_EOVERFLOW = REQUIEM_ERROR_SYSTEM_ERROR | 106,
    REQUIEM_ERROR_EPERM = REQUIEM_ERROR_SYSTEM_ERROR | 107,
    REQUIEM_ERROR_EPFNOSUPPORT = REQUIEM_ERROR_SYSTEM_ERROR | 108,
    REQUIEM_ERROR_EPIPE = REQUIEM_ERROR_SYSTEM_ERROR | 109,
    REQUIEM_ERROR_EPROCLIM = REQUIEM_ERROR_SYSTEM_ERROR | 110,
    REQUIEM_ERROR_EPROCUNAVAIL = REQUIEM_ERROR_SYSTEM_ERROR | 111,
    REQUIEM_ERROR_EPROGMISMATCH = REQUIEM_ERROR_SYSTEM_ERROR | 112,
    REQUIEM_ERROR_EPROGUNAVAIL = REQUIEM_ERROR_SYSTEM_ERROR | 113,
    REQUIEM_ERROR_EPROTO = REQUIEM_ERROR_SYSTEM_ERROR | 114,
    REQUIEM_ERROR_EPROTONOSUPPORT = REQUIEM_ERROR_SYSTEM_ERROR | 115,
    REQUIEM_ERROR_EPROTOTYPE = REQUIEM_ERROR_SYSTEM_ERROR | 116,
    REQUIEM_ERROR_ERANGE = REQUIEM_ERROR_SYSTEM_ERROR | 117,
    REQUIEM_ERROR_EREMCHG = REQUIEM_ERROR_SYSTEM_ERROR | 118,
    REQUIEM_ERROR_EREMOTE = REQUIEM_ERROR_SYSTEM_ERROR | 119,
    REQUIEM_ERROR_EREMOTEIO = REQUIEM_ERROR_SYSTEM_ERROR | 120,
    REQUIEM_ERROR_ERESTART = REQUIEM_ERROR_SYSTEM_ERROR | 121,
    REQUIEM_ERROR_EROFS = REQUIEM_ERROR_SYSTEM_ERROR | 122,
    REQUIEM_ERROR_ERPCMISMATCH = REQUIEM_ERROR_SYSTEM_ERROR | 123,
    REQUIEM_ERROR_ESHUTDOWN = REQUIEM_ERROR_SYSTEM_ERROR | 124,
    REQUIEM_ERROR_ESOCKTNOSUPPORT = REQUIEM_ERROR_SYSTEM_ERROR | 125,
    REQUIEM_ERROR_ESPIPE = REQUIEM_ERROR_SYSTEM_ERROR | 126,
    REQUIEM_ERROR_ESRCH = REQUIEM_ERROR_SYSTEM_ERROR | 127,
    REQUIEM_ERROR_ESRMNT = REQUIEM_ERROR_SYSTEM_ERROR | 128,
    REQUIEM_ERROR_ESTALE = REQUIEM_ERROR_SYSTEM_ERROR | 129,
    REQUIEM_ERROR_ESTRPIPE = REQUIEM_ERROR_SYSTEM_ERROR | 130,
    REQUIEM_ERROR_ETIME = REQUIEM_ERROR_SYSTEM_ERROR | 131,
    REQUIEM_ERROR_ETIMEDOUT = REQUIEM_ERROR_SYSTEM_ERROR | 132,
    REQUIEM_ERROR_ETOOMANYREFS = REQUIEM_ERROR_SYSTEM_ERROR | 133,
    REQUIEM_ERROR_ETXTBSY = REQUIEM_ERROR_SYSTEM_ERROR | 134,
    REQUIEM_ERROR_EUCLEAN = REQUIEM_ERROR_SYSTEM_ERROR | 135,
    REQUIEM_ERROR_EUNATCH = REQUIEM_ERROR_SYSTEM_ERROR | 136,
    REQUIEM_ERROR_EUSERS = REQUIEM_ERROR_SYSTEM_ERROR | 137,
    REQUIEM_ERROR_EWOULDBLOCK = REQUIEM_ERROR_SYSTEM_ERROR | 138,
    REQUIEM_ERROR_EXDEV = REQUIEM_ERROR_SYSTEM_ERROR | 139,
    REQUIEM_ERROR_EXFULL = REQUIEM_ERROR_SYSTEM_ERROR | 140,
} requiem_error_code_t;
</ENUM>
<MACRO>
<NAME>REQUIEM_ERROR_SOURCE_DEFAULT</NAME>
 #define REQUIEM_ERROR_SOURCE_DEFAULT  REQUIEM_ERROR_SOURCE_UNKNOWN
</MACRO>
<TYPEDEF>
<NAME>requiem_error_t</NAME>
typedef signed int requiem_error_t;
</TYPEDEF>
<FUNCTION>
<NAME>requiem_error_is_verbose</NAME>
<RETURNS>requiem_bool_t </RETURNS>
requiem_error_t error
</FUNCTION>
<FUNCTION>
<NAME>requiem_error_get_code</NAME>
<RETURNS>requiem_error_code_t </RETURNS>
requiem_error_t error
</FUNCTION>
<FUNCTION>
<NAME>requiem_error_get_source</NAME>
<RETURNS>requiem_error_source_t </RETURNS>
requiem_error_t error
</FUNCTION>
<FUNCTION>
<NAME>requiem_error_code_from_errno</NAME>
<RETURNS>requiem_error_code_t </RETURNS>
int err
</FUNCTION>
<FUNCTION>
<NAME>requiem_error_make</NAME>
<RETURNS>requiem_error_t </RETURNS>
requiem_error_source_t source, requiem_error_code_t code
</FUNCTION>
<FUNCTION>
<NAME>requiem_error_make_from_errno</NAME>
<RETURNS>requiem_error_t </RETURNS>
requiem_error_source_t source, int err
</FUNCTION>
<FUNCTION>
<NAME>requiem_perror</NAME>
<RETURNS>void </RETURNS>
requiem_error_t error, const char *fmt, ...
</FUNCTION>
<FUNCTION>
<NAME>requiem_strerror</NAME>
<RETURNS>const char *</RETURNS>
requiem_error_t err
</FUNCTION>
<FUNCTION>
<NAME>requiem_strsource</NAME>
<RETURNS>const char *</RETURNS>
requiem_error_t err
</FUNCTION>
<FUNCTION>
<NAME>requiem_error_code_to_errno</NAME>
<RETURNS>int </RETURNS>
requiem_error_code_t code
</FUNCTION>
<FUNCTION>
<NAME>requiem_error_verbose_make_v</NAME>
<RETURNS>requiem_error_t </RETURNS>
requiem_error_source_t source,requiem_error_code_t code, const char *fmt, va_list ap
</FUNCTION>
<FUNCTION>
<NAME>requiem_error_verbose_make</NAME>
<RETURNS>requiem_error_t </RETURNS>
requiem_error_source_t source,requiem_error_code_t code, const char *fmt, ...
</FUNCTION>
<FUNCTION>
<NAME>requiem_error_make</NAME>
<RETURNS>return </RETURNS>
REQUIEM_ERROR_SOURCE_DEFAULT, code
</FUNCTION>
<FUNCTION>
<NAME>requiem_error_make</NAME>
<RETURNS>return </RETURNS>
REQUIEM_ERROR_SOURCE_DEFAULT, requiem_error_code_from_errno(err)
</FUNCTION>
